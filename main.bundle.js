/*! For license information please see main.bundle.js.LICENSE.txt */
(()=>{var e,t,n={8234:(e,t,n)=>{"use strict";e.exports=n.p+"5809f87f781e60ed3278.mp3"},9300:(e,t,n)=>{"use strict";e.exports=n.p+"ac4fe59d2a61b4fff614.mp3"},9101:e=>{window,e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/dist/",n(n.s=166)}([function(e,t,n){var r=n(34),i=n(94),o=n(70),a=n(63),s=n(121),l=a.set,u=a.getterFor("Array Iterator");e.exports=s(Array,"Array",(function(e,t){l(this,{type:"Array Iterator",target:r(e),index:0,kind:t})}),(function(){var e=u(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values"),o.Arguments=o.Array,i("keys"),i("values"),i("entries")},function(e,t,n){var r=n(14),i=n(22),o=n(54),a=n(64),s=n(23),l=n(90),u=n(112),c=n(17),f=n(27),d=n(66),p=n(26),h=n(28),y=n(32),m=n(34),v=n(62),b=n(60),g=n(55),_=n(67),w=n(65),k=n(141),x=n(88),C=n(47),E=n(30),O=n(74),S=n(40),j=n(45),A=n(83),P=n(75),T=n(76),R=n(84),L=n(19),I=n(114),N=n(115),B=n(91),D=n(63),M=n(51).forEach,F=P("hidden"),z=L("toPrimitive"),V=D.set,H=D.getterFor("Symbol"),U=Object.prototype,q=i.Symbol,W=o("JSON","stringify"),$=C.f,G=E.f,K=k.f,Q=O.f,J=A("symbols"),Y=A("op-symbols"),Z=A("string-to-symbol-registry"),X=A("symbol-to-string-registry"),ee=A("wks"),te=i.QObject,ne=!te||!te.prototype||!te.prototype.findChild,re=s&&c((function(){return 7!=g(G({},"a",{get:function(){return G(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=$(U,t);r&&delete U[t],G(e,t,n),r&&e!==U&&G(U,t,r)}:G,ie=function(e,t){var n=J[e]=g(q.prototype);return V(n,{type:"Symbol",tag:e,description:t}),s||(n.description=t),n},oe=u?function(e){return"symbol"==typeof e}:function(e){return Object(e)instanceof q},ae=function(e,t,n){e===U&&ae(Y,t,n),h(e);var r=v(t,!0);return h(n),f(J,r)?(n.enumerable?(f(e,F)&&e[F][r]&&(e[F][r]=!1),n=g(n,{enumerable:b(0,!1)})):(f(e,F)||G(e,F,b(1,{})),e[F][r]=!0),re(e,r,n)):G(e,r,n)},se=function(e,t){h(e);var n=m(t),r=_(n).concat(fe(n));return M(r,(function(t){s&&!le.call(n,t)||ae(e,t,n[t])})),e},le=function(e){var t=v(e,!0),n=Q.call(this,t);return!(this===U&&f(J,t)&&!f(Y,t))&&(!(n||!f(this,t)||!f(J,t)||f(this,F)&&this[F][t])||n)},ue=function(e,t){var n=m(e),r=v(t,!0);if(n!==U||!f(J,r)||f(Y,r)){var i=$(n,r);return!i||!f(J,r)||f(n,F)&&n[F][r]||(i.enumerable=!0),i}},ce=function(e){var t=K(m(e)),n=[];return M(t,(function(e){f(J,e)||f(T,e)||n.push(e)})),n},fe=function(e){var t=e===U,n=K(t?Y:m(e)),r=[];return M(n,(function(e){!f(J,e)||t&&!f(U,e)||r.push(J[e])})),r};l||(j((q=function(){if(this instanceof q)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=R(e),n=function(e){this===U&&n.call(Y,e),f(this,F)&&f(this[F],t)&&(this[F][t]=!1),re(this,t,b(1,e))};return s&&ne&&re(U,t,{configurable:!0,set:n}),ie(t,e)}).prototype,"toString",(function(){return H(this).tag})),j(q,"withoutSetter",(function(e){return ie(R(e),e)})),O.f=le,E.f=ae,C.f=ue,w.f=k.f=ce,x.f=fe,I.f=function(e){return ie(L(e),e)},s&&(G(q.prototype,"description",{configurable:!0,get:function(){return H(this).description}}),a||j(U,"propertyIsEnumerable",le,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!l,sham:!l},{Symbol:q}),M(_(ee),(function(e){N(e)})),r({target:"Symbol",stat:!0,forced:!l},{for:function(e){var t=String(e);if(f(Z,t))return Z[t];var n=q(t);return Z[t]=n,X[n]=t,n},keyFor:function(e){if(!oe(e))throw TypeError(e+" is not a symbol");if(f(X,e))return X[e]},useSetter:function(){ne=!0},useSimple:function(){ne=!1}}),r({target:"Object",stat:!0,forced:!l,sham:!s},{create:function(e,t){return void 0===t?g(e):se(g(e),t)},defineProperty:ae,defineProperties:se,getOwnPropertyDescriptor:ue}),r({target:"Object",stat:!0,forced:!l},{getOwnPropertyNames:ce,getOwnPropertySymbols:fe}),r({target:"Object",stat:!0,forced:c((function(){x.f(1)}))},{getOwnPropertySymbols:function(e){return x.f(y(e))}}),W&&r({target:"JSON",stat:!0,forced:!l||c((function(){var e=q();return"[null]"!=W([e])||"{}"!=W({a:e})||"{}"!=W(Object(e))}))},{stringify:function(e,t,n){for(var r,i=[e],o=1;arguments.length>o;)i.push(arguments[o++]);if(r=t,(p(t)||void 0!==e)&&!oe(e))return d(t)||(t=function(e,t){if("function"==typeof r&&(t=r.call(this,e,t)),!oe(t))return t}),i[1]=t,W.apply(null,i)}}),q.prototype[z]||S(q.prototype,z,q.prototype.valueOf),B(q,"Symbol"),T[F]=!0},function(e,t,n){var r=n(14),i=n(23),o=n(22),a=n(27),s=n(26),l=n(30).f,u=n(108),c=o.Symbol;if(i&&"function"==typeof c&&(!("description"in c.prototype)||void 0!==c().description)){var f={},d=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof d?new c(e):void 0===e?c():c(e);return""===e&&(f[t]=!0),t};u(d,c);var p=d.prototype=c.prototype;p.constructor=d;var h=p.toString,y="Symbol(test)"==String(c("test")),m=/^Symbol\((.*)\)[^)]+$/;l(p,"description",{configurable:!0,get:function(){var e=s(this)?this.valueOf():this,t=h.call(e);if(a(f,e))return"";var n=y?t.slice(7,-1):t.replace(m,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:d})}},function(e,t,n){n(115)("iterator")},function(e,t,n){var r=n(45),i=Date.prototype,o=i.toString,a=i.getTime;new Date(NaN)+""!="Invalid Date"&&r(i,"toString",(function(){var e=a.call(this);return e==e?o.call(this):"Invalid Date"}))},function(e,t,n){var r=n(95),i=n(45),o=n(152);r||i(Object.prototype,"toString",o,{unsafe:!0})},function(e,t,n){var r=n(45),i=n(28),o=n(17),a=n(97),s=RegExp.prototype,l=s.toString,u=o((function(){return"/a/b"!=l.call({source:"a",flags:"b"})})),c="toString"!=l.name;(u||c)&&r(RegExp.prototype,"toString",(function(){var e=i(this),t=String(e.source),n=e.flags;return"/"+t+"/"+String(void 0===n&&e instanceof RegExp&&!("flags"in s)?a.call(e):n)}),{unsafe:!0})},function(e,t,n){var r=n(125).charAt,i=n(63),o=n(121),a=i.set,s=i.getterFor("String Iterator");o(String,"String",(function(e){a(this,{type:"String Iterator",string:String(e),index:0})}),(function(){var e,t=s(this),n=t.string,i=t.index;return i>=n.length?{value:void 0,done:!0}:(e=r(n,i),t.index+=e.length,{value:e,done:!1})}))},function(e,t,n){var r=n(22),i=n(126),o=n(0),a=n(40),s=n(19),l=s("iterator"),u=s("toStringTag"),c=o.values;for(var f in i){var d=r[f],p=d&&d.prototype;if(p){if(p[l]!==c)try{a(p,l,c)}catch(e){p[l]=c}if(p[u]||a(p,u,f),i[f])for(var h in o)if(p[h]!==o[h])try{a(p,h,o[h])}catch(e){p[h]=o[h]}}}},function(e,t,n){n(14)({target:"Object",stat:!0,sham:!n(23)},{create:n(55)})},function(e,t,n){var r=n(14),i=n(17),o=n(32),a=n(77),s=n(123);r({target:"Object",stat:!0,forced:i((function(){a(1)})),sham:!s},{getPrototypeOf:function(e){return a(o(e))}})},function(e,t,n){n(14)({target:"Object",stat:!0},{setPrototypeOf:n(96)})},function(e,t,n){var r=n(14),i=n(54),o=n(56),a=n(28),s=n(26),l=n(55),u=n(131),c=n(17),f=i("Reflect","construct"),d=c((function(){function e(){}return!(f((function(){}),[],e)instanceof e)})),p=!c((function(){f((function(){}))})),h=d||p;r({target:"Reflect",stat:!0,forced:h,sham:h},{construct:function(e,t){o(e),a(t);var n=arguments.length<3?e:o(arguments[2]);if(p&&!d)return f(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(u.apply(e,r))}var i=n.prototype,c=l(s(i)?i:Object.prototype),h=Function.apply.call(e,c,t);return s(h)?h:c}})},function(e,t,n){var r=n(14),i=n(23);r({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperty:n(30).f})},function(e,t,n){var r=n(22),i=n(47).f,o=n(40),a=n(45),s=n(82),l=n(108),u=n(89);e.exports=function(e,t){var n,c,f,d,p,h=e.target,y=e.global,m=e.stat;if(n=y?r:m?r[h]||s(h,{}):(r[h]||{}).prototype)for(c in t){if(d=t[c],f=e.noTargetGet?(p=i(n,c))&&p.value:n[c],!u(y?c:h+(m?".":"#")+c,e.forced)&&void 0!==f){if(typeof d==typeof f)continue;l(d,f)}(e.sham||f&&f.sham)&&o(d,"sham",!0),a(n,c,d,e)}}},function(e,t,n){var r=n(14),i=n(17),o=n(34),a=n(47).f,s=n(23),l=i((function(){a(1)}));r({target:"Object",stat:!0,forced:!s||l,sham:!s},{getOwnPropertyDescriptor:function(e,t){return a(o(e),t)}})},function(e,t,n){var r=n(14),i=n(26),o=n(28),a=n(27),s=n(47),l=n(77);r({target:"Reflect",stat:!0},{get:function e(t,n){var r,u,c=arguments.length<3?t:arguments[2];return o(t)===c?t[n]:(r=s.f(t,n))?a(r,"value")?r.value:void 0===r.get?void 0:r.get.call(c):i(u=l(t))?e(u,n,c):void 0}})},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(14),i=n(17),o=n(66),a=n(26),s=n(32),l=n(35),u=n(68),c=n(92),f=n(69),d=n(19),p=n(117),h=d("isConcatSpreadable"),y=p>=51||!i((function(){var e=[];return e[h]=!1,e.concat()[0]!==e})),m=f("concat"),v=function(e){if(!a(e))return!1;var t=e[h];return void 0!==t?!!t:o(e)};r({target:"Array",proto:!0,forced:!y||!m},{concat:function(e){var t,n,r,i,o,a=s(this),f=c(a,0),d=0;for(t=-1,r=arguments.length;t<r;t++)if(v(o=-1===t?a:arguments[t])){if(d+(i=l(o.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(n=0;n<i;n++,d++)n in o&&u(f,d,o[n])}else{if(d>=9007199254740991)throw TypeError("Maximum allowed index exceeded");u(f,d++,o)}return f.length=d,f}})},function(e,t,n){var r=n(22),i=n(83),o=n(27),a=n(84),s=n(90),l=n(112),u=i("wks"),c=r.Symbol,f=l?c:c&&c.withoutSetter||a;e.exports=function(e){return o(u,e)||(s&&o(c,e)?u[e]=c[e]:u[e]=f("Symbol."+e)),u[e]}},function(e,t,n){var r=n(14),i=n(119);r({target:"Array",proto:!0,forced:[].forEach!=i},{forEach:i})},function(e,t,n){var r=n(22),i=n(126),o=n(119),a=n(40);for(var s in i){var l=r[s],u=l&&l.prototype;if(u&&u.forEach!==o)try{a(u,"forEach",o)}catch(e){u.forEach=o}}},function(e,t,n){(function(t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t&&t)||Function("return this")()}).call(this,n(138))},function(e,t,n){var r=n(17);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t,n){var r=n(14),i=n(78);r({target:"RegExp",proto:!0,forced:/./.exec!==i},{exec:i})},function(e,t,n){n(14)({target:"Array",stat:!0},{isArray:n(66)})},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(26);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t,n){var r=n(14),i=n(85).includes,o=n(94);r({target:"Array",proto:!0,forced:!n(36)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}}),o("includes")},function(e,t,n){var r=n(23),i=n(104),o=n(28),a=n(62),s=Object.defineProperty;t.f=r?s:function(e,t,n){if(o(e),t=a(t,!0),o(n),i)try{return s(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(14),i=n(26),o=n(66),a=n(86),s=n(35),l=n(34),u=n(68),c=n(19),f=n(69),d=n(36),p=f("slice"),h=d("slice",{ACCESSORS:!0,0:0,1:2}),y=c("species"),m=[].slice,v=Math.max;r({target:"Array",proto:!0,forced:!p||!h},{slice:function(e,t){var n,r,c,f=l(this),d=s(f.length),p=a(e,d),h=a(void 0===t?d:t,d);if(o(f)&&("function"!=typeof(n=f.constructor)||n!==Array&&!o(n.prototype)?i(n)&&null===(n=n[y])&&(n=void 0):n=void 0,n===Array||void 0===n))return m.call(f,p,h);for(r=new(void 0===n?Array:n)(v(h-p,0)),c=0;p<h;p++,c++)p in f&&u(r,c,f[p]);return r.length=c,r}})},function(e,t,n){var r=n(39);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(23),i=n(30).f,o=Function.prototype,a=o.toString,s=/^\s*function ([^ (]*)/;r&&!("name"in o)&&i(o,"name",{configurable:!0,get:function(){try{return a.call(this).match(s)[1]}catch(e){return""}}})},function(e,t,n){var r=n(61),i=n(39);e.exports=function(e){return r(i(e))}},function(e,t,n){var r=n(50),i=Math.min;e.exports=function(e){return e>0?i(r(e),9007199254740991):0}},function(e,t,n){var r=n(23),i=n(17),o=n(27),a=Object.defineProperty,s={},l=function(e){throw e};e.exports=function(e,t){if(o(s,e))return s[e];t||(t={});var n=[][e],u=!!o(t,"ACCESSORS")&&t.ACCESSORS,c=o(t,0)?t[0]:l,f=o(t,1)?t[1]:void 0;return s[e]=!!n&&!i((function(){if(u&&!r)return!0;var e={length:-1};u?a(e,1,{enumerable:!0,get:l}):e[1]=1,n.call(e,c,f)}))}},function(e,t,n){var r=n(14),i=n(142);r({target:"Array",stat:!0,forced:!n(146)((function(e){Array.from(e)}))},{from:i})},function(e,t,n){var r=n(14),i=n(129),o=n(39);r({target:"String",proto:!0,forced:!n(130)("includes")},{includes:function(e){return!!~String(o(this)).indexOf(i(e),arguments.length>1?arguments[1]:void 0)}})},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,n){var r=n(23),i=n(30),o=n(60);e.exports=r?function(e,t,n){return i.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(14),i=n(149).left,o=n(52),a=n(36),s=o("reduce"),l=a("reduce",{1:0});r({target:"Array",proto:!0,forced:!s||!l},{reduce:function(e){return i(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){var r=n(14),i=n(32),o=n(67);r({target:"Object",stat:!0,forced:n(17)((function(){o(1)}))},{keys:function(e){return o(i(e))}})},function(e,t,n){var r=n(99),i=n(28),o=n(32),a=n(35),s=n(50),l=n(39),u=n(100),c=n(101),f=Math.max,d=Math.min,p=Math.floor,h=/\$([$&'`]|\d\d?|<[^>]*>)/g,y=/\$([$&'`]|\d\d?)/g;r("replace",2,(function(e,t,n,r){var m=r.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,v=r.REPLACE_KEEPS_$0,b=m?"$":"$0";return[function(n,r){var i=l(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,i,r):t.call(String(i),n,r)},function(e,r){if(!m&&v||"string"==typeof r&&-1===r.indexOf(b)){var o=n(t,e,this,r);if(o.done)return o.value}var l=i(e),p=String(this),h="function"==typeof r;h||(r=String(r));var y=l.global;if(y){var _=l.unicode;l.lastIndex=0}for(var w=[];;){var k=c(l,p);if(null===k)break;if(w.push(k),!y)break;""===String(k[0])&&(l.lastIndex=u(p,a(l.lastIndex),_))}for(var x,C="",E=0,O=0;O<w.length;O++){k=w[O];for(var S=String(k[0]),j=f(d(s(k.index),p.length),0),A=[],P=1;P<k.length;P++)A.push(void 0===(x=k[P])?x:String(x));var T=k.groups;if(h){var R=[S].concat(A,j,p);void 0!==T&&R.push(T);var L=String(r.apply(void 0,R))}else L=g(S,p,j,A,T,r);j>=E&&(C+=p.slice(E,j)+L,E=j+S.length)}return C+p.slice(E)}];function g(e,n,r,i,a,s){var l=r+e.length,u=i.length,c=y;return void 0!==a&&(a=o(a),c=h),t.call(s,c,(function(t,o){var s;switch(o.charAt(0)){case"$":return"$";case"&":return e;case"`":return n.slice(0,r);case"'":return n.slice(l);case"<":s=a[o.slice(1,-1)];break;default:var c=+o;if(0===c)return t;if(c>u){var f=p(c/10);return 0===f?t:f<=u?void 0===i[f-1]?o.charAt(1):i[f-1]+o.charAt(1):t}s=i[c-1]}return void 0===s?"":s}))}}))},function(e,t,n){var r=n(14),i=n(51).map,o=n(69),a=n(36),s=o("map"),l=a("map");r({target:"Array",proto:!0,forced:!s||!l},{map:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){var r=n(22),i=n(40),o=n(27),a=n(82),s=n(106),l=n(63),u=l.get,c=l.enforce,f=String(String).split("String");(e.exports=function(e,t,n,s){var l=!!s&&!!s.unsafe,u=!!s&&!!s.enumerable,d=!!s&&!!s.noTargetGet;"function"==typeof n&&("string"!=typeof t||o(n,"name")||i(n,"name",t),c(n).source=f.join("string"==typeof t?t:"")),e!==r?(l?!d&&e[t]&&(u=!0):delete e[t],u?e[t]=n:i(e,t,n)):u?e[t]=n:a(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&u(this).source||s(this)}))},function(e,t,n){var r=n(99),i=n(28),o=n(35),a=n(39),s=n(100),l=n(101);r("match",1,(function(e,t,n){return[function(t){var n=a(this),r=null==t?void 0:t[e];return void 0!==r?r.call(t,n):new RegExp(t)[e](String(n))},function(e){var r=n(t,e,this);if(r.done)return r.value;var a=i(e),u=String(this);if(!a.global)return l(a,u);var c=a.unicode;a.lastIndex=0;for(var f,d=[],p=0;null!==(f=l(a,u));){var h=String(f[0]);d[p]=h,""===h&&(a.lastIndex=s(u,o(a.lastIndex),c)),p++}return 0===p?null:d}]}))},function(e,t,n){var r=n(23),i=n(74),o=n(60),a=n(34),s=n(62),l=n(27),u=n(104),c=Object.getOwnPropertyDescriptor;t.f=r?c:function(e,t){if(e=a(e),t=s(t,!0),u)try{return c(e,t)}catch(e){}if(l(e,t))return o(!i.f.call(e,t),e[t])}},function(e,t,n){var r=n(14),i=n(61),o=n(34),a=n(52),s=[].join,l=i!=Object,u=a("join",",");r({target:"Array",proto:!0,forced:l||!u},{join:function(e){return s.call(o(this),void 0===e?",":e)}})},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(116),i=n(61),o=n(32),a=n(35),s=n(92),l=[].push,u=function(e){var t=1==e,n=2==e,u=3==e,c=4==e,f=6==e,d=5==e||f;return function(p,h,y,m){for(var v,b,g=o(p),_=i(g),w=r(h,y,3),k=a(_.length),x=0,C=m||s,E=t?C(p,k):n?C(p,0):void 0;k>x;x++)if((d||x in _)&&(b=w(v=_[x],x,g),e))if(t)E[x]=b;else if(b)switch(e){case 3:return!0;case 5:return v;case 6:return x;case 2:l.call(E,v)}else if(c)return!1;return f?-1:u||c?c:E}};e.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6)}},function(e,t,n){var r=n(17);e.exports=function(e,t){var n=[][e];return!!n&&r((function(){n.call(null,t||function(){throw 1},1)}))}},function(e,t,n){var r=n(99),i=n(98),o=n(28),a=n(39),s=n(156),l=n(100),u=n(35),c=n(101),f=n(78),d=n(17),p=[].push,h=Math.min,y=!d((function(){return!RegExp(4294967295,"y")}));r("split",2,(function(e,t,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,n){var r=String(a(this)),o=void 0===n?4294967295:n>>>0;if(0===o)return[];if(void 0===e)return[r];if(!i(e))return t.call(r,e,o);for(var s,l,u,c=[],d=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),h=0,y=new RegExp(e.source,d+"g");(s=f.call(y,r))&&!((l=y.lastIndex)>h&&(c.push(r.slice(h,s.index)),s.length>1&&s.index<r.length&&p.apply(c,s.slice(1)),u=s[0].length,h=l,c.length>=o));)y.lastIndex===s.index&&y.lastIndex++;return h===r.length?!u&&y.test("")||c.push(""):c.push(r.slice(h)),c.length>o?c.slice(0,o):c}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:t.call(this,e,n)}:t,[function(t,n){var i=a(this),o=null==t?void 0:t[e];return void 0!==o?o.call(t,i,n):r.call(String(i),t,n)},function(e,i){var a=n(r,e,this,i,r!==t);if(a.done)return a.value;var f=o(e),d=String(this),p=s(f,RegExp),m=f.unicode,v=(f.ignoreCase?"i":"")+(f.multiline?"m":"")+(f.unicode?"u":"")+(y?"y":"g"),b=new p(y?f:"^(?:"+f.source+")",v),g=void 0===i?4294967295:i>>>0;if(0===g)return[];if(0===d.length)return null===c(b,d)?[d]:[];for(var _=0,w=0,k=[];w<d.length;){b.lastIndex=y?w:0;var x,C=c(b,y?d:d.slice(w));if(null===C||(x=h(u(b.lastIndex+(y?0:w)),d.length))===_)w=l(d,w,m);else{if(k.push(d.slice(_,w)),k.length===g)return k;for(var E=1;E<=C.length-1;E++)if(k.push(C[E]),k.length===g)return k;w=_=x}}return k.push(d.slice(_)),k}]}),!y)},function(e,t,n){var r=n(110),i=n(22),o=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?o(r[e])||o(i[e]):r[e]&&r[e][t]||i[e]&&i[e][t]}},function(e,t,n){var r,i=n(28),o=n(113),a=n(87),s=n(76),l=n(140),u=n(105),c=n(75)("IE_PROTO"),f=function(){},d=function(e){return"<script>"+e+"<\/script>"},p=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;p=r?function(e){e.write(d("")),e.close();var t=e.parentWindow.Object;return e=null,t}(r):((t=u("iframe")).style.display="none",l.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(d("document.F=Object")),e.close(),e.F);for(var n=a.length;n--;)delete p.prototype[a[n]];return p()};s[c]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(f.prototype=i(e),n=new f,f.prototype=null,n[c]=e):n=p(),void 0===t?n:o(n,t)}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,n){var r=n(14),i=n(124).values;r({target:"Object",stat:!0},{values:function(e){return i(e)}})},function(e,t,n){var r=n(14),i=n(124).entries;r({target:"Object",stat:!0},{entries:function(e){return i(e)}})},function(e,t,n){var r=n(23),i=n(22),o=n(89),a=n(127),s=n(30).f,l=n(65).f,u=n(98),c=n(97),f=n(128),d=n(45),p=n(17),h=n(63).set,y=n(153),m=n(19)("match"),v=i.RegExp,b=v.prototype,g=/a/g,_=/a/g,w=new v(g)!==g,k=f.UNSUPPORTED_Y;if(r&&o("RegExp",!w||k||p((function(){return _[m]=!1,v(g)!=g||v(_)==_||"/a/i"!=v(g,"i")})))){for(var x=function(e,t){var n,r=this instanceof x,i=u(e),o=void 0===t;if(!r&&i&&e.constructor===x&&o)return e;w?i&&!o&&(e=e.source):e instanceof x&&(o&&(t=c.call(e)),e=e.source),k&&(n=!!t&&t.indexOf("y")>-1)&&(t=t.replace(/y/g,""));var s=a(w?new v(e,t):v(e,t),r?this:b,x);return k&&n&&h(s,{sticky:n}),s},C=function(e){e in x||s(x,e,{configurable:!0,get:function(){return v[e]},set:function(t){v[e]=t}})},E=l(v),O=0;E.length>O;)C(E[O++]);b.constructor=x,x.prototype=b,d(i,"RegExp",x)}y("RegExp")},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(17),i=n(49),o="".split;e.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==i(e)?o.call(e,""):Object(e)}:Object},function(e,t,n){var r=n(26);e.exports=function(e,t){if(!r(e))return e;var n,i;if(t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;if("function"==typeof(n=e.valueOf)&&!r(i=n.call(e)))return i;if(!t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r,i,o,a=n(139),s=n(22),l=n(26),u=n(40),c=n(27),f=n(75),d=n(76),p=s.WeakMap;if(a){var h=new p,y=h.get,m=h.has,v=h.set;r=function(e,t){return v.call(h,e,t),t},i=function(e){return y.call(h,e)||{}},o=function(e){return m.call(h,e)}}else{var b=f("state");d[b]=!0,r=function(e,t){return u(e,b,t),t},i=function(e){return c(e,b)?e[b]:{}},o=function(e){return c(e,b)}}e.exports={set:r,get:i,has:o,enforce:function(e){return o(e)?i(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!l(t)||(n=i(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t){e.exports=!1},function(e,t,n){var r=n(111),i=n(87).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,i)}},function(e,t,n){var r=n(49);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(111),i=n(87);e.exports=Object.keys||function(e){return r(e,i)}},function(e,t,n){var r=n(62),i=n(30),o=n(60);e.exports=function(e,t,n){var a=r(t);a in e?i.f(e,a,o(0,n)):e[a]=n}},function(e,t,n){var r=n(17),i=n(19),o=n(117),a=i("species");e.exports=function(e){return o>=51||!r((function(){var t=[];return(t.constructor={})[a]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},function(e,t){e.exports={}},function(e,t,n){var r=n(14),i=n(155);r({global:!0,forced:parseInt!=i},{parseInt:i})},function(e,t,n){var r=n(14),i=n(51).filter,o=n(69),a=n(36),s=o("filter"),l=a("filter");r({target:"Array",proto:!0,forced:!s||!l},{filter:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){var r=n(14),i=n(85).indexOf,o=n(52),a=n(36),s=[].indexOf,l=!!s&&1/[1].indexOf(1,-0)<0,u=o("indexOf"),c=a("indexOf",{ACCESSORS:!0,1:0});r({target:"Array",proto:!0,forced:l||!u||!c},{indexOf:function(e){return l?s.apply(this,arguments)||0:i(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){var r={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!r.call({1:2},1);t.f=o?function(e){var t=i(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(83),i=n(84),o=r("keys");e.exports=function(e){return o[e]||(o[e]=i(e))}},function(e,t){e.exports={}},function(e,t,n){var r=n(27),i=n(32),o=n(75),a=n(123),s=o("IE_PROTO"),l=Object.prototype;e.exports=a?Object.getPrototypeOf:function(e){return e=i(e),r(e,s)?e[s]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?l:null}},function(e,t,n){var r,i,o=n(97),a=n(128),s=RegExp.prototype.exec,l=String.prototype.replace,u=s,c=(r=/a/,i=/b*/g,s.call(r,"a"),s.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),f=a.UNSUPPORTED_Y||a.BROKEN_CARET,d=void 0!==/()??/.exec("")[1];(c||d||f)&&(u=function(e){var t,n,r,i,a=this,u=f&&a.sticky,p=o.call(a),h=a.source,y=0,m=e;return u&&(-1===(p=p.replace("y","")).indexOf("g")&&(p+="g"),m=String(e).slice(a.lastIndex),a.lastIndex>0&&(!a.multiline||a.multiline&&"\n"!==e[a.lastIndex-1])&&(h="(?: "+h+")",m=" "+m,y++),n=new RegExp("^(?:"+h+")",p)),d&&(n=new RegExp("^"+h+"$(?!\\s)",p)),c&&(t=a.lastIndex),r=s.call(u?n:a,m),u?r?(r.input=r.input.slice(y),r[0]=r[0].slice(y),r.index=a.lastIndex,a.lastIndex+=r[0].length):a.lastIndex=0:c&&r&&(a.lastIndex=a.global?r.index+r[0].length:t),d&&r&&r.length>1&&l.call(r[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)})),r}),e.exports=u},function(e,t,n){var r=n(14),i=n(51).some,o=n(52),a=n(36),s=o("some"),l=a("some");r({target:"Array",proto:!0,forced:!s||!l},{some:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){var r=n(39),i="["+n(81)+"]",o=RegExp("^"+i+i+"*"),a=RegExp(i+i+"*$"),s=function(e){return function(t){var n=String(r(t));return 1&e&&(n=n.replace(o,"")),2&e&&(n=n.replace(a,"")),n}};e.exports={start:s(1),end:s(2),trim:s(3)}},function(e,t){e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(e,t,n){var r=n(22),i=n(40);e.exports=function(e,t){try{i(r,e,t)}catch(n){r[e]=t}return t}},function(e,t,n){var r=n(64),i=n(107);(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)}},function(e,t,n){var r=n(34),i=n(35),o=n(86),a=function(e){return function(t,n,a){var s,l=r(t),u=i(l.length),c=o(a,u);if(e&&n!=n){for(;u>c;)if((s=l[c++])!=s)return!0}else for(;u>c;c++)if((e||c in l)&&l[c]===n)return e||c||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},function(e,t,n){var r=n(50),i=Math.max,o=Math.min;e.exports=function(e,t){var n=r(e);return n<0?i(n+t,0):o(n,t)}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(17),i=/#|\.prototype\./,o=function(e,t){var n=s[a(e)];return n==u||n!=l&&("function"==typeof t?r(t):!!t)},a=o.normalize=function(e){return String(e).replace(i,".").toLowerCase()},s=o.data={},l=o.NATIVE="N",u=o.POLYFILL="P";e.exports=o},function(e,t,n){var r=n(17);e.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(e,t,n){var r=n(30).f,i=n(27),o=n(19)("toStringTag");e.exports=function(e,t,n){e&&!i(e=n?e:e.prototype,o)&&r(e,o,{configurable:!0,value:t})}},function(e,t,n){var r=n(26),i=n(66),o=n(19)("species");e.exports=function(e,t){var n;return i(e)&&("function"!=typeof(n=e.constructor)||n!==Array&&!i(n.prototype)?r(n)&&null===(n=n[o])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===t?0:t)}},function(e,t,n){var r=n(14),i=n(51).find,o=n(94),a=n(36),s=!0,l=a("find");"find"in[]&&Array(1).find((function(){s=!1})),r({target:"Array",proto:!0,forced:s||!l},{find:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}}),o("find")},function(e,t,n){var r=n(19),i=n(55),o=n(30),a=r("unscopables"),s=Array.prototype;null==s[a]&&o.f(s,a,{configurable:!0,value:i(null)}),e.exports=function(e){s[a][e]=!0}},function(e,t,n){var r={};r[n(19)("toStringTag")]="z",e.exports="[object z]"===String(r)},function(e,t,n){var r=n(28),i=n(148);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),t=n instanceof Array}catch(e){}return function(n,o){return r(n),i(o),t?e.call(n,o):n.__proto__=o,n}}():void 0)},function(e,t,n){var r=n(28);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){var r=n(26),i=n(49),o=n(19)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[o])?!!t:"RegExp"==i(e))}},function(e,t,n){n(24);var r=n(45),i=n(17),o=n(19),a=n(78),s=n(40),l=o("species"),u=!i((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),c="$0"==="a".replace(/./,"$0"),f=o("replace"),d=!!/./[f]&&""===/./[f]("a","$0"),p=!i((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2!==n.length||"a"!==n[0]||"b"!==n[1]}));e.exports=function(e,t,n,f){var h=o(e),y=!i((function(){var t={};return t[h]=function(){return 7},7!=""[e](t)})),m=y&&!i((function(){var t=!1,n=/a/;return"split"===e&&((n={}).constructor={},n.constructor[l]=function(){return n},n.flags="",n[h]=/./[h]),n.exec=function(){return t=!0,null},n[h](""),!t}));if(!y||!m||"replace"===e&&(!u||!c||d)||"split"===e&&!p){var v=/./[h],b=n(h,""[e],(function(e,t,n,r,i){return t.exec===a?y&&!i?{done:!0,value:v.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}}),{REPLACE_KEEPS_$0:c,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:d}),g=b[0],_=b[1];r(String.prototype,e,g),r(RegExp.prototype,h,2==t?function(e,t){return _.call(e,this,t)}:function(e){return _.call(e,this)})}f&&s(RegExp.prototype[h],"sham",!0)}},function(e,t,n){var r=n(125).charAt;e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){var r=n(49),i=n(78);e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var o=n.call(e,t);if("object"!=typeof o)throw TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(e))throw TypeError("RegExp#exec called on incompatible receiver");return i.call(e,t)}},function(e,t,n){var r=n(14),i=n(157);r({global:!0,forced:parseFloat!=i},{parseFloat:i})},function(e,t,n){var r,i=n(14),o=n(47).f,a=n(35),s=n(129),l=n(39),u=n(130),c=n(64),f="".startsWith,d=Math.min,p=u("startsWith");i({target:"String",proto:!0,forced:!(!c&&!p&&(r=o(String.prototype,"startsWith"),r&&!r.writable)||p)},{startsWith:function(e){var t=String(l(this));s(e);var n=a(d(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return f?f.call(t,r,n):t.slice(n,n+r.length)===r}})},function(e,t,n){var r=n(23),i=n(17),o=n(105);e.exports=!r&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(22),i=n(26),o=r.document,a=i(o)&&i(o.createElement);e.exports=function(e){return a?o.createElement(e):{}}},function(e,t,n){var r=n(107),i=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(e){return i.call(e)}),e.exports=r.inspectSource},function(e,t,n){var r=n(22),i=n(82),o=r["__core-js_shared__"]||i("__core-js_shared__",{});e.exports=o},function(e,t,n){var r=n(27),i=n(109),o=n(47),a=n(30);e.exports=function(e,t){for(var n=i(t),s=a.f,l=o.f,u=0;u<n.length;u++){var c=n[u];r(e,c)||s(e,c,l(t,c))}}},function(e,t,n){var r=n(54),i=n(65),o=n(88),a=n(28);e.exports=r("Reflect","ownKeys")||function(e){var t=i.f(a(e)),n=o.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(22);e.exports=r},function(e,t,n){var r=n(27),i=n(34),o=n(85).indexOf,a=n(76);e.exports=function(e,t){var n,s=i(e),l=0,u=[];for(n in s)!r(a,n)&&r(s,n)&&u.push(n);for(;t.length>l;)r(s,n=t[l++])&&(~o(u,n)||u.push(n));return u}},function(e,t,n){var r=n(90);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,n){var r=n(23),i=n(30),o=n(28),a=n(67);e.exports=r?Object.defineProperties:function(e,t){o(e);for(var n,r=a(t),s=r.length,l=0;s>l;)i.f(e,n=r[l++],t[n]);return e}},function(e,t,n){var r=n(19);t.f=r},function(e,t,n){var r=n(110),i=n(27),o=n(114),a=n(30).f;e.exports=function(e){var t=r.Symbol||(r.Symbol={});i(t,e)||a(t,e,{value:o.f(e)})}},function(e,t,n){var r=n(56);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,i){return e.call(t,n,r,i)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r,i,o=n(22),a=n(118),s=o.process,l=s&&s.versions,u=l&&l.v8;u?i=(r=u.split("."))[0]+r[1]:a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(i=r[1]),e.exports=i&&+i},function(e,t,n){var r=n(54);e.exports=r("navigator","userAgent")||""},function(e,t,n){var r=n(51).forEach,i=n(52),o=n(36),a=i("forEach"),s=o("forEach");e.exports=a&&s?[].forEach:function(e){return r(this,e,arguments.length>1?arguments[1]:void 0)}},function(e,t,n){var r=n(95),i=n(49),o=n(19)("toStringTag"),a="Arguments"==i(function(){return arguments}());e.exports=r?i:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:a?i(t):"Object"==(r=i(t))&&"function"==typeof t.callee?"Arguments":r}},function(e,t,n){var r=n(14),i=n(147),o=n(77),a=n(96),s=n(91),l=n(40),u=n(45),c=n(19),f=n(64),d=n(70),p=n(122),h=p.IteratorPrototype,y=p.BUGGY_SAFARI_ITERATORS,m=c("iterator"),v=function(){return this};e.exports=function(e,t,n,c,p,b,g){i(n,t,c);var _,w,k,x=function(e){if(e===p&&j)return j;if(!y&&e in O)return O[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},C=t+" Iterator",E=!1,O=e.prototype,S=O[m]||O["@@iterator"]||p&&O[p],j=!y&&S||x(p),A="Array"==t&&O.entries||S;if(A&&(_=o(A.call(new e)),h!==Object.prototype&&_.next&&(f||o(_)===h||(a?a(_,h):"function"!=typeof _[m]&&l(_,m,v)),s(_,C,!0,!0),f&&(d[C]=v))),"values"==p&&S&&"values"!==S.name&&(E=!0,j=function(){return S.call(this)}),f&&!g||O[m]===j||l(O,m,j),d[t]=j,p)if(w={values:x("values"),keys:b?j:x("keys"),entries:x("entries")},g)for(k in w)(y||E||!(k in O))&&u(O,k,w[k]);else r({target:t,proto:!0,forced:y||E},w);return w}},function(e,t,n){var r,i,o,a=n(77),s=n(40),l=n(27),u=n(19),c=n(64),f=u("iterator"),d=!1;[].keys&&("next"in(o=[].keys())?(i=a(a(o)))!==Object.prototype&&(r=i):d=!0),null==r&&(r={}),c||l(r,f)||s(r,f,(function(){return this})),e.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:d}},function(e,t,n){var r=n(17);e.exports=!r((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},function(e,t,n){var r=n(23),i=n(67),o=n(34),a=n(74).f,s=function(e){return function(t){for(var n,s=o(t),l=i(s),u=l.length,c=0,f=[];u>c;)n=l[c++],r&&!a.call(s,n)||f.push(e?[n,s[n]]:s[n]);return f}};e.exports={entries:s(!0),values:s(!1)}},function(e,t,n){var r=n(50),i=n(39),o=function(e){return function(t,n){var o,a,s=String(i(t)),l=r(n),u=s.length;return l<0||l>=u?e?"":void 0:(o=s.charCodeAt(l))<55296||o>56319||l+1===u||(a=s.charCodeAt(l+1))<56320||a>57343?e?s.charAt(l):o:e?s.slice(l,l+2):a-56320+(o-55296<<10)+65536}};e.exports={codeAt:o(!1),charAt:o(!0)}},function(e,t){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,t,n){var r=n(26),i=n(96);e.exports=function(e,t,n){var o,a;return i&&"function"==typeof(o=t.constructor)&&o!==n&&r(a=o.prototype)&&a!==n.prototype&&i(e,a),e}},function(e,t,n){var r=n(17);function i(e,t){return RegExp(e,t)}t.UNSUPPORTED_Y=r((function(){var e=i("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),t.BROKEN_CARET=r((function(){var e=i("^r","gy");return e.lastIndex=2,null!=e.exec("str")}))},function(e,t,n){var r=n(98);e.exports=function(e){if(r(e))throw TypeError("The method doesn't accept regular expressions");return e}},function(e,t,n){var r=n(19)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,"/./"[e](t)}catch(e){}}return!1}},function(e,t,n){var r=n(56),i=n(26),o=[].slice,a={},s=function(e,t,n){if(!(t in a)){for(var r=[],i=0;i<t;i++)r[i]="a["+i+"]";a[t]=Function("C,a","return new C("+r.join(",")+")")}return a[t](e,n)};e.exports=Function.bind||function(e){var t=r(this),n=o.call(arguments,1),a=function(){var r=n.concat(o.call(arguments));return this instanceof a?s(t,r.length,r):t.apply(e,r)};return i(t.prototype)&&(a.prototype=t.prototype),a}},function(e,t,n){n(14)({target:"Function",proto:!0},{bind:n(131)})},function(e,t,n){var r=n(14),i=n(86),o=n(50),a=n(35),s=n(32),l=n(92),u=n(68),c=n(69),f=n(36),d=c("splice"),p=f("splice",{ACCESSORS:!0,0:0,1:2}),h=Math.max,y=Math.min;r({target:"Array",proto:!0,forced:!d||!p},{splice:function(e,t){var n,r,c,f,d,p,m=s(this),v=a(m.length),b=i(e,v),g=arguments.length;if(0===g?n=r=0:1===g?(n=0,r=v-b):(n=g-2,r=y(h(o(t),0),v-b)),v+n-r>9007199254740991)throw TypeError("Maximum allowed length exceeded");for(c=l(m,r),f=0;f<r;f++)(d=b+f)in m&&u(c,f,m[d]);if(c.length=r,n<r){for(f=b;f<v-r;f++)p=f+n,(d=f+r)in m?m[p]=m[d]:delete m[p];for(f=v;f>v-r+n;f--)delete m[f-1]}else if(n>r)for(f=v-r;f>b;f--)p=f+n-1,(d=f+r-1)in m?m[p]=m[d]:delete m[p];for(f=0;f<n;f++)m[f+b]=arguments[f+2];return m.length=v-r+n,c}})},function(e,t,n){var r=n(14),i=n(56),o=n(32),a=n(17),s=n(52),l=[],u=l.sort,c=a((function(){l.sort(void 0)})),f=a((function(){l.sort(null)})),d=s("sort");r({target:"Array",proto:!0,forced:c||!f||!d},{sort:function(e){return void 0===e?u.call(o(this)):u.call(o(this),i(e))}})},function(e,t,n){var r=n(14),i=n(50),o=n(161),a=n(162),s=n(17),l=1..toFixed,u=Math.floor,c=function(e,t,n){return 0===t?n:t%2==1?c(e,t-1,n*e):c(e*e,t/2,n)};r({target:"Number",proto:!0,forced:l&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!s((function(){l.call({})}))},{toFixed:function(e){var t,n,r,s,l=o(this),f=i(e),d=[0,0,0,0,0,0],p="",h="0",y=function(e,t){for(var n=-1,r=t;++n<6;)r+=e*d[n],d[n]=r%1e7,r=u(r/1e7)},m=function(e){for(var t=6,n=0;--t>=0;)n+=d[t],d[t]=u(n/e),n=n%e*1e7},v=function(){for(var e=6,t="";--e>=0;)if(""!==t||0===e||0!==d[e]){var n=String(d[e]);t=""===t?n:t+a.call("0",7-n.length)+n}return t};if(f<0||f>20)throw RangeError("Incorrect fraction digits");if(l!=l)return"NaN";if(l<=-1e21||l>=1e21)return String(l);if(l<0&&(p="-",l=-l),l>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(l*c(2,69,1))-69)<0?l*c(2,-t,1):l/c(2,t,1),n*=4503599627370496,(t=52-t)>0){for(y(0,n),r=f;r>=7;)y(1e7,0),r-=7;for(y(c(10,r,1),0),r=t-1;r>=23;)m(1<<23),r-=23;m(1<<r),y(1,1),m(2),h=v()}else y(0,n),y(1<<-t,0),h=v()+a.call("0",f);return f>0?p+((s=h.length)<=f?"0."+a.call("0",f-s)+h:h.slice(0,s-f)+"."+h.slice(s-f)):p+h}})},function(e,t,n){var r=n(23),i=n(22),o=n(89),a=n(45),s=n(27),l=n(49),u=n(127),c=n(62),f=n(17),d=n(55),p=n(65).f,h=n(47).f,y=n(30).f,m=n(80).trim,v=i.Number,b=v.prototype,g="Number"==l(d(b)),_=function(e){var t,n,r,i,o,a,s,l,u=c(e,!1);if("string"==typeof u&&u.length>2)if(43===(t=(u=m(u)).charCodeAt(0))||45===t){if(88===(n=u.charCodeAt(2))||120===n)return NaN}else if(48===t){switch(u.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+u}for(a=(o=u.slice(2)).length,s=0;s<a;s++)if((l=o.charCodeAt(s))<48||l>i)return NaN;return parseInt(o,r)}return+u};if(o("Number",!v(" 0o1")||!v("0b1")||v("+0x1"))){for(var w,k=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof k&&(g?f((function(){b.valueOf.call(n)})):"Number"!=l(n))?u(new v(_(t)),n,k):_(t)},x=r?p(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),C=0;x.length>C;C++)s(v,w=x[C])&&!s(k,w)&&y(k,w,h(v,w));k.prototype=b,b.constructor=k,a(i,"Number",k)}},function(e,t){},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(22),i=n(106),o=r.WeakMap;e.exports="function"==typeof o&&/native code/.test(i(o))},function(e,t,n){var r=n(54);e.exports=r("document","documentElement")},function(e,t,n){var r=n(34),i=n(65).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==o.call(e)?function(e){try{return i(e)}catch(e){return a.slice()}}(e):i(r(e))}},function(e,t,n){var r=n(116),i=n(32),o=n(143),a=n(144),s=n(35),l=n(68),u=n(145);e.exports=function(e){var t,n,c,f,d,p,h=i(e),y="function"==typeof this?this:Array,m=arguments.length,v=m>1?arguments[1]:void 0,b=void 0!==v,g=u(h),_=0;if(b&&(v=r(v,m>2?arguments[2]:void 0,2)),null==g||y==Array&&a(g))for(n=new y(t=s(h.length));t>_;_++)p=b?v(h[_],_):h[_],l(n,_,p);else for(d=(f=g.call(h)).next,n=new y;!(c=d.call(f)).done;_++)p=b?o(f,v,[c.value,_],!0):c.value,l(n,_,p);return n.length=_,n}},function(e,t,n){var r=n(28);e.exports=function(e,t,n,i){try{return i?t(r(n)[0],n[1]):t(n)}catch(t){var o=e.return;throw void 0!==o&&r(o.call(e)),t}}},function(e,t,n){var r=n(19),i=n(70),o=r("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(i.Array===e||a[o]===e)}},function(e,t,n){var r=n(120),i=n(70),o=n(19)("iterator");e.exports=function(e){if(null!=e)return e[o]||e["@@iterator"]||i[r(e)]}},function(e,t,n){var r=n(19)("iterator"),i=!1;try{var o=0,a={next:function(){return{done:!!o++}},return:function(){i=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!i)return!1;var n=!1;try{var o={};o[r]=function(){return{next:function(){return{done:n=!0}}}},e(o)}catch(e){}return n}},function(e,t,n){var r=n(122).IteratorPrototype,i=n(55),o=n(60),a=n(91),s=n(70),l=function(){return this};e.exports=function(e,t,n){var u=t+" Iterator";return e.prototype=i(r,{next:o(1,n)}),a(e,u,!1,!0),s[u]=l,e}},function(e,t,n){var r=n(26);e.exports=function(e){if(!r(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype");return e}},function(e,t,n){var r=n(56),i=n(32),o=n(61),a=n(35),s=function(e){return function(t,n,s,l){r(n);var u=i(t),c=o(u),f=a(u.length),d=e?f-1:0,p=e?-1:1;if(s<2)for(;;){if(d in c){l=c[d],d+=p;break}if(d+=p,e?d<0:f<=d)throw TypeError("Reduce of empty array with no initial value")}for(;e?d>=0:f>d;d+=p)d in c&&(l=n(l,c[d],d,u));return l}};e.exports={left:s(!1),right:s(!0)}},function(e,t,n){var r=n(14),i=n(151);r({target:"Object",stat:!0,forced:Object.assign!==i},{assign:i})},function(e,t,n){var r=n(23),i=n(17),o=n(67),a=n(88),s=n(74),l=n(32),u=n(61),c=Object.assign,f=Object.defineProperty;e.exports=!c||i((function(){if(r&&1!==c({b:1},c(f({},"a",{enumerable:!0,get:function(){f(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},n=Symbol();return e[n]=7,"abcdefghijklmnopqrst".split("").forEach((function(e){t[e]=e})),7!=c({},e)[n]||"abcdefghijklmnopqrst"!=o(c({},t)).join("")}))?function(e,t){for(var n=l(e),i=arguments.length,c=1,f=a.f,d=s.f;i>c;)for(var p,h=u(arguments[c++]),y=f?o(h).concat(f(h)):o(h),m=y.length,v=0;m>v;)p=y[v++],r&&!d.call(h,p)||(n[p]=h[p]);return n}:c},function(e,t,n){var r=n(95),i=n(120);e.exports=r?{}.toString:function(){return"[object "+i(this)+"]"}},function(e,t,n){var r=n(54),i=n(30),o=n(19),a=n(23),s=o("species");e.exports=function(e){var t=r(e),n=i.f;a&&t&&!t[s]&&n(t,s,{configurable:!0,get:function(){return this}})}},function(e,t,n){var r=n(14),i=n(51).every,o=n(52),a=n(36),s=o("every"),l=a("every");r({target:"Array",proto:!0,forced:!s||!l},{every:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){var r=n(22),i=n(80).trim,o=n(81),a=r.parseInt,s=/^[+-]?0[Xx]/,l=8!==a(o+"08")||22!==a(o+"0x16");e.exports=l?function(e,t){var n=i(String(e));return a(n,t>>>0||(s.test(n)?16:10))}:a},function(e,t,n){var r=n(28),i=n(56),o=n(19)("species");e.exports=function(e,t){var n,a=r(e).constructor;return void 0===a||null==(n=r(a)[o])?t:i(n)}},function(e,t,n){var r=n(22),i=n(80).trim,o=n(81),a=r.parseFloat,s=1/a(o+"-0")!=-1/0;e.exports=s?function(e){var t=i(String(e)),n=a(t);return 0===n&&"-"==t.charAt(0)?-0:n}:a},function(e,t,n){var r=n(14),i=n(23);r({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperties:n(113)})},function(e,t,n){var r=n(14),i=n(23),o=n(109),a=n(34),s=n(47),l=n(68);r({target:"Object",stat:!0,sham:!i},{getOwnPropertyDescriptors:function(e){for(var t,n,r=a(e),i=s.f,u=o(r),c={},f=0;u.length>f;)void 0!==(n=i(r,t=u[f++]))&&l(c,t,n);return c}})},function(e,t,n){var r=n(14),i=n(22),o=n(118),a=[].slice,s=function(e){return function(t,n){var r=arguments.length>2,i=r?a.call(arguments,2):void 0;return e(r?function(){("function"==typeof t?t:Function(t)).apply(this,i)}:t,n)}};r({global:!0,bind:!0,forced:/MSIE .\./.test(o)},{setTimeout:s(i.setTimeout),setInterval:s(i.setInterval)})},function(e,t,n){var r=n(49);e.exports=function(e){if("number"!=typeof e&&"Number"!=r(e))throw TypeError("Incorrect invocation");return+e}},function(e,t,n){var r=n(50),i=n(39);e.exports="".repeat||function(e){var t=String(i(this)),n="",o=r(e);if(o<0||o==1/0)throw RangeError("Wrong number of repetitions");for(;o>0;(o>>>=1)&&(t+=t))1&o&&(n+=t);return n}},function(e,t,n){var r=n(14),i=n(80).trim;r({target:"String",proto:!0,forced:n(164)("trim")},{trim:function(){return i(this)}})},function(e,t,n){var r=n(17),i=n(81);e.exports=function(e){return r((function(){return!!i[e]()||"​᠎"!="​᠎"[e]()||i[e].name!==e}))}},function(e,t,n){n(14)({target:"Date",stat:!0},{now:function(){return(new Date).getTime()}})},function(e,t,n){n.r(t),n.d(t,"JSONEditor",(function(){return as})),n(1),n(2),n(3),n(18),n(93),n(20),n(37),n(25),n(0),n(41),n(31),n(4),n(33),n(150),n(13),n(42),n(5),n(57),n(6),n(7),n(21),n(8),n(58),n(59),n(24),n(43),n(29);var r=["actionscript","batchfile","c","c++","cpp","coffee","csharp","css","dart","django","ejs","erlang","golang","groovy","handlebars","haskell","haxe","html","ini","jade","java","javascript","json","less","lisp","lua","makefile","matlab","mysql","objectivec","pascal","perl","pgsql","php","python","r","ruby","sass","scala","scss","smarty","sql","sqlserver","stylus","svg","twig","vbscript","xml","yaml"],i=[function(e){return"string"===e.type&&"color"===e.format&&"colorpicker"},function(e){return"string"===e.type&&["ip","ipv4","ipv6","hostname"].includes(e.format)&&"ip"},function(e){return"string"===e.type&&r.includes(e.format)&&"ace"},function(e){return"string"===e.type&&["xhtml","bbcode"].includes(e.format)&&"sceditor"},function(e){return"string"===e.type&&"markdown"===e.format&&"simplemde"},function(e){return"string"===e.type&&"jodit"===e.format&&"jodit"},function(e){return"string"===e.type&&"autocomplete"===e.format&&"autocomplete"},function(e){return"string"===e.type&&"uuid"===e.format&&"uuid"},function(e){return"info"===e.format&&"info"},function(e){return"button"===e.format&&"button"},function(e){if(("integer"===e.type||"number"===e.type)&&"stepper"===e.format)return"stepper"},function(e){if(e.links)for(var t=0;t<e.links.length;t++)if(e.links[t].rel&&"describedby"===e.links[t].rel.toLowerCase())return"describedBy"},function(e){return["string","integer"].includes(e.type)&&["starrating","rating"].includes(e.format)&&"starrating"},function(e){return["string","integer"].includes(e.type)&&["date","time","datetime-local"].includes(e.format)&&"datetime"},function(e){return(e.oneOf||e.anyOf)&&"multiple"},function(e){if("array"===e.type&&e.items&&!Array.isArray(e.items)&&["string","number","integer"].includes(e.items.type)){if("choices"===e.format)return"arrayChoices";if(e.uniqueItems){if("selectize"===e.format)return"arraySelectize";if("select2"===e.format)return"arraySelect2";if(e.items.enum)return"multiselect"}}},function(e){if(e.enum){if("array"===e.type||"object"===e.type)return"enum";if("number"===e.type||"integer"===e.type||"string"===e.type)return"radio"===e.format?"radio":"select2"===e.format?"select2":"selectize"===e.format?"selectize":"choices"===e.format?"choices":"select"}},function(e){if(e.enumSource)return"radio"===e.format?"radio":"select2"===e.format?"select2":"selectize"===e.format?"selectize":"choices"===e.format?"choices":"select"},function(e){return"array"===e.type&&"table"===e.format&&"table"},function(e){return"string"===e.type&&"url"===e.format&&window.FileReader&&e.options&&e.options.upload===Object(e.options.upload)&&"upload"},function(e){return"string"===e.type&&e.media&&"base64"===e.media.binaryEncoding&&"base64"},function(e){return"any"===e.type&&"multiple"},function(e){if("boolean"===e.type)return"checkbox"===e.format||e.options&&e.options.checkbox?"checkbox":"select2"===e.format?"select2":"selectize"===e.format?"selectize":"choices"===e.format?"choices":"select"},function(e){return"string"===e.type&&"signature"===e.format&&"signature"},function(e){return"string"==typeof e.type&&e.type},function(e){return!e.type&&e.properties&&"object"},function(e){return"string"!=typeof e.type&&"multiple"}];function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var a={};Object.entries(a).forEach((function(e){var t=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}(e,t)||function(e,t){if(e){if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(e,2),n=t[0],r=t[1];a[n].options=r.options||{}}));var s={options:{upload:function(e,t,n){console.log("Upload handler required for upload editor")},prompt_before_delete:!0,use_default_values:!0,max_depth:0},theme:"html",template:"default",themes:{},callbacks:{},templates:{},iconlibs:{},editors:a,languages:{en:{error_notset:"Property must be set",error_notempty:"Value required",error_enum:"Value must be one of the enumerated values",error_anyOf:"Value must validate against at least one of the provided schemas",error_oneOf:"Value must validate against exactly one of the provided schemas. It currently validates against {{0}} of the schemas.",error_not:"Value must not validate against the provided schema",error_type_union:"Value must be one of the provided types",error_type:"Value must be of type {{0}}",error_disallow_union:"Value must not be one of the provided disallowed types",error_disallow:"Value must not be of type {{0}}",error_multipleOf:"Value must be a multiple of {{0}}",error_maximum_excl:"Value must be less than {{0}}",error_maximum_incl:"Value must be at most {{0}}",error_minimum_excl:"Value must be greater than {{0}}",error_minimum_incl:"Value must be at least {{0}}",error_maxLength:"Value must be at most {{0}} characters long",error_minLength:"Value must be at least {{0}} characters long",error_pattern:"Value must match the pattern {{0}}",error_additionalItems:"No additional items allowed in this array",error_maxItems:"Value must have at most {{0}} items",error_minItems:"Value must have at least {{0}} items",error_uniqueItems:"Array must have unique items",error_maxProperties:"Object must have at most {{0}} properties",error_minProperties:"Object must have at least {{0}} properties",error_required:"Object is missing the required property '{{0}}'",error_additional_properties:"No additional properties allowed, but property {{0}} is set",error_property_names_exceeds_maxlength:"Property name {{0}} exceeds maxLength",error_property_names_enum_mismatch:"Property name {{0}} does not match any enum values",error_property_names_pattern_mismatch:"Property name {{0}} does not match pattern",error_property_names_false:"Property name {{0}} fails when propertyName is false",error_property_names_maxlength:"Property name {{0}} cannot match invalid maxLength",error_property_names_enum:"Property name {{0}} cannot match invalid enum",error_property_names_pattern:"Property name {{0}} cannot match invalid pattern",error_property_names_unsupported:"Unsupported propertyName {{0}}",error_dependency:"Must have property {{0}}",error_date:"Date must be in the format {{0}}",error_time:"Time must be in the format {{0}}",error_datetime_local:"Datetime must be in the format {{0}}",error_invalid_epoch:"Date must be greater than 1 January 1970",error_ipv4:"Value must be a valid IPv4 address in the form of 4 numbers between 0 and 255, separated by dots",error_ipv6:"Value must be a valid IPv6 address",error_hostname:"The hostname has the wrong format",button_save:"Save",button_copy:"Copy",button_cancel:"Cancel",button_add:"Add",button_delete_all:"All",button_delete_all_title:"Delete All",button_delete_last:"Last {{0}}",button_delete_last_title:"Delete Last {{0}}",button_add_row_title:"Add {{0}}",button_move_down_title:"Move down",button_move_up_title:"Move up",button_properties:"Properties",button_object_properties:"Object Properties",button_copy_row_title:"Copy {{0}}",button_delete_row_title:"Delete {{0}}",button_delete_row_title_short:"Delete",button_copy_row_title_short:"Copy",button_collapse:"Collapse",button_expand:"Expand",button_edit_json:"Edit JSON",button_upload:"Upload",flatpickr_toggle_button:"Toggle",flatpickr_clear_button:"Clear",choices_placeholder_text:"Start typing to add value",default_array_item_title:"item",button_delete_node_warning:"Are you sure you want to remove this node?"}},resolvers:i,custom_validators:[],default_language:"en",language:"en",translate:function(e,t){var n=s.languages[s.language];if(!n)throw new Error("Unknown language ".concat(s.language));var r=n[e]||s.languages.en[e]||e;if(t)for(var i=0;i<t.length;i++)r=r.replace(new RegExp("\\{\\{".concat(i,"}}"),"g"),t[i]);return r}};function l(e,t,n,r){try{switch(e.format){case"ipv4":!function(e){var t=e.split(".");if(4!==t.length)throw new Error("error_ipv4");t.forEach((function(e){if(isNaN(+e)||+e<0||+e>255)throw new Error("error_ipv4")}))}(t);break;case"ipv6":!function(e){if(!e.match("^(?:(?:(?:[a-fA-F0-9]{1,4}:){6}|(?=(?:[a-fA-F0-9]{0,4}:){2,6}(?:[0-9]{1,3}.){3}[0-9]{1,3}$)(([0-9a-fA-F]{1,4}:){1,5}|:)((:[0-9a-fA-F]{1,4}){1,5}:|:)|::(?:[a-fA-F0-9]{1,4}:){5})(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9]).){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])|(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}|(?=(?:[a-fA-F0-9]{0,4}:){0,7}[a-fA-F0-9]{0,4}$)(([0-9a-fA-F]{1,4}:){1,7}|:)((:[0-9a-fA-F]{1,4}){1,7}|:)|(?:[a-fA-F0-9]{1,4}:){7}:|:(:[a-fA-F0-9]{1,4}){7})$"))throw new Error("error_ipv6")}(t);break;case"hostname":!function(e){if(!e.match("(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{0,62}[a-zA-Z0-9].)+[a-zA-Z]{2,63}$)"))throw new Error("error_hostname")}(t)}return[]}catch(e){return[{path:n,property:"format",message:r(e.message)}]}}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e){return!(null===e||"object"!==u(e)||e.nodeType||e===e.window||e.constructor&&!y(e.constructor.prototype,"isPrototypeOf"))}function f(e){return c(e)?d({},e):Array.isArray(e)?e.map(f):e}function d(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return n.forEach((function(t){t&&Object.keys(t).forEach((function(n){t[n]&&c(t[n])?(y(e,n)||(e[n]={}),d(e[n],t[n])):Array.isArray(t[n])?e[n]=f(t[n]):e[n]=t[n]}))})),e}function p(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function h(e){return e&&("[object ShadowRoot]"===e.toString()?e:h(e.parentNode))}function y(e,t){return e&&Object.prototype.hasOwnProperty.call(e,t)}n(154),n(48),n(44),n(79),n(71),n(46),n(53),n(102);var m=/^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,v=/^\s*(-|\+)?(\d+)\s*$/;function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function g(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}(e,t)||w(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _(e){return function(e){if(Array.isArray(e))return k(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||w(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function w(e,t){if(e){if("string"==typeof e)return k(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?k(e,t):void 0}}function k(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function x(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var C=function(){function e(t,n,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.jsoneditor=t,this.schema=n||this.jsoneditor.schema,this.options=r||{},this.translate=this.jsoneditor.translate||i.translate,this.defaults=i,this._validateSubSchema={enum:function(e,t,n){var r=JSON.stringify(t);return e.enum.some((function(e){return r===JSON.stringify(e)}))?[]:[{path:n,property:"enum",message:this.translate("error_enum")}]},extends:function(e,t,n){var r=this;return e.extends.reduce((function(e,i){return e.push.apply(e,_(r._validateSchema(i,t,n))),e}),[])},allOf:function(e,t,n){var r=this;return e.allOf.reduce((function(e,i){return e.push.apply(e,_(r._validateSchema(i,t,n))),e}),[])},anyOf:function(e,t,n){var r=this;return e.anyOf.some((function(e){return!r._validateSchema(e,t,n).length}))?[]:[{path:n,property:"anyOf",message:this.translate("error_anyOf")}]},oneOf:function(e,t,n){var r=this,i=0,o=[];e.oneOf.forEach((function(e,a){var s=r._validateSchema(e,t,n);s.length||i++,s.forEach((function(e){e.path="".concat(n,".oneOf[").concat(a,"]").concat(e.path.substr(n.length))})),o.push.apply(o,_(s))}));var a=[];return 1!==i&&(a.push({path:n,property:"oneOf",message:this.translate("error_oneOf",[i])}),a.push.apply(a,o)),a},not:function(e,t,n){return this._validateSchema(e.not,t,n).length?[]:[{path:n,property:"not",message:this.translate("error_not")}]},type:function(e,t,n){var r=this;if(Array.isArray(e.type)){if(!e.type.some((function(e){return r._checkType(e,t)})))return[{path:n,property:"type",message:this.translate("error_type_union")}]}else if(["date","time","datetime-local"].includes(e.format)&&"integer"===e.type){if(!this._checkType("string","".concat(t)))return[{path:n,property:"type",message:this.translate("error_type",[e.format])}]}else if(!this._checkType(e.type,t))return[{path:n,property:"type",message:this.translate("error_type",[e.type])}];return[]},disallow:function(e,t,n){var r=this;if(Array.isArray(e.disallow)){if(e.disallow.some((function(e){return r._checkType(e,t)})))return[{path:n,property:"disallow",message:this.translate("error_disallow_union")}]}else if(this._checkType(e.disallow,t))return[{path:n,property:"disallow",message:this.translate("error_disallow",[e.disallow])}];return[]}},this._validateNumberSubSchema={multipleOf:function(e,t,n){return this._validateNumberSubSchemaMultipleDivisible(e,t,n)},divisibleBy:function(e,t,n){return this._validateNumberSubSchemaMultipleDivisible(e,t,n)},maximum:function(e,t,n){var r=e.exclusiveMaximum?t<e.maximum:t<=e.maximum;return window.math?r=window.math[e.exclusiveMaximum?"smaller":"smallerEq"](window.math.bignumber(t),window.math.bignumber(e.maximum)):window.Decimal&&(r=new window.Decimal(t)[e.exclusiveMaximum?"lt":"lte"](new window.Decimal(e.maximum))),r?[]:[{path:n,property:"maximum",message:this.translate(e.exclusiveMaximum?"error_maximum_excl":"error_maximum_incl",[e.maximum])}]},minimum:function(e,t,n){var r=e.exclusiveMinimum?t>e.minimum:t>=e.minimum;return window.math?r=window.math[e.exclusiveMinimum?"larger":"largerEq"](window.math.bignumber(t),window.math.bignumber(e.minimum)):window.Decimal&&(r=new window.Decimal(t)[e.exclusiveMinimum?"gt":"gte"](new window.Decimal(e.minimum))),r?[]:[{path:n,property:"minimum",message:this.translate(e.exclusiveMinimum?"error_minimum_excl":"error_minimum_incl",[e.minimum])}]}},this._validateStringSubSchema={maxLength:function(e,t,n){var r=[];return"".concat(t).length>e.maxLength&&r.push({path:n,property:"maxLength",message:this.translate("error_maxLength",[e.maxLength])}),r},minLength:function(e,t,n){return"".concat(t).length<e.minLength?[{path:n,property:"minLength",message:this.translate(1===e.minLength?"error_notempty":"error_minLength",[e.minLength])}]:[]},pattern:function(e,t,n){return new RegExp(e.pattern).test(t)?[]:[{path:n,property:"pattern",message:e.options&&e.options.patternmessage?e.options.patternmessage:this.translate("error_pattern",[e.pattern])}]}},this._validateArraySubSchema={items:function(e,t,n){var r=this,i=[];if(Array.isArray(e.items))for(var o=0;o<t.length;o++)if(e.items[o])console.log("--\x3e"),i.push.apply(i,_(this._validateSchema(e.items[o],t[o],"".concat(n,".").concat(o))));else{if(!0===e.additionalItems)break;if(!e.additionalItems){if(!1===e.additionalItems){i.push({path:n,property:"additionalItems",message:this.translate("error_additionalItems")});break}break}i.push.apply(i,_(this._validateSchema(e.additionalItems,t[o],"".concat(n,".").concat(o))))}else t.forEach((function(t,o){i.push.apply(i,_(r._validateSchema(e.items,t,"".concat(n,".").concat(o))))}));return i},maxItems:function(e,t,n){return t.length>e.maxItems?[{path:n,property:"maxItems",message:this.translate("error_maxItems",[e.maxItems])}]:[]},minItems:function(e,t,n){return t.length<e.minItems?[{path:n,property:"minItems",message:this.translate("error_minItems",[e.minItems])}]:[]},uniqueItems:function(e,t,n){for(var r={},i=0;i<t.length;i++){var o=JSON.stringify(t[i]);if(r[o])return[{path:n,property:"uniqueItems",message:this.translate("error_uniqueItems")}];r[o]=!0}return[]}},this._validateObjectSubSchema={maxProperties:function(e,t,n){return Object.keys(t).length>e.maxProperties?[{path:n,property:"maxProperties",message:this.translate("error_maxProperties",[e.maxProperties])}]:[]},minProperties:function(e,t,n){return Object.keys(t).length<e.minProperties?[{path:n,property:"minProperties",message:this.translate("error_minProperties",[e.minProperties])}]:[]},required:function(e,t,n){var r=this,i=[];return Array.isArray(e.required)&&e.required.forEach((function(e){if(void 0===t[e]){var o=r.jsoneditor.getEditor("".concat(n,".").concat(e));o&&["button","info"].includes(o.schema.format||o.schema.type)||i.push({path:n,property:"required",message:r.translate("error_required",[e])})}})),i},properties:function(e,t,n,r){var i=this,o=[];return Object.entries(e.properties).forEach((function(e){var a=g(e,2),s=a[0],l=a[1];r[s]=!0,o.push.apply(o,_(i._validateSchema(l,t[s],"".concat(n,".").concat(s))))})),o},patternProperties:function(e,t,n,r){var i=this,o=[];return Object.entries(e.patternProperties).forEach((function(e){var a=g(e,2),s=a[0],l=a[1],u=new RegExp(s);Object.entries(t).forEach((function(e){var t=g(e,2),a=t[0],s=t[1];u.test(a)&&(r[a]=!0,o.push.apply(o,_(i._validateSchema(l,s,"".concat(n,".").concat(a)))))}))})),o}},this._validateObjectSubSchema2={propertyNames:function(e,t,n,r){var i=this,o=[],a=Object.keys(t),s=null,l=function(t){var r="";return s=a[t],"boolean"==typeof e.propertyNames?(console.log(e.propertyNames?"TRUE":"FALSE"),console.log("*"+s+"*"),!0===e.propertyNames?"continue":(o.push({path:n,property:"propertyNames",message:i.translate("error_property_names_false",[s])}),"break")):Object.entries(e.propertyNames).every((function(e){var t=g(e,2),a=t[0],l=t[1],u=!1;switch(a){case"maxLength":if("number"!=typeof l){r="error_property_names_maxlength";break}if(s.length>l){r="error_property_names_exceeds_maxlength";break}return!0;case"enum":if(!Array.isArray(l)){r="error_property_names_enum";break}if(l.forEach((function(e){e===s&&(u=!0)})),!u){r="error_property_names_enum_mismatch";break}return!0;case"pattern":if("string"!=typeof l){r="error_property_names_pattern";break}if(!new RegExp(l).test(s)){r="error_property_names_pattern_mismatch";break}return!0;default:return o.push({path:n,property:"propertyNames",message:i.translate("error_property_names_unsupported",[a])}),!1}return o.push({path:n,property:"propertyNames",message:i.translate(r,[s])}),!1}))?void 0:"break"};e:for(var u=0;u<a.length;u++)switch(l(u)){case"continue":continue;case"break":break e}return o},additionalProperties:function(e,t,n,r){for(var i=[],o=Object.keys(t),a=0;a<o.length;a++){var s=o[a];if(!r[s]){if(!e.additionalProperties){i.push({path:n,property:"additionalProperties",message:this.translate("error_additional_properties",[s])});break}if(!0===e.additionalProperties)break;i.push.apply(i,_(this._validateSchema(e.additionalProperties,t[s],"".concat(n,".").concat(s))))}}return i},dependencies:function(e,t,n){var r=this,i=[];return Object.entries(e.dependencies).forEach((function(e){var o=g(e,2),a=o[0],s=o[1];void 0!==t[a]&&(Array.isArray(s)?s.forEach((function(e){void 0===t[e]&&i.push({path:n,property:"dependencies",message:r.translate("error_dependency",[e])})})):i.push.apply(i,_(r._validateSchema(s,t,n))))})),i}}}var t,n;return t=e,(n=[{key:"fitTest",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1e7,r={match:0,extra:0};if("object"===b(e)&&null!==e){var i=this._getSchema(t).properties;for(var o in i)if(y(i,o)){if("object"===b(e[o])&&"object"===b(i[o])&&"object"===b(i[o].properties)){var a=this.fitTest(e[o],i[o],n/100);r.match+=a.match,r.extra+=a.extra}void 0!==e[o]&&(r.match+=n)}else r.extra+=n}return r}},{key:"_getSchema",value:function(e){return void 0===e?d({},this.jsoneditor.expandRefs(this.schema)):e}},{key:"validate",value:function(e){return this._validateSchema(this.schema,e)}},{key:"_validateSchema",value:function(e,t,n){var r=this,i=[];return n=n||this.jsoneditor.root.formname,e=d({},this.jsoneditor.expandRefs(e)),void 0===t?this._validateV3Required(e,t,n):(Object.keys(e).forEach((function(o){r._validateSubSchema[o]&&i.push.apply(i,_(r._validateSubSchema[o].call(r,e,t,n)))})),i.push.apply(i,_(this._validateByValueType(e,t,n))),e.links&&e.links.forEach((function(o,a){o.rel&&"describedby"===o.rel.toLowerCase()&&(e=r._expandSchemaLink(e,a),i.push.apply(i,_(r._validateSchema(e,t,n,r.translate))))})),["date","time","datetime-local"].includes(e.format)&&i.push.apply(i,_(this._validateDateTimeSubSchema(e,t,n))),["uuid"].includes(e.format)&&i.push.apply(i,_(this._validateUUIDSchema(e,t,n))),i.push.apply(i,_(this._validateCustomValidator(e,t,n))),this._removeDuplicateErrors(i))}},{key:"_expandSchemaLink",value:function(e,t){var n=e.links[t].href,r=this.jsoneditor.root.getValue(),i=this.jsoneditor.compileTemplate(n,this.jsoneditor.template),o=document.location.origin+document.location.pathname+i(r);return e.links=e.links.slice(0,t).concat(e.links.slice(t+1)),d({},e,this.jsoneditor.refs[o])}},{key:"_validateV3Required",value:function(e,t,n){return void 0!==e.required&&!0===e.required||void 0===e.required&&!0===this.jsoneditor.options.required_by_default?[{path:n,property:"required",message:this.translate("error_notset")}]:[]}},{key:"_validateByValueType",value:function(e,t,n){var r=this,i=[];if(null===t)return i;if("number"==typeof t)Object.keys(e).forEach((function(o){r._validateNumberSubSchema[o]&&i.push.apply(i,_(r._validateNumberSubSchema[o].call(r,e,t,n)))}));else if("string"==typeof t)Object.keys(e).forEach((function(o){r._validateStringSubSchema[o]&&i.push.apply(i,_(r._validateStringSubSchema[o].call(r,e,t,n)))}));else if(Array.isArray(t))Object.keys(e).forEach((function(o){r._validateArraySubSchema[o]&&i.push.apply(i,_(r._validateArraySubSchema[o].call(r,e,t,n)))}));else if("object"===b(t)){var o={};Object.keys(e).forEach((function(a){r._validateObjectSubSchema[a]&&i.push.apply(i,_(r._validateObjectSubSchema[a].call(r,e,t,n,o)))})),void 0!==e.additionalProperties||!this.jsoneditor.options.no_additional_properties||e.oneOf||e.anyOf||e.allOf||(e.additionalProperties=!1),Object.keys(e).forEach((function(a){void 0!==r._validateObjectSubSchema2[a]&&i.push.apply(i,_(r._validateObjectSubSchema2[a].call(r,e,t,n,o)))}))}return i}},{key:"_validateUUIDSchema",value:function(e,t,n){return/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(t)?[]:[{path:n,property:"format",message:this.translate("error_pattern",["^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"])}]}},{key:"_validateNumberSubSchemaMultipleDivisible",value:function(e,t,n){var r=e.multipleOf||e.divisibleBy,i=t/r===Math.floor(t/r);return window.math?i=window.math.mod(window.math.bignumber(t),window.math.bignumber(r)).equals(0):window.Decimal&&(i=new window.Decimal(t).mod(new window.Decimal(r)).equals(0)),i?[]:[{path:n,property:e.multipleOf?"multipleOf":"divisibleBy",message:this.translate("error_multipleOf",[r])}]}},{key:"_validateDateTimeSubSchema",value:function(e,t,n){var r=this,i=this.jsoneditor.getEditor(n),o=i&&i.flatpickr?i.flatpickr.config.dateFormat:{date:'"YYYY-MM-DD"',time:'"HH:MM"',"datetime-local":'"YYYY-MM-DD HH:MM"'}[e.format];if("integer"===e.type)return function(e,t,n){return 1*t<1?[{path:n,property:"format",message:r.translate("error_invalid_epoch")}]:t!==Math.abs(parseInt(t))?[{path:n,property:"format",message:r.translate("error_".concat(e.format.replace(/-/g,"_")),[o])}]:[]}(e,t,n);if(i&&i.flatpickr){if(i)return function(e,t,n,i){if(""!==t){var o;if("single"!==i.flatpickr.config.mode){var a="range"===i.flatpickr.config.mode?i.flatpickr.l10n.rangeSeparator:", ";o=i.flatpickr.selectedDates.map((function(e){return i.flatpickr.formatDate(e,i.flatpickr.config.dateFormat)})).join(a)}try{if(o){if(o!==t)throw new Error("".concat(i.flatpickr.config.mode," mismatch"))}else if(i.flatpickr.formatDate(i.flatpickr.parseDate(t,i.flatpickr.config.dateFormat),i.flatpickr.config.dateFormat)!==t)throw new Error("mismatch")}catch(e){var s=void 0!==i.flatpickr.config.errorDateFormat?i.flatpickr.config.errorDateFormat:i.flatpickr.config.dateFormat;return[{path:n,property:"format",message:r.translate("error_".concat(i.format.replace(/-/g,"_")),[s])}]}}return[]}(0,t,n,i)}else if(!{date:/^(\d{4}\D\d{2}\D\d{2})?$/,time:/^(\d{2}:\d{2}(?::\d{2})?)?$/,"datetime-local":/^(\d{4}\D\d{2}\D\d{2}[ T]\d{2}:\d{2}(?::\d{2})?)?$/}[e.format].test(t))return[{path:n,property:"format",message:this.translate("error_".concat(e.format.replace(/-/g,"_")),[o])}];return[]}},{key:"_validateCustomValidator",value:function(e,t,n){var r=this,i=[];i.push.apply(i,_(l.call(this,e,t,n,this.translate)));var o=function(o){i.push.apply(i,_(o.call(r,e,t,n)))};return this.defaults.custom_validators.forEach(o),this.options.custom_validators&&this.options.custom_validators.forEach(o),i}},{key:"_removeDuplicateErrors",value:function(e){return e.reduce((function(e,t){var n=!0;return e||(e=[]),e.forEach((function(e){e.message===t.message&&e.path===t.path&&e.property===t.property&&(e.errorcount++,n=!1)})),n&&(t.errorcount=1,e.push(t)),e}),[])}},{key:"_checkType",value:function(e,t){var n={string:function(e){return"string"==typeof e},number:function(e){return"number"==typeof e},integer:function(e){return"number"==typeof e&&e===Math.floor(e)},boolean:function(e){return"boolean"==typeof e},array:function(e){return Array.isArray(e)},object:function(e){return null!==e&&!Array.isArray(e)&&"object"===b(e)},null:function(e){return null===e}};return"string"==typeof e?!n[e]||n[e](t):!this._validateSchema(e,t).length}}])&&x(t.prototype,n),e}();function E(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}(e,t)||function(e,t){if(e){if("string"==typeof e)return O(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?O(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function O(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function S(e){return(S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}n(72),n(73),n(38),n(103);var A=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options=t||{},this.refs=this.options.refs||{},this.refs_with_info={},this.refs_prefix="#/counter/",this.refs_counter=1,this._subSchema1={type:function(e){"object"===S(e.type)&&(e.type=this._expandSubSchema(e.type))},disallow:function(e){"object"===S(e.disallow)&&(e.disallow=this._expandSubSchema(e.disallow))},anyOf:function(e){var t=this;Object.entries(e.anyOf).forEach((function(n){var r=E(n,2),i=r[0],o=r[1];e.anyOf[i]=t.expandSchema(o)}))},dependencies:function(e){var t=this;Object.entries(e.dependencies).forEach((function(n){var r=E(n,2),i=r[0],o=r[1];"object"!==S(o)||Array.isArray(o)||(e.dependencies[i]=t.expandSchema(o))}))},not:function(e){e.not=this.expandSchema(e.not)}},this._subSchema2={allOf:function(e,t){var n=this,r=d({},t);return Object.entries(e.allOf).forEach((function(t){var i=E(t,2),o=i[0],a=i[1];e.allOf[o]=n.expandRefs(a,!0),r=n.extendSchemas(r,n.expandSchema(a))})),delete r.allOf,r},extends:function(e,t){var n,r=this;return delete(n=Array.isArray(e.extends)?e.extends.reduce((function(e,t,n){return r.extendSchemas(e,r.expandSchema(t))}),t):this.extendSchemas(t,this.expandSchema(e.extends))).extends,n},oneOf:function(e,t){var n=this,r=d({},t);return delete r.oneOf,e.oneOf.reduce((function(e,t,i){return e.oneOf[i]=n.extendSchemas(n.expandSchema(t),r),e}),t),t}}}var t,n;return t=e,(n=[{key:"load",value:function(e,t,n,r){var i=this;this._loadExternalRefs(e,(function(){i._getDefinitions(e,"".concat(n,"#/definitions/")),t(i.expandRefs(e))}),n,this._getFileBase(r))}},{key:"expandRefs",value:function(e,t){var n=this,r=d({},e);if(!r.$ref)return r;var i=this.refs_with_info[r.$ref];delete r.$ref;var o=i.$ref.startsWith("#")?i.fetchUrl:"",a=this._getRef(o,i);if(this.refs[a]){if(t&&y(this.refs[a],"allOf")){var s=this.refs[a].allOf;Object.keys(s).forEach((function(e){s[e]=n.expandRefs(s[e],!0)}))}}else console.warn("reference:'".concat(a,"' not found!"));return this.extendSchemas(r,this.expandSchema(this.refs[a]))}},{key:"expandSchema",value:function(e,t){var n=this;Object.entries(this._subSchema1).forEach((function(t){var r=E(t,2),i=r[0],o=r[1];e[i]&&o.call(n,e)}));var r=d({},e);return Object.entries(this._subSchema2).forEach((function(t){var i=E(t,2),o=i[0],a=i[1];e[o]&&(r=a.call(n,e,r))})),this.expandRefs(r)}},{key:"_getRef",value:function(e,t){var n=e+t;return this.refs[n]?n:e+decodeURIComponent(t.$ref)}},{key:"_expandSubSchema",value:function(e){var t=this;return Array.isArray(e)?e.map((function(e){return"object"===("undefined"==typeof value?"undefined":S(value))?t.expandSchema(e):e})):this.expandSchema(e)}},{key:"_getDefinitions",value:function(e,t){var n=this;e.definitions&&Object.keys(e.definitions).forEach((function(r){n.refs[t+r]=e.definitions[r],e.definitions[r].definitions&&n._getDefinitions(e.definitions[r],"".concat(t+r,"/definitions/"))}))}},{key:"_getExternalRefs",value:function(e,t){var n=this,r={},i=function(e){return Object.keys(e).forEach((function(e){r[e]=!0}))};if(e.$ref&&"object"!==S(e.$ref)){var o=this.refs_prefix+this.refs_counter++;"#"===e.$ref.substr(0,1)||this.refs[e.$ref]||(r[e.$ref]=!0),this.refs_with_info[o]={fetchUrl:t,$ref:e.$ref},e.$ref=o}return Object.values(e).forEach((function(e){e&&"object"===S(e)&&(Array.isArray(e)?Object.values(e).forEach((function(e){e&&"object"===S(e)&&i(n._getExternalRefs(e,t))})):i(n._getExternalRefs(e,t)))})),r}},{key:"_getFileBase",value:function(e){var t=this.options.ajaxBase;return void 0===t?this._getFileBaseFromFileLocation(e):t}},{key:"_getFileBaseFromFileLocation",value:function(e){var t=e.split("/");return t.pop(),"".concat(t.join("/"),"/")}},{key:"_isLocalUrl",value:function(e,t){return t!==e.substr(0,t.length)&&"http"!==e.substr(0,4)&&"blob:"!==e.substr(0,5)&&"data:"!==e.substr(0,5)&&"/"!==e.substr(0,1)}},{key:"_loadExternalRefs",value:function(e,t,n,r){var i=this,o=this._getExternalRefs(e,n),a=0,s=0,l=!1;Object.keys(o).forEach((function(e){if(!i.refs[e]){if(!i.options.ajax)throw new Error("Must set ajax option to true to load external ref ".concat(e));i.refs[e]="loading",s++;var n=i._isLocalUrl(e,r)?r+e:e;n.indexOf("#")>0&&(n=n.substr(0,n.indexOf("#")));var o=new XMLHttpRequest;o.overrideMimeType("application/json"),o.open("GET",n,!0),i.options.ajaxCredentials&&(o.withCredentials=i.options.ajaxCredentials),o.onreadystatechange=function(){if(4===o.readyState){if(200!==o.status)throw window.console.log(o),new Error("Failed to fetch ref via ajax- ".concat(e));var r;try{r=JSON.parse(o.responseText)}catch(e){throw window.console.log(e),new Error("Failed to parse external ref ".concat(n))}if("boolean"!=typeof r&&"object"!==S(r)||null===r||Array.isArray(r))throw new Error("External ref does not contain a valid schema - ".concat(n));i.refs[e]=r;var u=i._getFileBaseFromFileLocation(n);i._getDefinitions(r,"".concat(n,"#/definitions/")),i._loadExternalRefs(r,(function(){++a>=s&&!l&&(l=!0,t())}),n,u)}},o.send()}})),s||t()}},{key:"extendSchemas",value:function(e,t){var n=this;e=d({},e),t=d({},t);var r={},i=function(e,i){!function(e,t){return("required"===e||"defaultProperties"===e)&&"object"===S(t)&&Array.isArray(t)}(e,i)?"type"!==e||"string"!=typeof i&&!Array.isArray(i)?"object"!==S(i)||Array.isArray(i)||null===i?r[e]=i:r[e]=n.extendSchemas(i,t[e]):o(i):r[e]=i.concat(t[e]).reduce((function(e,t){return e.includes(t)||e.push(t),e}),[])},o=function(e){"string"==typeof e&&(e=[e]),"string"==typeof t.type&&(t.type=[t.type]),t.type&&t.type.length?r.type=e.filter((function(e){return t.type.includes(e)})):r.type=e,1===r.type.length&&"string"==typeof r.type[0]?r.type=r.type[0]:0===r.type.length&&delete r.type};return Object.entries(e).forEach((function(e){var n=E(e,2),o=n[0],a=n[1];void 0!==t[o]?i(o,a):r[o]=a})),Object.entries(t).forEach((function(t){var n=E(t,2),i=n[0],o=n[1];void 0===e[i]&&(r[i]=o)})),r}}])&&j(t.prototype,n),e}();function P(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function T(e){return(T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}n(9),n(15),n(10),n(11),n(12),n(16),n(132);var L=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.defaults=n,this.jsoneditor=t.jsoneditor,this.theme=this.jsoneditor.theme,this.template_engine=this.jsoneditor.template,this.iconlib=this.jsoneditor.iconlib,this.translate=this.jsoneditor.translate||this.defaults.translate,this.original_schema=t.schema,this.schema=this.jsoneditor.expandSchema(this.original_schema),this.active=!0,this.options=d({},this.options||{},this.schema.options||{},t.schema.options||{},t),this.formname=this.jsoneditor.options.form_name_root||"root",t.path||this.schema.id||(this.schema.id=this.formname),this.path=t.path||this.formname,this.formname=t.formname||this.path.replace(/\.([^.]+)/g,"[$1]"),this.parent=t.parent,this.key=void 0!==this.parent?this.path.split(".").slice(this.parent.path.split(".").length).join("."):this.path,this.link_watchers=[],this.watchLoop=!1,t.container&&this.setContainer(t.container),this.registerDependencies()}var t,n;return t=e,(n=[{key:"onChildEditorChange",value:function(e){this.onChange(!0)}},{key:"notify",value:function(){this.path&&this.jsoneditor.notifyWatchers(this.path)}},{key:"change",value:function(){this.parent?this.parent.onChildEditorChange(this):this.jsoneditor&&this.jsoneditor.onChange()}},{key:"onChange",value:function(e){this.notify(),this.watch_listener&&this.watch_listener(),e&&this.change()}},{key:"register",value:function(){this.jsoneditor.registerEditor(this),this.onChange()}},{key:"unregister",value:function(){this.jsoneditor&&this.jsoneditor.unregisterEditor(this)}},{key:"getNumColumns",value:function(){return 12}},{key:"isActive",value:function(){return this.active}},{key:"activate",value:function(){this.active=!0,this.optInCheckbox.checked=!0,this.enable(),this.change()}},{key:"deactivate",value:function(){this.isRequired()||(this.active=!1,this.optInCheckbox.checked=!1,this.disable(),this.change())}},{key:"registerDependencies",value:function(){var e=this;this.dependenciesFulfilled=!0;var t=this.options.dependencies;t&&Object.keys(t).forEach((function(t){var n=e.path.split(".");n[n.length-1]=t,n=n.join("."),e.jsoneditor.watch(n,(function(){e.evaluateDependencies()}))}))}},{key:"evaluateDependencies",value:function(){var e=this,t=this.container||this.control;if(t&&null!==this.jsoneditor){var n=this.options.dependencies;if(n){var r=this.dependenciesFulfilled;this.dependenciesFulfilled=!0,Object.keys(n).forEach((function(t){var r=e.path.split(".");r[r.length-1]=t,r=r.join(".");var i=n[t];e.checkDependency(r,i)})),this.dependenciesFulfilled!==r&&this.notify();var i=this.dependenciesFulfilled?"block":"none";"TD"===t.tagName?Object.keys(t.childNodes).forEach((function(e){return t.childNodes[e].style.display=i})):t.style.display=i}}}},{key:"checkDependency",value:function(e,t){var n=this;if(this.path!==e&&null!==this.jsoneditor){var r=this.jsoneditor.getEditor(e),i=r?r.getValue():void 0;r&&r.dependenciesFulfilled?Array.isArray(t)?t.some((function(e){if(i===e)return n.dependenciesFulfilled=!0,!0})):"object"===T(t)?"object"!==T(i)?this.dependenciesFulfilled=t===i:Object.keys(t).some((function(e){return!!y(t,e)&&(y(i,e)&&t[e]===i[e]?void 0:(n.dependenciesFulfilled=!1,!0))})):"string"==typeof t||"number"==typeof t?this.dependenciesFulfilled=this.dependenciesFulfilled&&i===t:"boolean"==typeof t&&(this.dependenciesFulfilled=t?this.dependenciesFulfilled&&(i||i.length>0):this.dependenciesFulfilled&&(!i||0===i.length)):this.dependenciesFulfilled=!1}}},{key:"setContainer",value:function(e){this.container=e,this.schema.id&&this.container.setAttribute("data-schemaid",this.schema.id),this.schema.type&&"string"==typeof this.schema.type&&this.container.setAttribute("data-schematype",this.schema.type),this.container.setAttribute("data-schemapath",this.path)}},{key:"setOptInCheckbox",value:function(e){var t=this;this.optInCheckbox=document.createElement("input"),this.optInCheckbox.setAttribute("type","checkbox"),this.optInCheckbox.setAttribute("style","margin: 0 10px 0 0;"),this.optInCheckbox.classList.add("json-editor-opt-in"),this.optInCheckbox.addEventListener("click",(function(){t.isActive()?t.deactivate():t.activate()})),(this.jsoneditor.options.show_opt_in||this.options.show_opt_in)&&this.parent&&"object"===this.parent.schema.type&&!this.isRequired()&&this.header&&(this.header.appendChild(this.optInCheckbox),this.header.insertBefore(this.optInCheckbox,this.header.firstChild))}},{key:"preBuild",value:function(){}},{key:"build",value:function(){}},{key:"postBuild",value:function(){this.setupWatchListeners(),this.addLinks(),this.setValue(this.getDefault(),!0),this.updateHeaderText(),this.register(),this.onWatchedFieldChange()}},{key:"setupWatchListeners",value:function(){var e=this;if(this.watched={},this.schema.vars&&(this.schema.watch=this.schema.vars),this.watched_values={},this.watch_listener=function(){e.refreshWatchedFieldValues()&&e.onWatchedFieldChange()},y(this.schema,"watch")){var t,n,r,i,o,a=this.container.getAttribute("data-schemapath");Object.keys(this.schema.watch).forEach((function(s){if(t=e.schema.watch[s],Array.isArray(t)){if(t.length<2)return;n=[t[0]].concat(t[1].split("."))}else n=t.split("."),e.theme.closest(e.container,'[data-schemaid="'.concat(n[0],'"]'))||n.unshift("#");if("#"===(r=n.shift())&&(r=e.jsoneditor.schema.id||e.jsoneditor.root.formname),!(i=e.theme.closest(e.container,'[data-schemaid="'.concat(r,'"]'))))throw new Error("Could not find ancestor node with id ".concat(r));o="".concat(i.getAttribute("data-schemapath"),".").concat(n.join(".")),a.startsWith(o)&&(e.watchLoop=!0),e.jsoneditor.watch(o,e.watch_listener),e.watched[s]=o}))}this.schema.headerTemplate&&(this.header_template=this.jsoneditor.compileTemplate(this.schema.headerTemplate,this.template_engine))}},{key:"addLinks",value:function(){if(!this.no_link_holder&&(this.link_holder=this.theme.getLinksHolder(),void 0!==this.description?this.description.parentNode.insertBefore(this.link_holder,this.description):this.container.appendChild(this.link_holder),this.schema.links))for(var e=0;e<this.schema.links.length;e++)this.addLink(this.getLink(this.schema.links[e]))}},{key:"onMove",value:function(){}},{key:"getButton",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],i="json-editor-btn-".concat(t);t=this.iconlib?this.iconlib.getIcon(t):null,e=this.translate(e,r),n=this.translate(n,r),!t&&n&&(e=n,n=null);var o=this.theme.getButton(e,t,n);return o.classList.add(i),o}},{key:"setButtonText",value:function(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[];return n=this.iconlib?this.iconlib.getIcon(n):null,t=this.translate(t,i),r=this.translate(r,i),!n&&r&&(t=r,r=null),this.theme.setButtonText(e,t,n,r)}},{key:"addLink",value:function(e){this.link_holder&&this.link_holder.appendChild(e)}},{key:"getLink",value:function(e){var t,n,r=(e.mediaType||"application/javascript").split("/")[0],i=this.jsoneditor.compileTemplate(e.href,this.template_engine),o=this.jsoneditor.compileTemplate(e.rel?e.rel:e.href,this.template_engine),a=null;if(e.download&&(a=e.download),a&&!0!==a&&(a=this.jsoneditor.compileTemplate(a,this.template_engine)),"image"===r){t=this.theme.getBlockLinkHolder(),(n=document.createElement("a")).setAttribute("target","_blank");var s=document.createElement("img");this.theme.createImageLink(t,n,s),this.link_watchers.push((function(e){var t=i(e),r=o(e);n.setAttribute("href",t),n.setAttribute("title",r||t),s.setAttribute("src",t)}))}else if(["audio","video"].includes(r)){t=this.theme.getBlockLinkHolder(),(n=this.theme.getBlockLink()).setAttribute("target","_blank");var l=document.createElement(r);l.setAttribute("controls","controls"),this.theme.createMediaLink(t,n,l),this.link_watchers.push((function(e){var t=i(e),r=o(e);n.setAttribute("href",t),n.textContent=r||t,l.setAttribute("src",t)}))}else n=t=this.theme.getBlockLink(),t.setAttribute("target","_blank"),t.textContent=e.rel,t.style.display="none",this.link_watchers.push((function(e){var n=i(e),r=o(e);n&&(t.style.display=""),t.setAttribute("href",n),t.textContent=r||n}));return a&&n&&(!0===a?n.setAttribute("download",""):this.link_watchers.push((function(e){n.setAttribute("download",a(e))}))),e.class&&n.classList.add(e.class),t}},{key:"refreshWatchedFieldValues",value:function(){var e=this;if(this.watched_values){var t={},n=!1;return this.watched&&Object.keys(this.watched).forEach((function(r){var i=e.jsoneditor.getEditor(e.watched[r]),o=i?i.getValue():null;e.watched_values[r]!==o&&(n=!0),t[r]=o})),t.self=this.getValue(),this.watched_values.self!==t.self&&(n=!0),this.watched_values=t,n}}},{key:"getWatchedFieldValues",value:function(){return this.watched_values}},{key:"updateHeaderText",value:function(){if(this.header){var e=this.getHeaderText();if(this.header.children.length){for(var t=0;t<this.header.childNodes.length;t++)if(3===this.header.childNodes[t].nodeType){this.header.childNodes[t].nodeValue=this.cleanText(e);break}}else window.DOMPurify?this.header.innerHTML=window.DOMPurify.sanitize(e):this.header.textContent=this.cleanText(e)}}},{key:"getHeaderText",value:function(e){return this.header_text?this.header_text:e?this.schema.title:this.getTitle()}},{key:"cleanText",value:function(e){var t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText}},{key:"onWatchedFieldChange",value:function(){var e;if(this.header_template){e=d(this.getWatchedFieldValues(),{key:this.key,i:this.key,i0:1*this.key,i1:1*this.key+1,title:this.getTitle()});var t=this.header_template(e);t!==this.header_text&&(this.header_text=t,this.updateHeaderText(),this.notify())}if(this.link_watchers.length){e=this.getWatchedFieldValues();for(var n=0;n<this.link_watchers.length;n++)this.link_watchers[n](e)}}},{key:"setValue",value:function(e){this.value=e}},{key:"getValue",value:function(){if(this.dependenciesFulfilled)return this.value}},{key:"refreshValue",value:function(){}},{key:"getChildEditors",value:function(){return!1}},{key:"destroy",value:function(){var e=this;this.unregister(this),this.watched&&Object.values(this.watched).forEach((function(t){return e.jsoneditor.unwatch(t,e.watch_listener)})),this.watched=null,this.watched_values=null,this.watch_listener=null,this.header_text=null,this.header_template=null,this.value=null,this.container&&this.container.parentNode&&this.container.parentNode.removeChild(this.container),this.container=null,this.jsoneditor=null,this.schema=null,this.path=null,this.key=null,this.parent=null}},{key:"isDefaultRequired",value:function(){return this.isRequired()||!!this.jsoneditor.options.use_default_values}},{key:"getDefault",value:function(){if(void 0!==this.schema.default)return this.schema.default;if(void 0!==this.schema.enum)return this.schema.enum[0];var e=this.schema.type||this.schema.oneOf;if(e&&Array.isArray(e)&&(e=e[0]),e&&"object"===T(e)&&(e=e.type),e&&Array.isArray(e)&&(e=e[0]),"string"==typeof e){if("number"===e)return this.isDefaultRequired()?0:void 0;if("boolean"===e)return!this.isDefaultRequired()&&void 0;if("integer"===e)return this.isDefaultRequired()?0:void 0;if("string"===e)return"";if("object"===e)return{};if("array"===e)return[]}return null}},{key:"getTitle",value:function(){return this.schema.title||this.key}},{key:"enable",value:function(){this.disabled=!1}},{key:"disable",value:function(){this.disabled=!0}},{key:"isEnabled",value:function(){return!this.disabled}},{key:"isRequired",value:function(){return"boolean"==typeof this.schema.required?this.schema.required:this.parent&&this.parent.schema&&Array.isArray(this.parent.schema.required)?this.parent.schema.required.includes(this.key):!!this.jsoneditor.options.required_by_default}},{key:"getDisplayText",value:function(e){var t=[],n={};e.forEach((function(e){e.title&&(n[e.title]=n[e.title]||0,n[e.title]++),e.description&&(n[e.description]=n[e.description]||0,n[e.description]++),e.format&&(n[e.format]=n[e.format]||0,n[e.format]++),e.type&&(n[e.type]=n[e.type]||0,n[e.type]++)})),e.forEach((function(e){var r;r="string"==typeof e?e:e.title&&n[e.title]<=1?e.title:e.format&&n[e.format]<=1?e.format:e.type&&n[e.type]<=1?e.type:e.description&&n[e.description]<=1?e.descripton:e.title?e.title:e.format?e.format:e.type?e.type:e.description?e.description:JSON.stringify(e).length<500?JSON.stringify(e):"type",t.push(r)}));var r={};return t.forEach((function(e,i){r[e]=r[e]||0,r[e]++,n[e]>1&&(t[i]="".concat(e," ").concat(r[e]))})),t}},{key:"getValidId",value:function(e){return(e=void 0===e?"":e.toString()).replace(/\s+/g,"-")}},{key:"setInputAttributes",value:function(e){var t=this;if(this.schema.options&&this.schema.options.inputAttributes){var n=this.schema.options.inputAttributes,r=["name","type"].concat(e);Object.keys(n).forEach((function(e){r.includes(e.toLowerCase())||t.input.setAttribute(e,n[e])}))}}},{key:"expandCallbacks",value:function(e,t){var n=this,r=this.defaults.callbacks[e];return Object.entries(t).forEach((function(i){var o=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}(e,t)||function(e,t){if(e){if("string"==typeof e)return P(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?P(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(i,2),a=o[0],s=o[1];s===Object(s)?t[a]=n.expandCallbacks(e,s):"string"==typeof s&&"object"===T(r)&&"function"==typeof r[s]&&(t[a]=r[s].bind(null,n))})),t}},{key:"showValidationErrors",value:function(e){}}])&&R(t.prototype,n),e}();function I(e){return(I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function N(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function B(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function D(e,t,n){return(D="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=z(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function M(e,t){return(M=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function F(e,t){return!t||"object"!==I(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function z(e){return(z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var V=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&M(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=z(e);if(t){var i=z(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return F(this,n)}}(i);function i(){return N(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"register",value:function(){D(z(i.prototype),"register",this).call(this),this.input&&this.input.setAttribute("name",this.formname)}},{key:"unregister",value:function(){D(z(i.prototype),"unregister",this).call(this),this.input&&this.input.removeAttribute("name")}},{key:"setValue",value:function(e,t,n){if((!this.template||n)&&(this.shouldBeUnset()||null!=e?"object"===I(e)?e=JSON.stringify(e):this.shouldBeUnset()||"string"==typeof e||(e="".concat(e)):e="",e!==this.serialized)){var r=this.sanitize(e);if(this.input.value!==r){if(this.setValueToInputField(r),"range"===this.format){var i=this.control.querySelector("output");i&&(i.value=r)}var o=n||this.getValue()!==e;return this.refreshValue(),t?this.is_dirty=!1:"change"===this.jsoneditor.options.show_errors&&(this.is_dirty=!0),this.adjust_height&&this.adjust_height(this.input),this.onChange(o),{changed:o,value:r}}}}},{key:"setValueToInputField",value:function(e){this.input.value=void 0===e?"":e}},{key:"getNumColumns",value:function(){var e,t=Math.ceil(Math.max(this.getTitle().length,this.schema.maxLength||0,this.schema.minLength||0)/5);return e="textarea"===this.input_type?6:["text","email"].includes(this.input_type)?4:2,Math.min(12,Math.max(t,e))}},{key:"build",value:function(){var e=this;if(this.options.compact||(this.header=this.label=this.theme.getFormInputLabel(this.getTitle(),this.isRequired())),this.schema.description&&(this.description=this.theme.getFormInputDescription(this.schema.description)),this.options.infoText&&(this.infoButton=this.theme.getInfoButton(this.options.infoText)),this.format=this.schema.format,!this.format&&this.schema.media&&this.schema.media.type&&(this.format=this.schema.media.type.replace(/(^(application|text)\/(x-)?(script\.)?)|(-source$)/g,"")),!this.format&&this.options.default_format&&(this.format=this.options.default_format),this.options.format&&(this.format=this.options.format),this.format)if("textarea"===this.format)this.input_type="textarea",this.input=this.theme.getTextareaInput();else if("range"===this.format){this.input_type="range";var t=this.schema.minimum||0,n=this.schema.maximum||Math.max(100,t+1),r=1;this.schema.multipleOf&&(t%this.schema.multipleOf&&(t=Math.ceil(t/this.schema.multipleOf)*this.schema.multipleOf),n%this.schema.multipleOf&&(n=Math.floor(n/this.schema.multipleOf)*this.schema.multipleOf),r=this.schema.multipleOf),this.input=this.theme.getRangeInput(t,n,r)}else this.input_type="text",["button","checkbox","color","date","datetime-local","email","file","hidden","image","month","number","password","radio","reset","search","submit","tel","text","time","url","week"].includes(this.format)&&(this.input_type=this.format),this.input=this.theme.getFormInputField(this.input_type);else this.input_type="text",this.input=this.theme.getFormInputField(this.input_type);void 0!==this.schema.maxLength&&this.input.setAttribute("maxlength",this.schema.maxLength),void 0!==this.schema.pattern?this.input.setAttribute("pattern",this.schema.pattern):void 0!==this.schema.minLength&&this.input.setAttribute("pattern",".{".concat(this.schema.minLength,",}")),this.options.compact?this.container.classList.add("compact"):this.options.input_width&&(this.input.style.width=this.options.input_width),(this.schema.readOnly||this.schema.readonly||this.schema.template)&&this.disable(!0),this.setInputAttributes(["maxlength","pattern","readonly","min","max","step"]),this.input.addEventListener("change",(function(t){if(t.preventDefault(),t.stopPropagation(),e.schema.template)t.currentTarget.value=e.value;else{var n=t.currentTarget.value,r=e.sanitize(n);n!==r&&(t.currentTarget.value=r),e.is_dirty=!0,e.refreshValue(),e.onChange(!0)}})),this.options.input_height&&(this.input.style.height=this.options.input_height),this.options.expand_height&&(this.adjust_height=function(e){if(e){var t,n=e.offsetHeight;if(e.offsetHeight<e.scrollHeight)for(t=0;e.offsetHeight<e.scrollHeight+3&&!(t>100);)t++,n++,e.style.height="".concat(n,"px");else{for(t=0;e.offsetHeight>=e.scrollHeight+3&&!(t>100);)t++,n--,e.style.height="".concat(n,"px");e.style.height="".concat(n+1,"px")}}},this.input.addEventListener("keyup",(function(t){e.adjust_height(t.currentTarget)})),this.input.addEventListener("change",(function(t){e.adjust_height(t.currentTarget)})),this.adjust_height()),this.format&&this.input.setAttribute("data-schemaformat",this.format);var i=this.input;if("range"===this.format&&(i=this.theme.getRangeControl(this.input,this.theme.getRangeOutput(this.input,this.schema.default||Math.max(this.schema.minimum||0,0)))),this.control=this.theme.getFormControl(this.label,i,this.description,this.infoButton),this.container.appendChild(this.control),window.requestAnimationFrame((function(){e.input.parentNode&&e.afterInputReady(),e.adjust_height&&e.adjust_height(e.input)})),this.schema.template){var o=this.expandCallbacks("template",{template:this.schema.template});"function"==typeof o.template?this.template=o.template:this.template=this.jsoneditor.compileTemplate(this.schema.template,this.template_engine),this.refreshValue()}else this.refreshValue()}},{key:"setupCleave",value:function(e){var t=this.expandCallbacks("cleave",d({},this.defaults.options.cleave||{},this.options.cleave||{}));"object"===I(t)&&Object.keys(t).length>0&&(this.cleave_instance=new window.Cleave(e,t))}},{key:"setupImask",value:function(e){var t=this.expandCallbacks("imask",d({},this.defaults.options.imask||{},this.options.imask||{}));"object"===I(t)&&Object.keys(t).length>0&&(this.imask_instance=window.IMask(e,this.ajustIMaskOptions(t)))}},{key:"ajustIMaskOptions",value:function(e){var t=this;return Object.keys(e).forEach((function(n){if(e[n]===Object(e[n]))e[n]=t.ajustIMaskOptions(e[n]);else if("mask"===n)if("regex:"===e[n].substr(0,6)){var r=e[n].match(/^regex:\/(.*)\/([gimsuy]*)$/);if(null!==r)try{e[n]=new RegExp(r[1],r[2])}catch(e){}}else e[n]=t.getGlobalPropertyFromString(e[n])})),e}},{key:"getGlobalPropertyFromString",value:function(e){if(e.includes(".")){var t=e.split("."),n=t[0],r=t[1];if(void 0!==window[n]&&void 0!==window[n][r])return window[n][r]}else if(void 0!==window[e])return window[e];return e}},{key:"shouldBeUnset",value:function(){return!this.jsoneditor.options.use_default_values&&!this.is_dirty}},{key:"getValue",value:function(){var e=!(!this.input||!this.input.value);if(!this.shouldBeUnset()||e)return this.imask_instance&&this.dependenciesFulfilled&&this.options.imask.returnUnmasked?this.imask_instance.unmaskedValue:D(z(i.prototype),"getValue",this).call(this)}},{key:"enable",value:function(){this.always_disabled||(this.input.disabled=!1,D(z(i.prototype),"enable",this).call(this))}},{key:"disable",value:function(e){e&&(this.always_disabled=!0),this.input.disabled=!0,this.input.setAttribute("readonly","true"),D(z(i.prototype),"disable",this).call(this)}},{key:"afterInputReady",value:function(){this.theme.afterInputReady(this.input),window.Cleave&&!this.cleave_instance?this.setupCleave(this.input):window.IMask&&!this.imask_instance&&this.setupImask(this.input)}},{key:"refreshValue",value:function(){this.value=this.input.value,"string"==typeof this.value||this.shouldBeUnset()||(this.value=""),this.serialized=this.value}},{key:"destroy",value:function(){this.cleave_instance&&this.cleave_instance.destroy(),this.imask_instance&&this.imask_instance.destroy(),this.template=null,this.input&&this.input.parentNode&&this.input.parentNode.removeChild(this.input),this.label&&this.label.parentNode&&this.label.parentNode.removeChild(this.label),this.description&&this.description.parentNode&&this.description.parentNode.removeChild(this.description),D(z(i.prototype),"destroy",this).call(this)}},{key:"sanitize",value:function(e){return e}},{key:"onWatchedFieldChange",value:function(){var e;this.template&&(e=this.getWatchedFieldValues(),this.setValue(this.template(e),!1,!0)),D(z(i.prototype),"onWatchedFieldChange",this).call(this)}},{key:"showValidationErrors",value:function(e){var t=this;if("always"===this.jsoneditor.options.show_errors);else if(!this.is_dirty&&this.previous_error_setting===this.jsoneditor.options.show_errors)return;this.previous_error_setting=this.jsoneditor.options.show_errors;var n=e.reduce((function(e,n){return n.path===t.path&&e.push(n.message),e}),[]);n.length?this.theme.addInputError(this.input,"".concat(n.join(". "),".")):this.theme.removeInputError(this.input)}}])&&B(t.prototype,n),i}(L);function H(e){return(H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function U(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function W(e,t,n){return(W="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=K(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function $(e,t){return($=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function G(e,t){return!t||"object"!==H(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function K(e){return(K=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Q=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&$(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=K(e);if(t){var i=K(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return G(this,n)}}(i);function i(){return U(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"setValue",value:function(e,t,n){var r=W(K(i.prototype),"setValue",this).call(this,e,t,n);void 0!==r&&r.changed&&this.ace_editor_instance&&(this.ace_editor_instance.setValue(r.value),this.ace_editor_instance.session.getSelection().clearSelection(),this.ace_editor_instance.resize())}},{key:"build",value:function(){this.options.format="textarea",W(K(i.prototype),"build",this).call(this),this.input_type=this.schema.format,this.input.setAttribute("data-schemaformat",this.input_type)}},{key:"afterInputReady",value:function(){var e,t=this;if(window.ace){var n=this.input_type;"cpp"!==n&&"c++"!==n&&"c"!==n||(n="c_cpp"),e=this.expandCallbacks("ace",d({},{selectionStyle:"text",minLines:30,maxLines:30},this.defaults.options.ace||{},this.options.ace||{},{mode:"ace/mode/".concat(n)})),this.ace_container=document.createElement("div"),this.ace_container.style.width="100%",this.ace_container.style.position="relative",this.input.parentNode.insertBefore(this.ace_container,this.input),this.input.style.display="none",this.ace_editor_instance=window.ace.edit(this.ace_container,e),this.ace_editor_instance.setValue(this.getValue()),this.ace_editor_instance.session.getSelection().clearSelection(),this.ace_editor_instance.resize(),(this.schema.readOnly||this.schema.readonly||this.schema.template)&&this.ace_editor_instance.setReadOnly(!0),this.ace_editor_instance.on("change",(function(){t.input.value=t.ace_editor_instance.getValue(),t.refreshValue(),t.is_dirty=!0,t.onChange(!0)})),this.theme.afterInputReady(this.input)}else W(K(i.prototype),"afterInputReady",this).call(this)}},{key:"getNumColumns",value:function(){return 6}},{key:"enable",value:function(){!this.always_disabled&&this.ace_editor_instance&&this.ace_editor_instance.setReadOnly(!1),W(K(i.prototype),"enable",this).call(this)}},{key:"disable",value:function(e){this.ace_editor_instance&&this.ace_editor_instance.setReadOnly(!0),W(K(i.prototype),"disable",this).call(this,e)}},{key:"destroy",value:function(){this.ace_editor_instance&&(this.ace_editor_instance.destroy(),this.ace_editor_instance=null),W(K(i.prototype),"destroy",this).call(this)}}])&&q(t.prototype,n),i}(V);function J(e){return(J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Z(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function X(e,t,n){return(X="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=ne(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function ee(e,t){return(ee=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function te(e,t){return!t||"object"!==J(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ne(e){return(ne=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var re=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ee(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ne(e);if(t){var i=ne(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return te(this,n)}}(i);function i(){return Y(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"askConfirmation",value:function(){return!0!==this.jsoneditor.options.prompt_before_delete||!1!==window.confirm(this.translate("button_delete_node_warning"))}},{key:"getDefault",value:function(){return this.schema.default||[]}},{key:"register",value:function(){X(ne(i.prototype),"register",this).call(this),this.rows&&this.rows.forEach((function(e){return e.register()}))}},{key:"unregister",value:function(){X(ne(i.prototype),"unregister",this).call(this),this.rows&&this.rows.forEach((function(e){return e.unregister()}))}},{key:"getNumColumns",value:function(){var e=this.getItemInfo(0);return this.tabs_holder&&"tabs-top"!==this.schema.format?Math.max(Math.min(12,e.width+2),4):e.width}},{key:"enable",value:function(){var e=this;this.always_disabled||(this.setAvailability(this,!1),this.rows&&this.rows.forEach((function(t){t.enable(),e.setAvailability(t,!1)})),X(ne(i.prototype),"enable",this).call(this))}},{key:"disable",value:function(e){var t=this;e&&(this.always_disabled=!0),this.setAvailability(this,!0),this.rows&&this.rows.forEach((function(n){n.disable(e),t.setAvailability(n,!0)})),X(ne(i.prototype),"disable",this).call(this)}},{key:"setAvailability",value:function(e,t){e.add_row_button&&(e.add_row_button.disabled=t),e.remove_all_rows_button&&(e.remove_all_rows_button.disabled=t),e.delete_last_row_button&&(e.delete_last_row_button.disabled=t),e.copy_button&&(e.copy_button.disabled=t),e.delete_button&&(e.delete_button.disabled=t),e.moveup_button&&(e.moveup_button.disabled=t),e.movedown_button&&(e.movedown_button.disabled=t)}},{key:"preBuild",value:function(){X(ne(i.prototype),"preBuild",this).call(this),this.rows=[],this.row_cache=[],this.hide_delete_buttons=this.options.disable_array_delete||this.jsoneditor.options.disable_array_delete,this.hide_delete_all_rows_buttons=this.hide_delete_buttons||this.options.disable_array_delete_all_rows||this.jsoneditor.options.disable_array_delete_all_rows,this.hide_delete_last_row_buttons=this.hide_delete_buttons||this.options.disable_array_delete_last_row||this.jsoneditor.options.disable_array_delete_last_row,this.hide_move_buttons=this.options.disable_array_reorder||this.jsoneditor.options.disable_array_reorder,this.hide_add_button=this.options.disable_array_add||this.jsoneditor.options.disable_array_add,this.show_copy_button=this.options.enable_array_copy||this.jsoneditor.options.enable_array_copy,this.array_controls_top=this.options.array_controls_top||this.jsoneditor.options.array_controls_top}},{key:"build",value:function(){this.options.compact?(this.title=this.theme.getHeader(""),this.container.appendChild(this.title),this.panel=this.theme.getIndentedPanel(),this.container.appendChild(this.panel),this.title_controls=this.theme.getHeaderButtonHolder(),this.title.appendChild(this.title_controls),this.controls=this.theme.getHeaderButtonHolder(),this.title.appendChild(this.controls),this.row_holder=document.createElement("div"),this.panel.appendChild(this.row_holder)):(this.header=document.createElement("label"),this.header.textContent=this.getTitle(),this.title=this.theme.getHeader(this.header),this.container.appendChild(this.title),this.title_controls=this.theme.getHeaderButtonHolder(),this.title.appendChild(this.title_controls),this.schema.description&&(this.description=this.theme.getDescription(this.schema.description),this.container.appendChild(this.description)),this.error_holder=document.createElement("div"),this.container.appendChild(this.error_holder),"tabs-top"===this.schema.format?(this.controls=this.theme.getHeaderButtonHolder(),this.title.appendChild(this.controls),this.tabs_holder=this.theme.getTopTabHolder(this.getValidId(this.getItemTitle())),this.container.appendChild(this.tabs_holder),this.row_holder=this.theme.getTopTabContentHolder(this.tabs_holder),this.active_tab=null):"tabs"===this.schema.format?(this.controls=this.theme.getHeaderButtonHolder(),this.title.appendChild(this.controls),this.tabs_holder=this.theme.getTabHolder(this.getValidId(this.getItemTitle())),this.container.appendChild(this.tabs_holder),this.row_holder=this.theme.getTabContentHolder(this.tabs_holder),this.active_tab=null):(this.panel=this.theme.getIndentedPanel(),this.container.appendChild(this.panel),this.row_holder=document.createElement("div"),this.panel.appendChild(this.row_holder),this.controls=this.theme.getButtonHolder(),this.array_controls_top?this.title.appendChild(this.controls):this.panel.appendChild(this.controls))),this.addControls()}},{key:"onChildEditorChange",value:function(e){this.refreshValue(),this.refreshTabs(!0),X(ne(i.prototype),"onChildEditorChange",this).call(this,e)}},{key:"getItemTitle",value:function(){if(!this.item_title)if(this.schema.items&&!Array.isArray(this.schema.items)){var e=this.jsoneditor.expandRefs(this.schema.items);this.item_title=e.title||this.translate("default_array_item_title")}else this.item_title=this.translate("default_array_item_title");return this.cleanText(this.item_title)}},{key:"getItemSchema",value:function(e){return Array.isArray(this.schema.items)?e>=this.schema.items.length?!0===this.schema.additionalItems?{}:this.schema.additionalItems?d({},this.schema.additionalItems):void 0:d({},this.schema.items[e]):this.schema.items?d({},this.schema.items):{}}},{key:"getItemInfo",value:function(e){var t=this.getItemSchema(e);this.item_info=this.item_info||{};var n=JSON.stringify(t);return void 0!==this.item_info[n]||(t=this.jsoneditor.expandRefs(t),this.item_info[n]={title:t.title||this.translate("default_array_item_title"),default:t.default,width:12,child_editors:t.properties||t.items}),this.item_info[n]}},{key:"getElementEditor",value:function(e){var t=this.getItemInfo(e),n=this.getItemSchema(e);(n=this.jsoneditor.expandRefs(n)).title="".concat(t.title," ").concat(e+1);var r,i=this.jsoneditor.getEditorClass(n);this.tabs_holder?(r="tabs-top"===this.schema.format?this.theme.getTopTabContent():this.theme.getTabContent()).id="".concat(this.path,".").concat(e):r=t.child_editors?this.theme.getChildEditorHolder():this.theme.getIndentedPanel(),this.row_holder.appendChild(r);var o=this.jsoneditor.createEditor(i,{jsoneditor:this.jsoneditor,schema:n,container:r,path:"".concat(this.path,".").concat(e),parent:this,required:!0});return o.preBuild(),o.build(),o.postBuild(),o.title_controls||(o.array_controls=this.theme.getButtonHolder(),r.appendChild(o.array_controls)),o}},{key:"checkParent",value:function(e){return e&&e.parentNode}},{key:"destroy",value:function(){this.empty(!0),this.checkParent(this.title)&&this.title.parentNode.removeChild(this.title),this.checkParent(this.description)&&this.description.parentNode.removeChild(this.description),this.checkParent(this.row_holder)&&this.row_holder.parentNode.removeChild(this.row_holder),this.checkParent(this.controls)&&this.controls.parentNode.removeChild(this.controls),this.checkParent(this.panel)&&this.panel.parentNode.removeChild(this.panel),this.rows=this.row_cache=this.title=this.description=this.row_holder=this.panel=this.controls=null,X(ne(i.prototype),"destroy",this).call(this)}},{key:"empty",value:function(e){var t=this;this.rows&&(this.rows.forEach((function(n,r){e&&(t.checkParent(n.tab)&&n.tab.parentNode.removeChild(n.tab),t.destroyRow(n,!0),t.row_cache[r]=null),t.rows[r]=null})),this.rows=[],e&&(this.row_cache=[]))}},{key:"destroyRow",value:function(e,t){var n=e.container;t?(e.destroy(),n.parentNode&&n.parentNode.removeChild(n),this.checkParent(e.tab)&&e.tab.parentNode.removeChild(e.tab)):(e.tab&&(e.tab.style.display="none"),n.style.display="none",e.unregister())}},{key:"getMax",value:function(){return Array.isArray(this.schema.items)&&!1===this.schema.additionalItems?Math.min(this.schema.items.length,this.schema.maxItems||1/0):this.schema.maxItems||1/0}},{key:"refreshTabs",value:function(e){var t=this;this.rows.forEach((function(n){n.tab&&(e?n.tab_text.textContent=n.getHeaderText():n.tab===t.active_tab?t.theme.markTabActive(n):t.theme.markTabInactive(n))}))}},{key:"ensureArraySize",value:function(e){if(Array.isArray(e)||(e=[e]),this.schema.minItems)for(;e.length<this.schema.minItems;)e.push(this.getItemInfo(e.length).default);return this.getMax()&&e.length>this.getMax()&&(e=e.slice(0,this.getMax())),e}},{key:"setValue",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0;if(t=this.ensureArraySize(t),JSON.stringify(t)!==this.serialized){t.forEach((function(t,r){if(e.rows[r])e.rows[r].setValue(t,n);else if(e.row_cache[r])e.rows[r]=e.row_cache[r],e.rows[r].setValue(t,n),e.rows[r].container.style.display="",e.rows[r].tab&&(e.rows[r].tab.style.display=""),e.rows[r].register(),e.jsoneditor.trigger("addRow",e.rows[r]);else{var i=e.addRow(t,n);e.jsoneditor.trigger("addRow",i)}}));for(var r=t.length;r<this.rows.length;r++)this.destroyRow(this.rows[r]),this.rows[r]=null;this.rows=this.rows.slice(0,t.length);var i=this.rows.find((function(t){return t.tab===e.active_tab})),o=void 0!==i?i.tab:null;!o&&this.rows.length&&(o=this.rows[0].tab),this.active_tab=o,this.refreshValue(n),this.refreshTabs(!0),this.refreshTabs(),this.onChange()}}},{key:"setVisibility",value:function(e,t){e.style.display=t?"":"none"}},{key:"setupButtons",value:function(e){var t=[];if(this.value.length)if(1===this.value.length){this.remove_all_rows_button.style.display="none";var n=!(e||this.hide_delete_last_row_buttons);this.setVisibility(this.delete_last_row_button,n),t.push(n)}else{var r=!(e||this.hide_delete_last_row_buttons);this.setVisibility(this.delete_last_row_button,r),t.push(r);var i=!(e||this.hide_delete_all_rows_buttons);this.setVisibility(this.remove_all_rows_button,i),t.push(i)}else this.delete_last_row_button.style.display="none",this.remove_all_rows_button.style.display="none";var o=!(this.getMax()&&this.getMax()<=this.rows.length||this.hide_add_button);return this.setVisibility(this.add_row_button,o),t.push(o),t.some((function(e){return e}))}},{key:"refreshValue",value:function(e){var t=this,n=this.value?this.value.length:0;if(this.value=this.rows.map((function(e){return e.getValue()})),n!==this.value.length||e){var r=this.schema.minItems&&this.schema.minItems>=this.rows.length;this.rows.forEach((function(e,n){if(e.movedown_button){var i=n!==t.rows.length-1;t.setVisibility(e.movedown_button,i)}e.delete_button&&t.setVisibility(e.delete_button,!r),t.value[n]=e.getValue()})),!this.collapsed&&this.setupButtons(r)?this.controls.style.display="inline-block":this.controls.style.display="none"}this.serialized=JSON.stringify(this.value)}},{key:"addRow",value:function(e,t){var n=this,r=this.rows.length;this.rows[r]=this.getElementEditor(r),this.row_cache[r]=this.rows[r],this.tabs_holder&&(this.rows[r].tab_text=document.createElement("span"),this.rows[r].tab_text.textContent=this.rows[r].getHeaderText(),"tabs-top"===this.schema.format?(this.rows[r].tab=this.theme.getTopTab(this.rows[r].tab_text,this.getValidId(this.rows[r].path)),this.theme.addTopTab(this.tabs_holder,this.rows[r].tab)):(this.rows[r].tab=this.theme.getTab(this.rows[r].tab_text,this.getValidId(this.rows[r].path)),this.theme.addTab(this.tabs_holder,this.rows[r].tab)),this.rows[r].tab.addEventListener("click",(function(e){n.active_tab=n.rows[r].tab,n.refreshTabs(),e.preventDefault(),e.stopPropagation()})));var i=this.rows[r].title_controls||this.rows[r].array_controls;return this.hide_delete_buttons||(this.rows[r].delete_button=this._createDeleteButton(r,i)),this.show_copy_button&&(this.rows[r].copy_button=this._createCopyButton(r,i)),r&&!this.hide_move_buttons&&(this.rows[r].moveup_button=this._createMoveUpButton(r,i)),this.hide_move_buttons||(this.rows[r].movedown_button=this._createMoveDownButton(r,i)),void 0!==e&&this.rows[r].setValue(e,t),this.refreshTabs(),this.rows[r]}},{key:"_createDeleteButton",value:function(e,t){var n=this,r=this.getButton(this.getItemTitle(),"delete","button_delete_row_title",[this.getItemTitle()]);return r.classList.add("delete","json-editor-btntype-delete"),r.setAttribute("data-i",e),r.addEventListener("click",(function(e){if(e.preventDefault(),e.stopPropagation(),!n.askConfirmation())return!1;var t=1*e.currentTarget.getAttribute("data-i"),r=n.getValue().filter((function(e,n){return n!==t})),i=null,o=n.rows[t];n.setValue(r),n.rows[t]?i=n.rows[t].tab:n.rows[t-1]&&(i=n.rows[t-1].tab),i&&(n.active_tab=i,n.refreshTabs()),n.onChange(!0),n.jsoneditor.trigger("deleteRow",o)})),t&&t.appendChild(r),r}},{key:"_createCopyButton",value:function(e,t){var n=this,r=this.getButton(this.getItemTitle(),"copy","button_copy_row_title",[this.getItemTitle()]);return r.classList.add("copy","json-editor-btntype-copy"),r.setAttribute("data-i",e),r.addEventListener("click",(function(e){var t=n.getValue();e.preventDefault(),e.stopPropagation();var r=1*e.currentTarget.getAttribute("data-i");t.forEach((function(e,n){n===r&&t.push(e)})),n.setValue(t),n.refreshValue(!0),n.onChange(!0)})),t.appendChild(r),r}},{key:"_createMoveUpButton",value:function(e,t){var n=this,r=this.getButton("","tabs-top"===this.schema.format?"moveleft":"moveup","button_move_up_title");return r.classList.add("moveup","json-editor-btntype-move"),r.setAttribute("data-i",e),r.addEventListener("click",(function(e){e.preventDefault(),e.stopPropagation();var t=1*e.currentTarget.getAttribute("data-i");if(!(t<=0)){var r=n.getValue(),i=r[t-1];r[t-1]=r[t],r[t]=i,n.setValue(r),n.active_tab=n.rows[t-1].tab,n.refreshTabs(),n.onChange(!0),n.jsoneditor.trigger("moveRow",n.rows[t-1])}})),t&&t.appendChild(r),r}},{key:"_createMoveDownButton",value:function(e,t){var n=this,r=this.getButton("","tabs-top"===this.schema.format?"moveright":"movedown","button_move_down_title");return r.classList.add("movedown","json-editor-btntype-move"),r.setAttribute("data-i",e),r.addEventListener("click",(function(e){e.preventDefault(),e.stopPropagation();var t=1*e.currentTarget.getAttribute("data-i"),r=n.getValue();if(!(t>=r.length-1)){var i=r[t+1];r[t+1]=r[t],r[t]=i,n.setValue(r),n.active_tab=n.rows[t+1].tab,n.refreshTabs(),n.onChange(!0),n.jsoneditor.trigger("moveRow",n.rows[t+1])}})),t&&t.appendChild(r),r}},{key:"addControls",value:function(){this.collapsed=!1,this.toggle_button=this._createToggleButton(),this.options.collapsed&&p(this.toggle_button,"click"),this.schema.options&&void 0!==this.schema.options.disable_collapse?this.schema.options.disable_collapse&&(this.toggle_button.style.display="none"):this.jsoneditor.options.disable_collapse&&(this.toggle_button.style.display="none"),this.add_row_button=this._createAddRowButton(),this.delete_last_row_button=this._createDeleteLastRowButton(),this.remove_all_rows_button=this._createRemoveAllRowsButton(),this.tabs&&(this.add_row_button.classList.add("je-array-control-btn"),this.delete_last_row_button.classList.add("je-array-control-btn"),this.remove_all_rows_button.classList.add("je-array-control-btn"))}},{key:"_createToggleButton",value:function(){var e=this,t=this.getButton("","collapse","button_collapse");t.classList.add("json-editor-btntype-toggle"),this.title.insertBefore(t,this.title.childNodes[0]);var n=this.row_holder.style.display,r=this.controls.style.display;return t.addEventListener("click",(function(t){t.preventDefault(),t.stopPropagation(),e.panel&&e.setVisibility(e.panel,e.collapsed),e.tabs_holder&&e.setVisibility(e.tabs_holder,e.collapsed),e.collapsed?(e.collapsed=!1,e.row_holder.style.display=n,e.controls.style.display=r,e.setButtonText(t.currentTarget,"","collapse","button_collapse")):(e.collapsed=!0,e.row_holder.style.display="none",e.controls.style.display="none",e.setButtonText(t.currentTarget,"","expand","button_expand"))})),t}},{key:"_createAddRowButton",value:function(){var e=this,t=this.getButton(this.getItemTitle(),"add","button_add_row_title",[this.getItemTitle()]);return t.classList.add("json-editor-btntype-add"),t.addEventListener("click",(function(t){t.preventDefault(),t.stopPropagation();var n,r=e.rows.length;e.row_cache[r]?(n=e.rows[r]=e.row_cache[r],e.rows[r].setValue(e.rows[r].getDefault(),!0),e.rows[r].container.style.display="",e.rows[r].tab&&(e.rows[r].tab.style.display=""),e.rows[r].register()):n=e.addRow(),e.active_tab=e.rows[r].tab,e.refreshTabs(),e.refreshValue(),e.onChange(!0),e.jsoneditor.trigger("addRow",n)})),this.controls.appendChild(t),t}},{key:"_createDeleteLastRowButton",value:function(){var e=this,t=this.getButton("button_delete_last","subtract","button_delete_last_title",[this.getItemTitle()]);return t.classList.add("json-editor-btntype-deletelast"),t.addEventListener("click",(function(t){if(t.preventDefault(),t.stopPropagation(),!e.askConfirmation())return!1;var n=e.getValue(),r=null,i=n.pop();e.setValue(n),e.rows[e.rows.length-1]&&(r=e.rows[e.rows.length-1].tab),r&&(e.active_tab=r,e.refreshTabs()),e.onChange(!0),e.jsoneditor.trigger("deleteRow",i)})),this.controls.appendChild(t),t}},{key:"_createRemoveAllRowsButton",value:function(){var e=this,t=this.getButton("button_delete_all","delete","button_delete_all_title");return t.classList.add("json-editor-btntype-deleteall"),t.addEventListener("click",(function(t){if(t.preventDefault(),t.stopPropagation(),!e.askConfirmation())return!1;e.empty(!0),e.setValue([]),e.onChange(!0),e.jsoneditor.trigger("deleteAllRows")})),this.controls.appendChild(t),t}},{key:"showValidationErrors",value:function(e){var t=this,n=[],r=[];e.forEach((function(e){e.path===t.path?n.push(e):r.push(e)})),this.error_holder&&(n.length?(this.error_holder.innerHTML="",this.error_holder.style.display="",n.forEach((function(e){t.error_holder.appendChild(t.theme.getErrorMessage(e.message))}))):this.error_holder.style.display="none"),this.rows.forEach((function(e){return e.showValidationErrors(r)}))}}])&&Z(t.prototype,n),i}(L);function ie(e){return(ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function oe(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ae(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function se(e,t,n){return(se="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=ce(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function le(e,t){return(le=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ue(e,t){return!t||"object"!==ie(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ce(e){return(ce=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}re.rules={".json-editor-btntype-toggle":"margin:0%2010px%200%200",".je-array-control-btn":"width:100%25;text-align:left;margin-bottom:3px"};var fe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&le(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ce(e);if(t){var i=ce(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return ue(this,n)}}(i);function i(){return oe(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"onInputChange",value:function(){this.value=this.input.value,this.onChange(!0)}},{key:"register",value:function(){se(ce(i.prototype),"register",this).call(this),this.input&&this.input.setAttribute("name",this.formname)}},{key:"unregister",value:function(){se(ce(i.prototype),"unregister",this).call(this),this.input&&this.input.removeAttribute("name")}},{key:"getNumColumns",value:function(){var e=this,t=this.getTitle().length;return Object.keys(this.select_values).forEach((function(n){return t=Math.max(t,"".concat(e.select_values[n]).length+4)})),Math.min(12,Math.max(t/7,2))}},{key:"preBuild",value:function(){var e;se(ce(i.prototype),"preBuild",this).call(this),this.select_options={},this.select_values={},this.option_keys=[],this.option_titles=[];var t=this.jsoneditor.expandRefs(this.schema.items||{}),n=t.enum||[],r=t.options&&t.options.enum_titles||[];for(e=0;e<n.length;e++)this.sanitize(n[e])===n[e]&&(this.option_keys.push("".concat(n[e])),this.option_titles.push("".concat(r[e]||n[e])),this.select_values["".concat(n[e])]=n[e])}},{key:"build",value:function(){var e,t=this;if(this.options.compact||(this.header=this.label=this.theme.getFormInputLabel(this.getTitle(),this.isRequired())),this.schema.description&&(this.description=this.theme.getFormInputDescription(this.schema.description)),this.options.infoText&&(this.infoButton=this.theme.getInfoButton(this.options.infoText)),this.options.compact&&this.container.classList.add("compact"),!this.schema.format&&this.option_keys.length<8||"checkbox"===this.schema.format){for(this.input_type="checkboxes",this.inputs={},this.controls={},e=0;e<this.option_keys.length;e++){var n=this.formname+e.toString();this.inputs[this.option_keys[e]]=this.theme.getCheckbox(),this.inputs[this.option_keys[e]].id=n,this.select_options[this.option_keys[e]]=this.inputs[this.option_keys[e]];var r=this.theme.getCheckboxLabel(this.option_titles[e]);r.htmlFor=n,this.controls[this.option_keys[e]]=this.theme.getFormControl(r,this.inputs[this.option_keys[e]])}this.control=this.theme.getMultiCheckboxHolder(this.controls,this.label,this.description,this.infoButton),this.inputs.controlgroup=this.inputs.controls=this.control}else{for(this.input_type="select",this.input=this.theme.getSelectInput(this.option_keys,!0),this.theme.setSelectOptions(this.input,this.option_keys,this.option_titles),this.input.setAttribute("multiple","multiple"),this.input.size=Math.min(10,this.option_keys.length),e=0;e<this.option_keys.length;e++)this.select_options[this.option_keys[e]]=this.input.children[e];this.control=this.theme.getFormControl(this.label,this.input,this.description,this.infoButton)}(this.schema.readOnly||this.schema.readonly)&&this.disable(!0),this.container.appendChild(this.control),this.multiselectChangeHandler=function(n){var r=[];for(e=0;e<t.option_keys.length;e++)t.select_options[t.option_keys[e]]&&(t.select_options[t.option_keys[e]].selected||t.select_options[t.option_keys[e]].checked)&&r.push(t.select_values[t.option_keys[e]]);t.updateValue(r),t.onChange(!0)},this.control.addEventListener("change",this.multiselectChangeHandler,!1),window.requestAnimationFrame((function(){t.afterInputReady()}))}},{key:"postBuild",value:function(){se(ce(i.prototype),"postBuild",this).call(this)}},{key:"afterInputReady",value:function(){this.theme.afterInputReady(this.input||this.inputs)}},{key:"setValue",value:function(e,t){var n=this;e=e||[],Array.isArray(e)||(e=[e]),e=e.map((function(e){return"".concat(e)})),Object.keys(this.select_options).forEach((function(t){n.select_options[t]["select"===n.input_type?"selected":"checked"]=e.includes(t)})),this.updateValue(e),this.onChange(!0)}},{key:"removeValue",value:function(e){e=[].concat(e),this.setValue(this.getValue().filter((function(t){return!e.includes(t)})))}},{key:"addValue",value:function(e){this.setValue(this.getValue().concat(e))}},{key:"updateValue",value:function(e){for(var t=!1,n=[],r=0;r<e.length;r++)if(this.select_options["".concat(e[r])]){var i=this.sanitize(this.select_values[e[r]]);n.push(i),i!==e[r]&&(t=!0)}else t=!0;return this.value=n,t}},{key:"sanitize",value:function(e){return"boolean"===this.schema.items.type?!!e:"number"===this.schema.items.type?1*e||0:"integer"===this.schema.items.type?Math.floor(1*e||0):"".concat(e)}},{key:"enable",value:function(){var e=this;this.always_disabled||(this.input?this.input.disabled=!1:this.inputs&&Object.keys(this.inputs).forEach((function(t){return e.inputs[t].disabled=!1})),se(ce(i.prototype),"enable",this).call(this))}},{key:"disable",value:function(e){var t=this;e&&(this.always_disabled=!0),this.input?this.input.disabled=!0:this.inputs&&Object.keys(this.inputs).forEach((function(e){return t.inputs[e].disabled=!0})),se(ce(i.prototype),"disable",this).call(this)}},{key:"destroy",value:function(){se(ce(i.prototype),"destroy",this).call(this)}},{key:"escapeRegExp",value:function(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}},{key:"showValidationErrors",value:function(e){var t=new RegExp("^".concat(this.escapeRegExp(this.path),"(\\.\\d+)?$")),n=e.reduce((function(e,n){return n.path.match(t)&&e.push(n.message),e}),[]);n.length?this.theme.addInputError(this.input||this.inputs,"".concat(n.join(". "),".")):this.theme.removeInputError(this.input||this.inputs)}}])&&ae(t.prototype,n),i}(L);function de(e){return(de="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function pe(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function he(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ye(e,t,n){return(ye="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=be(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function me(e,t){return(me=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ve(e,t){return!t||"object"!==de(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function be(e){return(be=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ge=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&me(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=be(e);if(t){var i=be(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return ve(this,n)}}(i);function i(){return pe(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"setValue",value:function(e,t){this.choices_instance?(e=[].concat(e).map((function(e){return"".concat(e)})),this.updateValue(e),this.choices_instance.removeActiveItems(),this.choices_instance.setChoiceByValue(this.value),this.onChange(!0)):ye(be(i.prototype),"setValue",this).call(this,e,t)}},{key:"afterInputReady",value:function(){var e=this;if(window.Choices&&!this.choices_instance){var t=this.expandCallbacks("choices",d({},{removeItems:!0,removeItemButton:!0},this.defaults.options.choices||{},this.options.choices||{},{addItems:!0,editItems:!1,duplicateItemsAllowed:!1}));this.newEnumAllowed=!1,this.choices_instance=new window.Choices(this.input,t),this.control.removeEventListener("change",this.multiselectChangeHandler),this.multiselectChangeHandler=function(t){var n=e.choices_instance.getValue(!0);e.updateValue(n),e.onChange(!0)},this.control.addEventListener("change",this.multiselectChangeHandler,!1)}ye(be(i.prototype),"afterInputReady",this).call(this)}},{key:"updateValue",value:function(e){e=[].concat(e);for(var t=!1,n=[],r=0;r<e.length;r++){if(!this.select_values["".concat(e[r])]){if(t=!0,!this.newEnumAllowed)continue;if(!this.addNewOption(e[r]))continue}var i=this.sanitize(this.select_values[e[r]]);n.push(i),i!==e[r]&&(t=!0)}return this.value=n,t}},{key:"addNewOption",value:function(e){return this.option_keys.push("".concat(e)),this.option_titles.push("".concat(e)),this.select_values["".concat(e)]=e,this.schema.items.enum.push(e),this.choices_instance.setChoices([{value:"".concat(e),label:"".concat(e)}],"value","label",!1),!0}},{key:"enable",value:function(){!this.always_disabled&&this.choices_instance&&this.choices_instance.enable(),ye(be(i.prototype),"enable",this).call(this)}},{key:"disable",value:function(e){this.choices_instance&&this.choices_instance.disable(),ye(be(i.prototype),"disable",this).call(this,e)}},{key:"destroy",value:function(){this.choices_instance&&(this.choices_instance.destroy(),this.choices_instance=null),ye(be(i.prototype),"destroy",this).call(this)}}])&&he(t.prototype,n),i}(fe);function _e(e){return(_e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function we(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ke(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xe(e,t,n){return(xe="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Oe(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Ce(e,t){return(Ce=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ee(e,t){return!t||"object"!==_e(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Oe(e){return(Oe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Se=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ce(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Oe(e);if(t){var i=Oe(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Ee(this,n)}}(i);function i(){return we(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"setValue",value:function(e,t){this.select2_instance?(e=[].concat(e).map((function(e){return"".concat(e)})),this.updateValue(e),this.select2v4?this.select2_instance.val(this.value).change():this.select2_instance.select2("val",this.value),this.onChange(!0)):xe(Oe(i.prototype),"setValue",this).call(this,e,t)}},{key:"afterInputReady",value:function(){var e,t=this;window.jQuery&&window.jQuery.fn&&window.jQuery.fn.select2&&!this.select2_instance&&(e=this.expandCallbacks("select2",d({},{tags:!0,width:"100%"},this.defaults.options.select2||{},this.options.select2||{})),this.newEnumAllowed=e.tags=!!e.tags&&this.schema.items&&"string"===this.schema.items.type,this.select2_instance=window.jQuery(this.input).select2(e),this.select2v4=y(this.select2_instance.select2,"amd"),this.selectChangeHandler=function(){var e=t.select2v4?t.select2_instance.val():t.select2_instance.select2("val");t.updateValue(e),t.onChange(!0)},this.select2_instance.on("select2-blur",this.selectChangeHandler),this.select2_instance.on("change",this.selectChangeHandler)),xe(Oe(i.prototype),"afterInputReady",this).call(this)}},{key:"updateValue",value:function(e){e=[].concat(e);for(var t=!1,n=[],r=0;r<e.length;r++){if(!this.select_values["".concat(e[r])]){if(t=!0,!this.newEnumAllowed)continue;if(!this.addNewOption(e[r]))continue}var i=this.sanitize(this.select_values[e[r]]);n.push(i),i!==e[r]&&(t=!0)}return this.value=n,t}},{key:"addNewOption",value:function(e){this.option_keys.push("".concat(e)),this.option_titles.push("".concat(e)),this.select_values["".concat(e)]=e,this.schema.items.enum.push(e);var t=this.input.querySelector('option[value="'.concat(e,'"]'));return t?t.removeAttribute("data-select2-tag"):this.input.appendChild(new Option(e,e,!1,!1)).trigger("change"),!0}},{key:"enable",value:function(){!this.always_disabled&&this.select2_instance&&(this.select2v4?this.select2_instance.prop("disabled",!1):this.select2_instance.select2("enable",!0)),xe(Oe(i.prototype),"enable",this).call(this)}},{key:"disable",value:function(e){this.select2_instance&&(this.select2v4?this.select2_instance.prop("disabled",!0):this.select2_instance.select2("enable",!1)),xe(Oe(i.prototype),"disable",this).call(this)}},{key:"destroy",value:function(){this.select2_instance&&(this.select2_instance.select2("destroy"),this.select2_instance=null),xe(Oe(i.prototype),"destroy",this).call(this)}}])&&ke(t.prototype,n),i}(fe);function je(e){return(je="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ae(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Pe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Te(e,t,n){return(Te="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Ie(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Re(e,t){return(Re=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Le(e,t){return!t||"object"!==je(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ie(e){return(Ie=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ne=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Re(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ie(e);if(t){var i=Ie(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Le(this,n)}}(i);function i(){return Ae(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"setValue",value:function(e,t){this.selectize_instance?(e=[].concat(e).map((function(e){return"".concat(e)})),this.updateValue(e),this.selectize_instance.setValue(this.value),this.onChange(!0)):Te(Ie(i.prototype),"setValue",this).call(this,e,t)}},{key:"afterInputReady",value:function(){var e,t=this;window.jQuery&&window.jQuery.fn&&window.jQuery.fn.selectize&&!this.selectize_instance&&(e=this.expandCallbacks("selectize",d({},{plugins:["remove_button"],delimiter:!1,createOnBlur:!0,create:!0},this.defaults.options.selectize||{},this.options.selectize||{})),this.newEnumAllowed=e.create=!!e.create&&this.schema.items&&"string"===this.schema.items.type,this.selectize_instance=window.jQuery(this.input).selectize(e)[0].selectize,this.control.removeEventListener("change",this.multiselectChangeHandler),this.multiselectChangeHandler=function(e){var n=t.selectize_instance.getValue();t.updateValue(n),t.onChange(!0)},this.selectize_instance.on("change",this.multiselectChangeHandler)),Te(Ie(i.prototype),"afterInputReady",this).call(this)}},{key:"updateValue",value:function(e){e=[].concat(e);for(var t=!1,n=[],r=0;r<e.length;r++){if(!this.select_values["".concat(e[r])]){if(t=!0,!this.newEnumAllowed)continue;if(!this.addNewOption(e[r]))continue}var i=this.sanitize(this.select_values[e[r]]);n.push(i),i!==e[r]&&(t=!0)}return this.value=n,t}},{key:"addNewOption",value:function(e){return this.option_keys.push("".concat(e)),this.option_titles.push("".concat(e)),this.select_values["".concat(e)]=e,this.schema.items.enum.push(e),this.selectize_instance.addOption({text:e,value:e}),!0}},{key:"enable",value:function(){!this.always_disabled&&this.selectize_instance&&this.selectize_instance.unlock(),Te(Ie(i.prototype),"enable",this).call(this)}},{key:"disable",value:function(e){this.selectize_instance&&this.selectize_instance.lock(),Te(Ie(i.prototype),"disable",this).call(this,e)}},{key:"destroy",value:function(){this.selectize_instance&&(this.selectize_instance.destroy(),this.selectize_instance=null),Te(Ie(i.prototype),"destroy",this).call(this)}}])&&Pe(t.prototype,n),i}(fe);function Be(e){return(Be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function De(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Me(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Fe(e,t,n){return(Fe="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=He(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function ze(e,t){return(ze=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ve(e,t){return!t||"object"!==Be(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function He(e){return(He=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ue=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ze(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=He(e);if(t){var i=He(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Ve(this,n)}}(i);function i(){return De(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"postBuild",value:function(){window.Autocomplete&&(this.autocomplete_wrapper=document.createElement("div"),this.input.parentNode.insertBefore(this.autocomplete_wrapper,this.input.nextSibling),this.autocomplete_wrapper.appendChild(this.input),this.autocomplete_dropdown=document.createElement("ul"),this.input.parentNode.insertBefore(this.autocomplete_dropdown,this.input.nextSibling)),Fe(He(i.prototype),"postBuild",this).call(this)}},{key:"afterInputReady",value:function(){var e;window.Autocomplete&&!this.autocomplete_instance&&(e=this.expandCallbacks("autocomplete",d({},{search:function(e,t){return console.log('No "search" callback defined for autocomplete in property "'.concat(e.key,'"')),[]},baseClass:"autocomplete"},this.defaults.options.autocomplete||{},this.options.autocomplete||{})),this.autocomplete_wrapper.classList.add(e.baseClass),this.autocomplete_dropdown.classList.add("".concat(e.baseClass,"-result-list")),this.autocomplete_instance=new window.Autocomplete(this.autocomplete_wrapper,e)),Fe(He(i.prototype),"afterInputReady",this).call(this)}},{key:"destroy",value:function(){this.autocomplete_instance&&(this.input&&this.input.parentNode&&this.input.parentNode.removeChild(this.input),this.autocomplete_dropdown&&this.autocomplete_dropdown.parentNode&&this.autocomplete_dropdown.parentNode.removeChild(this.autocomplete_dropdown),this.autocomplete_wrapper&&this.autocomplete_wrapper.parentNode&&this.autocomplete_wrapper.parentNode.removeChild(this.autocomplete_wrapper),this.autocomplete_instance=null),Fe(He(i.prototype),"destroy",this).call(this)}}])&&Me(t.prototype,n),i}(V);function qe(e){return(qe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function We(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function $e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ge(e,t,n){return(Ge="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Je(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Ke(e,t){return(Ke=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Qe(e,t){return!t||"object"!==qe(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Je(e){return(Je=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}n(133);var Ye=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ke(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Je(e);if(t){var i=Je(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Qe(this,n)}}(i);function i(){return We(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"getNumColumns",value:function(){return 4}},{key:"setFileReaderListener",value:function(e){var t=this;e.addEventListener("load",(function(e){if(t.count===t.current_item_index)t.value[t.count][t.key]=e.target.result;else{var n={};for(var r in t.parent.schema.properties)n[r]="";n[t.key]=e.target.result,t.value.splice(t.count,0,n)}t.count+=1,t.count===t.total+t.current_item_index&&t.arrayEditor.setValue(t.value)}))}},{key:"build",value:function(){var e=this;if(this.title=this.header=this.label=this.theme.getFormInputLabel(this.getTitle(),this.isRequired()),this.options.infoText&&(this.infoButton=this.theme.getInfoButton(this.options.infoText)),this.input=this.theme.getFormInputField("hidden"),this.container.appendChild(this.input),!this.schema.readOnly&&!this.schema.readonly){if(!window.FileReader)throw new Error("FileReader required for base64 editor");this.uploader=this.theme.getFormInputField("file"),this.schema.options&&this.schema.options.multiple&&!0===this.schema.options.multiple&&this.parent&&"object"===this.parent.schema.type&&this.parent.parent&&"array"===this.parent.parent.schema.type&&this.uploader.setAttribute("multiple",""),this.uploader.addEventListener("change",(function(t){if(t.preventDefault(),t.stopPropagation(),t.currentTarget.files&&t.currentTarget.files.length)if(t.currentTarget.files.length>1&&e.schema.options&&e.schema.options.multiple&&!0===e.schema.options.multiple&&e.parent&&"object"===e.parent.schema.type&&e.parent.parent&&"array"===e.parent.parent.schema.type){e.arrayEditor=e.jsoneditor.getEditor(e.parent.parent.path),e.value=e.arrayEditor.getValue(),e.total=t.currentTarget.files.length,e.current_item_index=parseInt(e.parent.key),e.count=e.current_item_index;for(var n=0;n<e.total;n++){var r=new FileReader;e.setFileReaderListener(r),r.readAsDataURL(t.currentTarget.files[n])}}else{var i=new FileReader;i.onload=function(t){e.value=t.target.result,e.refreshPreview(),e.onChange(!0),i=null},i.readAsDataURL(t.currentTarget.files[0])}}))}this.preview=this.theme.getFormInputDescription(this.schema.description),this.container.appendChild(this.preview),this.control=this.theme.getFormControl(this.label,this.uploader||this.input,this.preview,this.infoButton),this.container.appendChild(this.control)}},{key:"refreshPreview",value:function(){if(this.last_preview!==this.value&&(this.last_preview=this.value,this.preview.innerHTML="",this.value)){var e=this.value.match(/^data:([^;,]+)[;,]/);if(e&&(e=e[1]),e){if(this.preview.innerHTML="<strong>Type:</strong> ".concat(e,", <strong>Size:</strong> ").concat(Math.floor((this.value.length-this.value.split(",")[0].length-1)/1.33333)," bytes"),"image"===e.substr(0,5)){this.preview.innerHTML+="<br>";var t=document.createElement("img");t.style.maxWidth="100%",t.style.maxHeight="100px",t.src=this.value,this.preview.appendChild(t)}}else this.preview.innerHTML="<em>Invalid data URI</em>"}}},{key:"enable",value:function(){this.always_disabled||(this.uploader&&(this.uploader.disabled=!1),Ge(Je(i.prototype),"enable",this).call(this))}},{key:"disable",value:function(e){e&&(this.always_disabled=!0),this.uploader&&(this.uploader.disabled=!0),Ge(Je(i.prototype),"disable",this).call(this)}},{key:"setValue",value:function(e){this.value!==e&&(this.value=e,this.input.value=this.value,this.refreshPreview(),this.onChange())}},{key:"destroy",value:function(){this.preview&&this.preview.parentNode&&this.preview.parentNode.removeChild(this.preview),this.title&&this.title.parentNode&&this.title.parentNode.removeChild(this.title),this.input&&this.input.parentNode&&this.input.parentNode.removeChild(this.input),this.uploader&&this.uploader.parentNode&&this.uploader.parentNode.removeChild(this.uploader),Ge(Je(i.prototype),"destroy",this).call(this)}}])&&$e(t.prototype,n),i}(L);function Ze(e){return(Ze="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Xe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function et(e,t,n){return(et="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=rt(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function tt(e,t){return(tt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function nt(e,t){return!t||"object"!==Ze(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function rt(e){return(rt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var it=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&tt(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=rt(e);if(t){var i=rt(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return nt(this,n)}}(i);function i(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(n=r.call(this,e,t)).active=!1,n.parent&&n.parent.schema&&(Array.isArray(n.parent.schema.required)?n.parent.schema.required.includes(n.key)||n.parent.schema.required.push(n.key):n.parent.schema.required=[n.key]),n}return t=i,(n=[{key:"build",value:function(){var e=this;this.options.compact=!0;var t=this.schema.title||this.key,n=this.expandCallbacks("button",d({},{icon:"",validated:!1,align:"left",action:function(e,t){window.alert('No button action defined for "'.concat(e.path,'"'))}},this.defaults.options.button||{},this.options.button||{}));this.input=this.theme.getFormButton(t,n.icon,t),this.input.addEventListener("click",n.action,!1),(this.schema.readOnly||this.schema.readonly||this.schema.template)&&this.disable(!0),this.setInputAttributes(["readonly"]),this.control=this.theme.getFormButtonHolder(n.align),this.control.appendChild(this.input),this.container.appendChild(this.control),this.changeHandler=function(){e.jsoneditor.validate(e.jsoneditor.getValue()).length>0?e.disable():e.enable()},n.validated&&this.jsoneditor.on("change",this.changeHandler)}},{key:"enable",value:function(){this.always_disabled||(this.input.disabled=!1,et(rt(i.prototype),"enable",this).call(this))}},{key:"disable",value:function(e){e&&(this.always_disabled=!0),this.input.disabled=!0,et(rt(i.prototype),"disable",this).call(this)}},{key:"getNumColumns",value:function(){return 2}},{key:"activate",value:function(){this.active=!1,this.enable()}},{key:"deactivate",value:function(){this.isRequired()||(this.active=!1,this.disable())}},{key:"destroy",value:function(){this.jsoneditor.off("change",this.changeHandler),this.changeHandler=null,et(rt(i.prototype),"destroy",this).call(this)}}])&&Xe(t.prototype,n),i}(L);function ot(e){return(ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function at(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function st(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function lt(e,t,n){return(lt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=ft(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function ut(e,t){return(ut=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ct(e,t){return!t||"object"!==ot(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ft(e){return(ft=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var dt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ut(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ft(e);if(t){var i=ft(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return ct(this,n)}}(i);function i(){return at(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"setValue",value:function(e,t){e=!!e;var n=this.getValue()!==e;this.value=e,this.input.checked=this.value,this.onChange(n)}},{key:"register",value:function(){lt(ft(i.prototype),"register",this).call(this),this.input&&this.input.setAttribute("name",this.formname)}},{key:"unregister",value:function(){lt(ft(i.prototype),"unregister",this).call(this),this.input&&this.input.removeAttribute("name")}},{key:"getNumColumns",value:function(){return Math.min(12,Math.max(this.getTitle().length/7,2))}},{key:"build",value:function(){var e=this;this.parent.options.table_row||(this.label=this.header=this.theme.getCheckboxLabel(this.getTitle(),this.isRequired()),this.label.htmlFor=this.formname),this.schema.description&&(this.description=this.theme.getFormInputDescription(this.schema.description)),this.options.infoText&&!this.options.compact&&(this.infoButton=this.theme.getInfoButton(this.options.infoText)),this.options.compact&&this.container.classList.add("compact"),this.input=this.theme.getCheckbox(),this.input.id=this.formname,this.control=this.theme.getFormControl(this.label,this.input,this.description,this.infoButton),(this.schema.readOnly||this.schema.readonly)&&this.disable(!0),this.input.addEventListener("change",(function(t){t.preventDefault(),t.stopPropagation(),e.value=t.currentTarget.checked,e.onChange(!0)})),this.container.appendChild(this.control)}},{key:"enable",value:function(){this.always_disabled||(this.input.disabled=!1,lt(ft(i.prototype),"enable",this).call(this))}},{key:"disable",value:function(e){e&&(this.always_disabled=!0),this.input.disabled=!0,lt(ft(i.prototype),"disable",this).call(this)}},{key:"destroy",value:function(){this.label&&this.label.parentNode&&this.label.parentNode.removeChild(this.label),this.description&&this.description.parentNode&&this.description.parentNode.removeChild(this.description),this.input&&this.input.parentNode&&this.input.parentNode.removeChild(this.input),lt(ft(i.prototype),"destroy",this).call(this)}},{key:"showValidationErrors",value:function(e){var t=this;this.previous_error_setting=this.jsoneditor.options.show_errors;var n=e.reduce((function(e,n){return n.path===t.path&&e.push(n.message),e}),[]);this.input.controlgroup=this.control,n.length?this.theme.addInputError(this.input,"".concat(n.join(". "),".")):this.theme.removeInputError(this.input)}}])&&st(t.prototype,n),i}(L);function pt(e){return(pt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ht(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function yt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function mt(e,t,n){return(mt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=gt(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function vt(e,t){return(vt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function bt(e,t){return!t||"object"!==pt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function gt(e){return(gt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}n(134);var _t=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&vt(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=gt(e);if(t){var i=gt(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return bt(this,n)}}(i);function i(){return ht(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"setValue",value:function(e,t){var n=this.typecast(e),r=!!this.jsoneditor.options.use_default_values||void 0!==this.schema.default;this.enum_values.includes(n)&&(!t||this.isRequired()||r)||(n=this.enum_values[0]),this.value!==n&&(t?this.is_dirty=!1:"change"===this.jsoneditor.options.show_errors&&(this.is_dirty=!0),this.input.value=this.enum_options[this.enum_values.indexOf(n)],this.value=n,this.onChange(),this.change())}},{key:"register",value:function(){mt(gt(i.prototype),"register",this).call(this),this.input&&this.input.setAttribute("name",this.formname)}},{key:"unregister",value:function(){mt(gt(i.prototype),"unregister",this).call(this),this.input&&this.input.removeAttribute("name")}},{key:"getNumColumns",value:function(){if(!this.enum_options)return 3;for(var e=this.getTitle().length,t=0;t<this.enum_options.length;t++)e=Math.max(e,this.enum_options[t].length+4);return Math.min(12,Math.max(e/7,2))}},{key:"typecast",value:function(e){return"boolean"===this.schema.type?"undefined"===e||void 0===e?void 0:!!e:"number"===this.schema.type?1*e||0:"integer"===this.schema.type?Math.floor(1*e||0):this.schema.enum&&void 0===e?void 0:"".concat(e)}},{key:"getValue",value:function(){if(this.dependenciesFulfilled)return this.typecast(this.value)}},{key:"preBuild",value:function(){var e,t,n=this;if(this.input_type="select",this.enum_options=[],this.enum_values=[],this.enum_display=[],this.schema.enum){var r=this.schema.options&&this.schema.options.enum_titles||[];this.schema.enum.forEach((function(e,t){n.enum_options[t]="".concat(e),n.enum_display[t]="".concat(r[t]||e),n.enum_values[t]=n.typecast(e)})),this.isRequired()||(this.enum_display.unshift(" "),this.enum_options.unshift("undefined"),this.enum_values.unshift(void 0))}else if("boolean"===this.schema.type)this.enum_display=this.schema.options&&this.schema.options.enum_titles||["true","false"],this.enum_options=["1",""],this.enum_values=[!0,!1],this.isRequired()||(this.enum_display.unshift(" "),this.enum_options.unshift("undefined"),this.enum_values.unshift(void 0));else{if(!this.schema.enumSource)throw new Error("'select' editor requires the enum property to be set.");if(this.enumSource=[],this.enum_display=[],this.enum_options=[],this.enum_values=[],Array.isArray(this.schema.enumSource))for(e=0;e<this.schema.enumSource.length;e++)"string"==typeof this.schema.enumSource[e]?this.enumSource[e]={source:this.schema.enumSource[e]}:Array.isArray(this.schema.enumSource[e])?this.enumSource[e]=this.schema.enumSource[e]:this.enumSource[e]=d({},this.schema.enumSource[e]);else this.schema.enumValue?this.enumSource=[{source:this.schema.enumSource,value:this.schema.enumValue}]:this.enumSource=[{source:this.schema.enumSource}];for(e=0;e<this.enumSource.length;e++)this.enumSource[e].value&&("function"==typeof(t=this.expandCallbacks("template",{template:this.enumSource[e].value})).template?this.enumSource[e].value=t.template:this.enumSource[e].value=this.jsoneditor.compileTemplate(this.enumSource[e].value,this.template_engine)),this.enumSource[e].title&&("function"==typeof(t=this.expandCallbacks("template",{template:this.enumSource[e].title})).template?this.enumSource[e].title=t.template:this.enumSource[e].title=this.jsoneditor.compileTemplate(this.enumSource[e].title,this.template_engine)),this.enumSource[e].filter&&this.enumSource[e].value&&("function"==typeof(t=this.expandCallbacks("template",{template:this.enumSource[e].filter})).template?this.enumSource[e].filter=t.template:this.enumSource[e].filter=this.jsoneditor.compileTemplate(this.enumSource[e].filter,this.template_engine))}}},{key:"build",value:function(){var e=this;this.options.compact||(this.header=this.label=this.theme.getFormInputLabel(this.getTitle(),this.isRequired())),this.schema.description&&(this.description=this.theme.getFormInputDescription(this.schema.description)),this.options.infoText&&(this.infoButton=this.theme.getInfoButton(this.options.infoText)),this.options.compact&&this.container.classList.add("compact"),this.input=this.theme.getSelectInput(this.enum_options,!1),this.theme.setSelectOptions(this.input,this.enum_options,this.enum_display),(this.schema.readOnly||this.schema.readonly)&&this.disable(!0),this.setInputAttributes([]),this.input.addEventListener("change",(function(t){t.preventDefault(),t.stopPropagation(),e.onInputChange()})),this.control=this.theme.getFormControl(this.label,this.input,this.description,this.infoButton),this.container.appendChild(this.control),this.value=this.enum_values[0],window.requestAnimationFrame((function(){e.input.parentNode&&e.afterInputReady()}))}},{key:"afterInputReady",value:function(){this.theme.afterInputReady(this.input)}},{key:"onInputChange",value:function(){var e,t=this.typecast(this.input.value);(e=this.enum_values.includes(t)?this.enum_values[this.enum_values.indexOf(t)]:this.enum_values[0])!==this.value&&(this.is_dirty=!0,this.value=e,this.onChange(!0))}},{key:"onWatchedFieldChange",value:function(){var e,t,n=[],r=[];if(this.enumSource){e=this.getWatchedFieldValues();for(var o=0;o<this.enumSource.length;o++)if(Array.isArray(this.enumSource[o]))n=n.concat(this.enumSource[o]),r=r.concat(this.enumSource[o]);else{var a=[];if(a=Array.isArray(this.enumSource[o].source)?this.enumSource[o].source:e[this.enumSource[o].source]){if(this.enumSource[o].slice&&(a=Array.prototype.slice.apply(a,this.enumSource[o].slice)),this.enumSource[o].filter){var s=[];for(t=0;t<a.length;t++)this.enumSource[o].filter({i:t,item:a[t],watched:e})&&s.push(a[t]);a=s}var l=[],u=[];for(t=0;t<a.length;t++){var c=a[t];this.enumSource[o].value?u[t]=this.typecast(this.enumSource[o].value({i:t,item:c})):u[t]=a[t],this.enumSource[o].title?l[t]=this.enumSource[o].title({i:t,item:c}):l[t]=u[t]}this.enumSource[o].sort&&function(e,t,n){e.map((function(e,n){return{v:e,t:t[n]}})).sort((function(e,t){return e.v<t.v?-n:e.v===t.v?0:n})).forEach((function(n,r){e[r]=n.v,t[r]=n.t}))}.bind(null,u,l,"desc"===this.enumSource[o].sort?1:-1)(),n=n.concat(u),r=r.concat(l)}}var f=this.value;this.theme.setSelectOptions(this.input,n,r),this.enum_options=n,this.enum_display=r,this.enum_values=n,n.includes(f)||!1!==this.jsoneditor.options.enum_source_value_auto_select?(this.input.value=f,this.value=f):(this.input.value=n[0],this.value=this.typecast(n[0]||""),this.parent&&!this.watchLoop?this.parent.onChildEditorChange(this):this.jsoneditor.onChange(),this.jsoneditor.notifyWatchers(this.path))}mt(gt(i.prototype),"onWatchedFieldChange",this).call(this)}},{key:"enable",value:function(){this.always_disabled||(this.input.disabled=!1,mt(gt(i.prototype),"enable",this).call(this))}},{key:"disable",value:function(e){e&&(this.always_disabled=!0),this.input.disabled=!0,mt(gt(i.prototype),"disable",this).call(this,e)}},{key:"destroy",value:function(){this.label&&this.label.parentNode&&this.label.parentNode.removeChild(this.label),this.description&&this.description.parentNode&&this.description.parentNode.removeChild(this.description),this.input&&this.input.parentNode&&this.input.parentNode.removeChild(this.input),mt(gt(i.prototype),"destroy",this).call(this)}},{key:"showValidationErrors",value:function(e){var t=this;this.previous_error_setting=this.jsoneditor.options.show_errors;var n=e.reduce((function(e,n){return n.path===t.path&&e.push(n.message),e}),[]);n.length?this.theme.addInputError(this.input,"".concat(n.join(". "),".")):this.theme.removeInputError(this.input)}}])&&yt(t.prototype,n),i}(L);function wt(e){return(wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function kt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function xt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ct(e,t,n){return(Ct="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=St(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Et(e,t){return(Et=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ot(e,t){return!t||"object"!==wt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function St(e){return(St=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var jt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Et(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=St(e);if(t){var i=St(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Ot(this,n)}}(i);function i(){return kt(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"setValue",value:function(e,t){if(this.choices_instance){var n=this.typecast(e||"");if(this.enum_values.includes(n)||(n=this.enum_values[0]),this.value===n)return;t?this.is_dirty=!1:"change"===this.jsoneditor.options.show_errors&&(this.is_dirty=!0),this.input.value=this.enum_options[this.enum_values.indexOf(n)],this.choices_instance.setChoiceByValue(this.input.value),this.value=n,this.onChange()}else Ct(St(i.prototype),"setValue",this).call(this,e,t)}},{key:"afterInputReady",value:function(){if(window.Choices&&!this.choices_instance){var e=this.expandCallbacks("choices",d({},this.defaults.options.choices||{},this.options.choices||{}));this.choices_instance=new window.Choices(this.input,e)}Ct(St(i.prototype),"afterInputReady",this).call(this)}},{key:"onWatchedFieldChange",value:function(){var e=this;if(Ct(St(i.prototype),"onWatchedFieldChange",this).call(this),this.choices_instance){var t=this.enum_options.map((function(t,n){return{value:t,label:e.enum_display[n]}}));this.choices_instance.setChoices(t,"value","label",!0),this.choices_instance.setChoiceByValue("".concat(this.value))}}},{key:"enable",value:function(){!this.always_disabled&&this.choices_instance&&this.choices_instance.enable(),Ct(St(i.prototype),"enable",this).call(this)}},{key:"disable",value:function(e){this.choices_instance&&this.choices_instance.disable(),Ct(St(i.prototype),"disable",this).call(this,e)}},{key:"destroy",value:function(){this.choices_instance&&(this.choices_instance.destroy(),this.choices_instance=null),Ct(St(i.prototype),"destroy",this).call(this)}}])&&xt(t.prototype,n),i}(_t);function At(e){return(At="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Pt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Tt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Rt(e,t,n){return(Rt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Nt(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Lt(e,t){return(Lt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function It(e,t){return!t||"object"!==At(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Nt(e){return(Nt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}jt.rules={".choices > *":"box-sizing:border-box"};var Bt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Lt(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Nt(e);if(t){var i=Nt(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return It(this,n)}}(i);function i(){return Pt(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"build",value:function(){if(Rt(Nt(i.prototype),"build",this).call(this),this.input&&(this.schema.max&&"string"==typeof this.schema.max&&this.input.setAttribute("max",this.schema.max),this.schema.min&&"string"==typeof this.schema.max&&this.input.setAttribute("min",this.schema.min),window.flatpickr&&"object"===At(this.options.flatpickr))){this.options.flatpickr.enableTime="date"!==this.schema.format,this.options.flatpickr.noCalendar="time"===this.schema.format,"integer"===this.schema.type&&(this.options.flatpickr.mode="single"),this.input.setAttribute("data-input","");var e=this.input;if(!0===this.options.flatpickr.wrap){var t=[];if(!1!==this.options.flatpickr.showToggleButton){var n=this.getButton("","time"===this.schema.format?"time":"calendar","flatpickr_toggle_button");n.setAttribute("data-toggle",""),t.push(n)}if(!1!==this.options.flatpickr.showClearButton){var r=this.getButton("","clear","flatpickr_clear_button");r.setAttribute("data-clear",""),t.push(r)}var o=this.input.parentNode,a=this.input.nextSibling,s=this.theme.getInputGroup(this.input,t);void 0!==s?(this.options.flatpickr.inline=!1,o.insertBefore(s,a),e=s):this.options.flatpickr.wrap=!1}this.flatpickr=window.flatpickr(e,this.options.flatpickr),!0===this.options.flatpickr.inline&&!0===this.options.flatpickr.inlineHideInput&&this.input.setAttribute("type","hidden")}}},{key:"getValue",value:function(){if(this.dependenciesFulfilled){if("string"===this.schema.type)return this.value;if(""!==this.value&&void 0!==this.value){var e="time"===this.schema.format?"1970-01-01 ".concat(this.value):this.value;return parseInt(new Date(e).getTime()/1e3)}}}},{key:"setValue",value:function(e,t,n){if("string"===this.schema.type)Rt(Nt(i.prototype),"setValue",this).call(this,e,t,n),this.flatpickr&&this.flatpickr.setDate(e);else if(e>0){var r=new Date(1e3*e),o=r.getFullYear(),a=this.zeroPad(r.getMonth()+1),s=this.zeroPad(r.getDate()),l=this.zeroPad(r.getHours()),u=this.zeroPad(r.getMinutes()),c=this.zeroPad(r.getSeconds()),f=[o,a,s].join("-"),d=[l,u,c].join(":"),p="".concat(f,"T").concat(d);"date"===this.schema.format?p=f:"time"===this.schema.format&&(p=d),this.input.value=p,this.refreshValue(),this.flatpickr&&this.flatpickr.setDate(p)}}},{key:"destroy",value:function(){this.flatpickr&&this.flatpickr.destroy(),this.flatpickr=null,Rt(Nt(i.prototype),"destroy",this).call(this)}},{key:"zeroPad",value:function(e){return"0".concat(e).slice(-2)}}])&&Tt(t.prototype,n),i}(V);function Dt(e){return(Dt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Mt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ft(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function zt(e,t,n){return(zt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Ut(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Vt(e,t){return(Vt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ht(e,t){return!t||"object"!==Dt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ut(e){return(Ut=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var qt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Vt(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ut(e);if(t){var i=Ut(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Ht(this,n)}}(i);function i(){return Mt(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"register",value:function(){if(this.editors){for(var e=0;e<this.editors.length;e++)this.editors[e]&&this.editors[e].unregister();this.editors[this.currentEditor]&&this.editors[this.currentEditor].register()}zt(Ut(i.prototype),"register",this).call(this)}},{key:"unregister",value:function(){if(zt(Ut(i.prototype),"unregister",this).call(this),this.editors)for(var e=0;e<this.editors.length;e++)this.editors[e]&&this.editors[e].unregister()}},{key:"getNumColumns",value:function(){return this.editors[this.currentEditor]?Math.max(this.editors[this.currentEditor].getNumColumns(),4):4}},{key:"enable",value:function(){if(this.editors)for(var e=0;e<this.editors.length;e++)this.editors[e]&&this.editors[e].enable();zt(Ut(i.prototype),"enable",this).call(this)}},{key:"disable",value:function(){if(this.editors)for(var e=0;e<this.editors.length;e++)this.editors[e]&&this.editors[e].disable();zt(Ut(i.prototype),"disable",this).call(this)}},{key:"switchEditor",value:function(){var e=this,t=this.getWatchedFieldValues();if(t){var n=document.location.origin+document.location.pathname+this.template(t);this.editors[this.refs[n]]||this.buildChildEditor(n),this.currentEditor=this.refs[n],this.register(),this.editors.forEach((function(t,n){t&&(e.currentEditor===n?t.container.style.display="":t.container.style.display="none")})),this.refreshValue(),this.onChange(!0)}}},{key:"buildChildEditor",value:function(e){this.refs[e]=this.editors.length;var t=this.theme.getChildEditorHolder();this.editor_holder.appendChild(t);var n=d({},this.schema,this.jsoneditor.refs[e]),r=this.jsoneditor.getEditorClass(n,this.jsoneditor),i=this.jsoneditor.createEditor(r,{jsoneditor:this.jsoneditor,schema:n,container:t,path:this.path,parent:this,required:!0});this.editors.push(i),i.preBuild(),i.build(),i.postBuild()}},{key:"preBuild",value:function(){var e;for(this.refs={},this.editors=[],this.currentEditor="",e=0;e<this.schema.links.length;e++)if("describedby"===this.schema.links[e].rel.toLowerCase()){this.template=this.jsoneditor.compileTemplate(this.schema.links[e].href,this.template_engine);break}this.schema.links=this.schema.links.slice(0,e).concat(this.schema.links.slice(e+1)),0===this.schema.links.length&&delete this.schema.links,this.baseSchema=d({},this.schema)}},{key:"build",value:function(){this.editor_holder=document.createElement("div"),this.container.appendChild(this.editor_holder),this.switchEditor()}},{key:"onWatchedFieldChange",value:function(){this.switchEditor()}},{key:"onChildEditorChange",value:function(e){this.editors[this.currentEditor]&&this.refreshValue(),zt(Ut(i.prototype),"onChildEditorChange",this).call(this,e)}},{key:"refreshValue",value:function(){this.editors[this.currentEditor]&&(this.value=this.editors[this.currentEditor].getValue())}},{key:"setValue",value:function(e,t){this.editors[this.currentEditor]&&(this.editors[this.currentEditor].setValue(e,t),this.refreshValue(),this.onChange())}},{key:"destroy",value:function(){this.editors.forEach((function(e){e&&e.destroy()})),this.editor_holder&&this.editor_holder.parentNode&&this.editor_holder.parentNode.removeChild(this.editor_holder),zt(Ut(i.prototype),"destroy",this).call(this)}},{key:"showValidationErrors",value:function(e){this.editors.forEach((function(t){t&&t.showValidationErrors(e)}))}}])&&Ft(t.prototype,n),i}(L);function Wt(e){return(Wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function $t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Gt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Kt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Qt(e,t,n){return(Qt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Zt(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Jt(e,t){return(Jt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Yt(e,t){return!t||"object"!==Wt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Zt(e){return(Zt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Xt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Jt(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Zt(e);if(t){var i=Zt(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Yt(this,n)}}(i);function i(){return Gt(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"getNumColumns",value:function(){return 4}},{key:"build",value:function(){var e=this;this.title=this.header=this.label=this.theme.getFormInputLabel(this.getTitle(),this.isRequired()),this.container.appendChild(this.title),this.options.enum_titles=this.options.enum_titles||[],this.enum=this.schema.enum,this.selected=0,this.select_options=[],this.html_values=[];for(var t=0;t<this.enum.length;t++)this.select_options[t]=this.options.enum_titles[t]||"Value ".concat(t+1),this.html_values[t]=this.getHTML(this.enum[t]);this.switcher=this.theme.getSwitcher(this.select_options),this.container.appendChild(this.switcher),this.display_area=this.theme.getIndentedPanel(),this.container.appendChild(this.display_area),this.options.hide_display&&(this.display_area.style.display="none"),this.switcher.addEventListener("change",(function(t){e.selected=e.select_options.indexOf(t.currentTarget.value),e.value=e.enum[e.selected],e.refreshValue(),e.onChange(!0)})),this.value=this.enum[0],this.refreshValue(),1===this.enum.length&&(this.switcher.style.display="none")}},{key:"refreshValue",value:function(){var e=this;this.selected=-1;var t=JSON.stringify(this.value);this.enum.forEach((function(n,r){if(t===JSON.stringify(n))return e.selected=r,!1})),this.selected<0?this.setValue(this.enum[0]):(this.switcher.value=this.select_options[this.selected],this.display_area.innerHTML=this.html_values[this.selected])}},{key:"enable",value:function(){this.always_disabled||(this.switcher.disabled=!1,Qt(Zt(i.prototype),"enable",this).call(this))}},{key:"disable",value:function(e){e&&(this.always_disabled=!0),this.switcher.disabled=!0,Qt(Zt(i.prototype),"disable",this).call(this)}},{key:"getHTML",value:function(e){var t=this;if(null===e)return"<em>null</em>";if("object"===Wt(e)){var n="";return function(e,t){Array.isArray(e)||"number"==typeof e.length&&e.length>0&&e.length-1 in e?Array.from(e).forEach((function(e,n){return t(n,e)})):Object.entries(e).forEach((function(e){var n=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}(e,t)||function(e,t){if(e){if("string"==typeof e)return $t(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$t(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(e,2),r=n[0],i=n[1];return t(r,i)}))}(e,(function(r,i){var o=t.getHTML(i);Array.isArray(e)||(o="<div><em>".concat(r,"</em>: ").concat(o,"</div>")),n+="<li>".concat(o,"</li>")})),n=Array.isArray(e)?"<ol>".concat(n,"</ol>"):"<ul style='margin-top:0;margin-bottom:0;padding-top:0;padding-bottom:0;'>".concat(n,"</ul>")}return"boolean"==typeof e?e?"true":"false":"string"==typeof e?e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;"):e}},{key:"setValue",value:function(e){this.value!==e&&(this.value=e,this.refreshValue(),this.onChange())}},{key:"destroy",value:function(){this.display_area&&this.display_area.parentNode&&this.display_area.parentNode.removeChild(this.display_area),this.title&&this.title.parentNode&&this.title.parentNode.removeChild(this.title),this.switcher&&this.switcher.parentNode&&this.switcher.parentNode.removeChild(this.switcher),Qt(Zt(i.prototype),"destroy",this).call(this)}}])&&Kt(t.prototype,n),i}(L);function en(e){return(en="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function tn(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function nn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function rn(e,t,n){return(rn="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=sn(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function on(e,t){return(on=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function an(e,t){return!t||"object"!==en(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function sn(e){return(sn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ln=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&on(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=sn(e);if(t){var i=sn(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return an(this,n)}}(i);function i(){return tn(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"register",value:function(){rn(sn(i.prototype),"register",this).call(this),this.input&&this.input.setAttribute("name",this.formname)}},{key:"unregister",value:function(){rn(sn(i.prototype),"unregister",this).call(this),this.input&&this.input.removeAttribute("name")}},{key:"setValue",value:function(e,t,n){if((!this.template||n)&&(null==e?e="":"object"===en(e)?e=JSON.stringify(e):"string"!=typeof e&&(e="".concat(e)),e!==this.serialized)){var r=this.sanitize(e);if(this.input.value!==r){this.input.value=r;var i=n||this.getValue()!==e;this.refreshValue(),t?this.is_dirty=!1:"change"===this.jsoneditor.options.show_errors&&(this.is_dirty=!0),this.adjust_height&&this.adjust_height(this.input),this.onChange(i)}}}},{key:"getNumColumns",value:function(){return 2}},{key:"enable",value:function(){rn(sn(i.prototype),"enable",this).call(this)}},{key:"disable",value:function(){rn(sn(i.prototype),"disable",this).call(this)}},{key:"refreshValue",value:function(){this.value=this.input.value,"string"!=typeof this.value&&(this.value=""),this.serialized=this.value}},{key:"destroy",value:function(){this.template=null,this.input&&this.input.parentNode&&this.input.parentNode.removeChild(this.input),this.label&&this.label.parentNode&&this.label.parentNode.removeChild(this.label),this.description&&this.description.parentNode&&this.description.parentNode.removeChild(this.description),rn(sn(i.prototype),"destroy",this).call(this)}},{key:"sanitize",value:function(e){return e}},{key:"onWatchedFieldChange",value:function(){var e;this.template&&(e=this.getWatchedFieldValues(),this.setValue(this.template(e),!1,!0)),rn(sn(i.prototype),"onWatchedFieldChange",this).call(this)}},{key:"build",value:function(){if(this.format=this.schema.format,!this.format&&this.options.default_format&&(this.format=this.options.default_format),this.options.format&&(this.format=this.options.format),this.input_type="hidden",this.input=this.theme.getFormInputField(this.input_type),this.format&&this.input.setAttribute("data-schemaformat",this.format),this.container.appendChild(this.input),this.schema.template){var e=this.expandCallbacks("template",{template:this.schema.template});"function"==typeof e.template?this.template=e.template:this.template=this.jsoneditor.compileTemplate(this.schema.template,this.template_engine),this.refreshValue()}else this.refreshValue()}}])&&nn(t.prototype,n),i}(L);function un(e){return(un="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function cn(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function fn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function dn(e,t){return(dn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function pn(e,t){return!t||"object"!==un(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function hn(e){return(hn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var yn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&dn(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=hn(e);if(t){var i=hn(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return pn(this,n)}}(i);function i(){return cn(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"build",value:function(){this.options.compact=!1,this.header=this.label=this.theme.getFormInputLabel(this.getTitle()),this.description=this.theme.getDescription(this.schema.description||""),this.control=this.theme.getFormControl(this.label,this.description,null),this.container.appendChild(this.control)}},{key:"getTitle",value:function(){return this.schema.title}},{key:"getNumColumns",value:function(){return 12}}])&&fn(t.prototype,n),i}(it);function mn(e){return(mn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function vn(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function bn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function gn(e,t,n){return(gn="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=kn(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function _n(e,t){return(_n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function wn(e,t){return!t||"object"!==mn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function kn(e){return(kn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var xn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_n(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=kn(e);if(t){var i=kn(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return wn(this,n)}}(i);function i(){return vn(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"build",value:function(){if(gn(kn(i.prototype),"build",this).call(this),void 0!==this.schema.minimum){var e=this.schema.minimum;void 0!==this.schema.exclusiveMinimum&&(e+=1),this.input.setAttribute("min",e)}if(void 0!==this.schema.maximum){var t=this.schema.maximum;void 0!==this.schema.exclusiveMaximum&&(t-=1),this.input.setAttribute("max",t)}if(void 0!==this.schema.step){var n=this.schema.step||1;this.input.setAttribute("step",n)}this.setInputAttributes(["maxlength","pattern","readonly","min","max","step"])}},{key:"getNumColumns",value:function(){return 2}},{key:"getValue",value:function(){if(this.dependenciesFulfilled){var e=function(e){if(null==e)return!1;var t=e.match(m),n=parseFloat(e);return null!==t&&!isNaN(n)&&isFinite(n)}(this.value)?parseFloat(this.value):this.value;if(this.jsoneditor.options.use_default_values||""!==e)return e}}}])&&bn(t.prototype,n),i}(V);function Cn(e){return(Cn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function En(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function On(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Sn(e,t){return(Sn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function jn(e,t){return!t||"object"!==Cn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function An(e){return(An=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Pn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Sn(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=An(e);if(t){var i=An(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return jn(this,n)}}(i);function i(){return En(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"getNumColumns",value:function(){return 2}},{key:"getValue",value:function(){if(this.dependenciesFulfilled){var e=function(e){if(null==e)return!1;var t=e.match(v),n=parseInt(e);return null!==t&&!isNaN(n)&&isFinite(n)}(this.value)?parseInt(this.value):this.value;if(this.jsoneditor.options.use_default_values||""!==e)return e}}}])&&On(t.prototype,n),i}(xn);function Tn(e){return(Tn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Rn(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ln(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function In(e,t,n){return(In="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Dn(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Nn(e,t){return(Nn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Bn(e,t){return!t||"object"!==Tn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Dn(e){return(Dn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Mn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Nn(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Dn(e);if(t){var i=Dn(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Bn(this,n)}}(i);function i(){return Rn(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"preBuild",value:function(){if(In(Dn(i.prototype),"preBuild",this).call(this),this.schema.options||(this.schema.options={}),!this.schema.options.cleave)switch(this.format){case"ipv6":this.schema.options.cleave={delimiters:[":"],blocks:[4,4,4,4,4,4,4,4],uppercase:!0};break;case"ipv4":this.schema.options.cleave={delimiters:["."],blocks:[3,3,3,3],numericOnly:!0}}this.options=d(this.options,this.schema.options||{})}}])&&Ln(t.prototype,n),i}(V);function Fn(e){return(Fn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function zn(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Vn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Hn(e,t,n){return(Hn="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Wn(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Un(e,t){return(Un=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function qn(e,t){return!t||"object"!==Fn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Wn(e){return(Wn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var $n=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Un(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Wn(e);if(t){var i=Wn(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return qn(this,n)}}(i);function i(){return zn(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"setValue",value:function(e,t,n){var r=Hn(Wn(i.prototype),"setValue",this).call(this,e,t,n);void 0!==r&&r.changed&&this.jodit_instance&&this.jodit_instance.setEditorValue(r.value)}},{key:"build",value:function(){this.options.format="textarea",Hn(Wn(i.prototype),"build",this).call(this),this.input_type=this.schema.format,this.input.setAttribute("data-schemaformat",this.input_type)}},{key:"afterInputReady",value:function(){var e,t=this;window.Jodit?(e=this.expandCallbacks("jodit",d({},{height:300},this.defaults.options.jodit||{},this.options.jodit||{})),this.jodit_instance=new window.Jodit(this.input,e),(this.schema.readOnly||this.schema.readonly||this.schema.template)&&this.jodit_instance.setReadOnly(!0),this.jodit_instance.events.on("change",(function(){t.value=t.jodit_instance.getEditorValue(),t.is_dirty=!0,t.onChange(!0)})),this.theme.afterInputReady(this.input)):Hn(Wn(i.prototype),"afterInputReady",this).call(this)}},{key:"getNumColumns",value:function(){return 6}},{key:"enable",value:function(){!this.always_disabled&&this.jodit_instance&&this.jodit_instance.setReadOnly(!1),Hn(Wn(i.prototype),"enable",this).call(this)}},{key:"disable",value:function(e){this.jodit_instance&&this.jodit_instance.setReadOnly(!0),Hn(Wn(i.prototype),"disable",this).call(this,e)}},{key:"destroy",value:function(){this.jodit_instance&&(this.jodit_instance.destruct(),this.jodit_instance=null),Hn(Wn(i.prototype),"destroy",this).call(this)}}])&&Vn(t.prototype,n),i}(V);function Gn(e){return(Gn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Kn(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Qn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Jn(e,t,n){return(Jn="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Xn(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Yn(e,t){return(Yn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Zn(e,t){return!t||"object"!==Gn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Xn(e){return(Xn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var er=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Yn(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Xn(e);if(t){var i=Xn(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Zn(this,n)}}(i);function i(){return Kn(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"register",value:function(){if(this.editors){for(var e=0;e<this.editors.length;e++)this.editors[e]&&this.editors[e].unregister();this.editors[this.type]&&this.editors[this.type].register()}Jn(Xn(i.prototype),"register",this).call(this)}},{key:"unregister",value:function(){if(Jn(Xn(i.prototype),"unregister",this).call(this),this.editors)for(var e=0;e<this.editors.length;e++)this.editors[e]&&this.editors[e].unregister()}},{key:"getNumColumns",value:function(){return this.editors[this.type]?Math.max(this.editors[this.type].getNumColumns(),4):4}},{key:"enable",value:function(){if(!this.always_disabled){if(this.editors)for(var e=0;e<this.editors.length;e++)this.editors[e]&&this.editors[e].enable();this.switcher.disabled=!1,Jn(Xn(i.prototype),"enable",this).call(this)}}},{key:"disable",value:function(e){if(e&&(this.always_disabled=!0),this.editors)for(var t=0;t<this.editors.length;t++)this.editors[t]&&this.editors[t].disable(e);this.switcher.disabled=!0,Jn(Xn(i.prototype),"disable",this).call(this)}},{key:"switchEditor",value:function(e){var t=this;this.editors[e]||this.buildChildEditor(e);var n=this.getValue();this.type=e,this.register(),this.editors.forEach((function(e,r){e&&(t.type===r?(t.keep_values&&e.setValue(n,!0),e.container.style.display=""):e.container.style.display="none")})),this.refreshValue(),this.refreshHeaderText()}},{key:"buildChildEditor",value:function(e){var t,n=this,r=this.types[e],i=this.theme.getChildEditorHolder();this.editor_holder.appendChild(i),"string"==typeof r?(t=d({},this.schema)).type=r:(t=d({},this.schema,r),t=this.jsoneditor.expandRefs(t),r&&r.required&&Array.isArray(r.required)&&this.schema.required&&Array.isArray(this.schema.required)&&(t.required=this.schema.required.concat(r.required)));var o=this.jsoneditor.getEditorClass(t);this.editors[e]=this.jsoneditor.createEditor(o,{jsoneditor:this.jsoneditor,schema:t,container:i,path:this.path,parent:this,required:!0}),this.editors[e].preBuild(),this.editors[e].build(),this.editors[e].postBuild(),this.editors[e].header&&(this.editors[e].header.style.display="none"),this.editors[e].option=this.switcher_options[e],i.addEventListener("change_header_text",(function(){n.refreshHeaderText()})),e!==this.type&&(i.style.display="none")}},{key:"preBuild",value:function(){if(this.types=[],this.type=0,this.editors=[],this.validators=[],this.keep_values=!0,void 0!==this.jsoneditor.options.keep_oneof_values&&(this.keep_values=this.jsoneditor.options.keep_oneof_values),void 0!==this.options.keep_oneof_values&&(this.keep_values=this.options.keep_oneof_values),this.schema.oneOf)this.oneOf=!0,this.types=this.schema.oneOf,delete this.schema.oneOf;else if(this.schema.anyOf)this.anyOf=!0,this.types=this.schema.anyOf,delete this.schema.anyOf;else{if(this.schema.type&&"any"!==this.schema.type)Array.isArray(this.schema.type)?this.types=this.schema.type:this.types=[this.schema.type];else if(this.types=["string","number","integer","boolean","object","array","null"],this.schema.disallow){var e=this.schema.disallow;"object"===Gn(e)&&Array.isArray(e)||(e=[e]);var t=[];this.types.forEach((function(n){e.includes(n)||t.push(n)})),this.types=t}delete this.schema.type}this.display_text=this.getDisplayText(this.types)}},{key:"build",value:function(){var e=this,t=this.container;this.header=this.label=this.theme.getFormInputLabel(this.getTitle(),this.isRequired()),this.container.appendChild(this.header),this.switcher=this.theme.getSwitcher(this.display_text),t.appendChild(this.switcher),this.switcher.addEventListener("change",(function(t){t.preventDefault(),t.stopPropagation(),e.switchEditor(e.display_text.indexOf(t.currentTarget.value)),e.onChange(!0)})),this.editor_holder=document.createElement("div"),t.appendChild(this.editor_holder);var n={};this.jsoneditor.options.custom_validators&&(n.custom_validators=this.jsoneditor.options.custom_validators),this.switcher_options=this.theme.getSwitcherOptions(this.switcher),this.types.forEach((function(t,r){var i;e.editors[r]=!1,"string"==typeof t?(i=d({},e.schema)).type=t:(i=d({},e.schema,t),t.required&&Array.isArray(t.required)&&e.schema.required&&Array.isArray(e.schema.required)&&(i.required=e.schema.required.concat(t.required))),e.validators[r]=new C(e.jsoneditor,i,n,e.defaults)})),this.switchEditor(0)}},{key:"onChildEditorChange",value:function(e){this.editors[this.type]&&(this.refreshValue(),this.refreshHeaderText()),Jn(Xn(i.prototype),"onChildEditorChange",this).call(this)}},{key:"refreshHeaderText",value:function(){var e=this.getDisplayText(this.types);Array.from(this.switcher_options).forEach((function(t,n){t.textContent=e[n]}))}},{key:"refreshValue",value:function(){this.value=this.editors[this.type].getValue()}},{key:"setValue",value:function(e,t){var n=this,r=this.type,i={match:0,extra:0,i:this.type},o={match:0,i:null};this.validators.forEach((function(t,r){var a=null;void 0!==n.anyOf&&n.anyOf&&(a=t.fitTest(e),(i.match<a.match||i.match===a.match&&i.extra>a.extra)&&((i=a).i=r)),t.validate(e).length||null!==o.i||(o.i=r,null!==a&&(o.match=a.match))}));var a=o.i;void 0!==this.anyOf&&this.anyOf&&o.match<i.match&&(a=i.i),null===a&&(a=this.type),this.type=a,this.switcher.value=this.display_text[a];var s=this.type!==r;s&&this.switchEditor(this.type),this.editors[this.type].setValue(e,t),this.refreshValue(),this.onChange(s)}},{key:"destroy",value:function(){this.editors.forEach((function(e){e&&e.destroy()})),this.editor_holder&&this.editor_holder.parentNode&&this.editor_holder.parentNode.removeChild(this.editor_holder),this.switcher&&this.switcher.parentNode&&this.switcher.parentNode.removeChild(this.switcher),Jn(Xn(i.prototype),"destroy",this).call(this)}},{key:"showValidationErrors",value:function(e){var t=this;if(this.oneOf||this.anyOf){var n=this.oneOf?"oneOf":"anyOf";this.editors.forEach((function(r,i){if(r){var o="".concat(t.path,".").concat(n,"[").concat(i,"]");r.showValidationErrors(e.reduce((function(e,n){if(n.path.startsWith(o)||n.path===o.substr(0,n.path.length)){var r=d({},n);r.path=t.path+r.path.substr(o.length),e.push(r)}return e}),[]))}}))}else this.editors.forEach((function(t){t&&t.showValidationErrors(e)}))}},{key:"addLinks",value:function(){}}])&&Qn(t.prototype,n),i}(L);function tr(e){return(tr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function nr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function rr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ir(e,t){return(ir=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function or(e,t){return!t||"object"!==tr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ar(e){return(ar=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var sr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ir(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ar(e);if(t){var i=ar(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return or(this,n)}}(i);function i(){return nr(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"getValue",value:function(){if(this.dependenciesFulfilled)return null}},{key:"setValue",value:function(){this.onChange()}},{key:"getNumColumns",value:function(){return 2}}])&&rr(t.prototype,n),i}(L);function lr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ur(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?lr(Object(n),!0).forEach((function(t){cr(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):lr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function cr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function fr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}(e,t)||function(e,t){if(e){if("string"==typeof e)return dr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?dr(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function dr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function pr(e){return(pr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function hr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function yr(e,t,n){return(yr="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=br(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function mr(e,t){return(mr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function vr(e,t){return!t||"object"!==pr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function br(e){return(br=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}n(158),n(159);var gr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&mr(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=br(e);if(t){var i=br(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return vr(this,n)}}(i);function i(e,t,n){var o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(o=r.call(this,e,t)).currentDepth=n,o}return t=i,(n=[{key:"getDefault",value:function(){return d({},this.schema.default||{})}},{key:"getChildEditors",value:function(){return this.editors}},{key:"register",value:function(){yr(br(i.prototype),"register",this).call(this),this.editors&&Object.values(this.editors).forEach((function(e){return e.register()}))}},{key:"unregister",value:function(){yr(br(i.prototype),"unregister",this).call(this),this.editors&&Object.values(this.editors).forEach((function(e){return e.unregister()}))}},{key:"getNumColumns",value:function(){return Math.max(Math.min(12,this.maxwidth),3)}},{key:"enable",value:function(){this.always_disabled||(this.editjson_control&&(this.editjson_control.disabled=!1),this.addproperty_button&&(this.addproperty_button.disabled=!1),yr(br(i.prototype),"enable",this).call(this),this.editors&&Object.values(this.editors).forEach((function(e){e.isActive()&&e.enable(),e.optInCheckbox.disabled=!1})))}},{key:"disable",value:function(e){e&&(this.always_disabled=!0),this.editjson_control&&(this.editjson_control.disabled=!0),this.addproperty_button&&(this.addproperty_button.disabled=!0),this.hideEditJSON(),yr(br(i.prototype),"disable",this).call(this),this.editors&&Object.values(this.editors).forEach((function(t){t.isActive()&&t.disable(e),t.optInCheckbox.disabled=!0}))}},{key:"layoutEditors",value:function(){var e,t,n=this;if(this.row_container){var r;this.property_order=Object.keys(this.editors),this.property_order=this.property_order.sort((function(e,t){var r=n.editors[e].schema.propertyOrder,i=n.editors[t].schema.propertyOrder;return"number"!=typeof r&&(r=1e3),"number"!=typeof i&&(i=1e3),r-i}));var i,o="categories"===this.format,a=[],s=null,l=null;if("grid-strict"===this.format){var u=0;if(i=[],this.property_order.forEach((function(e){var t=n.editors[e];if(!t.property_removed){var r=t.options.hidden?0:t.options.grid_columns||t.getNumColumns(),o=t.options.hidden?0:t.options.grid_offset||0,s=!t.options.hidden&&(t.options.grid_break||!1),l={key:e,width:r,offset:o,height:t.options.hidden?0:t.container.offsetHeight};i.push(l),a[u]=i,s&&(u++,i=[])}})),this.layout===JSON.stringify(a))return!1;for(this.layout=JSON.stringify(a),r=document.createElement("div"),e=0;e<a.length;e++)for(i=this.theme.getGridRow(),r.appendChild(i),t=0;t<a[e].length;t++)s=a[e][t].key,(l=this.editors[s]).options.hidden?l.container.style.display="none":this.theme.setGridColumnSize(l.container,a[e][t].width,a[e][t].offset),i.appendChild(l.container)}else if("grid"===this.format){for(this.property_order.forEach((function(e){var t=n.editors[e];if(!t.property_removed){for(var r=!1,i=t.options.hidden?0:t.options.grid_columns||t.getNumColumns(),o=t.options.hidden?0:t.container.offsetHeight,s=0;s<a.length;s++)a[s].width+i<=12&&(!o||.5*a[s].minh<o&&2*a[s].maxh>o)&&(r=s);!1===r&&(a.push({width:0,minh:999999,maxh:0,editors:[]}),r=a.length-1),a[r].editors.push({key:e,width:i,height:o}),a[r].width+=i,a[r].minh=Math.min(a[r].minh,o),a[r].maxh=Math.max(a[r].maxh,o)}})),e=0;e<a.length;e++)if(a[e].width<12){var c=!1,f=0;for(t=0;t<a[e].editors.length;t++)(!1===c||a[e].editors[t].width>a[e].editors[c].width)&&(c=t),a[e].editors[t].width*=12/a[e].width,a[e].editors[t].width=Math.floor(a[e].editors[t].width),f+=a[e].editors[t].width;f<12&&(a[e].editors[c].width+=12-f),a[e].width=12}if(this.layout===JSON.stringify(a))return!1;for(this.layout=JSON.stringify(a),r=document.createElement("div"),e=0;e<a.length;e++)for(i=this.theme.getGridRow(),r.appendChild(i),t=0;t<a[e].editors.length;t++)s=a[e].editors[t].key,(l=this.editors[s]).options.hidden?l.container.style.display="none":this.theme.setGridColumnSize(l.container,a[e].editors[t].width),i.appendChild(l.container)}else{if(r=document.createElement("div"),o){var d=document.createElement("div"),h=this.theme.getTopTabHolder(this.schema.title),y=this.theme.getTopTabContentHolder(h);for(this.property_order.forEach((function(e){var t=n.editors[e];if(!t.property_removed){var r=n.theme.getTabContent(),i=t.schema&&("object"===t.schema.type||"array"===t.schema.type);r.isObjOrArray=i;var o=n.theme.getGridRow();t.tab||(void 0===n.basicPane?n.addRow(t,h,r):n.addRow(t,h,n.basicPane)),r.id=n.getValidId(t.tab_text.textContent),i?(r.appendChild(o),y.appendChild(r),n.theme.addTopTab(h,t.tab)):(d.appendChild(o),y.childElementCount>0?y.firstChild.isObjOrArray&&(r.appendChild(d),y.insertBefore(r,y.firstChild),n.theme.insertBasicTopTab(t.tab,h),t.basicPane=r):(r.appendChild(d),y.appendChild(r),n.theme.addTopTab(h,t.tab),t.basicPane=r)),t.options.hidden?t.container.style.display="none":n.theme.setGridColumnSize(t.container,12),o.appendChild(t.container),t.rowPane=r}}));this.tabPanesContainer.firstChild;)this.tabPanesContainer.removeChild(this.tabPanesContainer.firstChild);var m=this.tabs_holder.parentNode;m.removeChild(m.firstChild),m.appendChild(h),this.tabPanesContainer=y,this.tabs_holder=h;var v=this.theme.getFirstTab(this.tabs_holder);return void(v&&p(v,"click"))}this.property_order.forEach((function(e){var t=n.editors[e];t.property_removed||(i=n.theme.getGridRow(),r.appendChild(i),t.options.hidden?t.container.style.display="none":n.theme.setGridColumnSize(t.container,12),i.appendChild(t.container))}))}for(;this.row_container.firstChild;)this.row_container.removeChild(this.row_container.firstChild);this.row_container.appendChild(r)}}},{key:"getPropertySchema",value:function(e){var t=this,n=this.schema.properties[e]||{};n=d({},n);var r=!!this.schema.properties[e];return this.schema.patternProperties&&Object.keys(this.schema.patternProperties).forEach((function(i){new RegExp(i).test(e)&&(n.allOf=n.allOf||[],n.allOf.push(t.schema.patternProperties[i]),r=!0)})),!r&&this.schema.additionalProperties&&"object"===pr(this.schema.additionalProperties)&&(n=d({},this.schema.additionalProperties)),n}},{key:"preBuild",value:function(){var e=this;if(yr(br(i.prototype),"preBuild",this).call(this),this.editors={},this.cached_editors={},this.format=this.options.layout||this.options.object_layout||this.schema.format||this.jsoneditor.options.object_layout||"normal",this.schema.properties=this.schema.properties||{},this.minwidth=0,this.maxwidth=0,this.options.table_row)Object.entries(this.schema.properties).forEach((function(t){var n=fr(t,2),r=n[0],i=n[1],o=e.jsoneditor.getEditorClass(i);e.editors[r]=e.jsoneditor.createEditor(o,{jsoneditor:e.jsoneditor,schema:i,path:"".concat(e.path,".").concat(r),parent:e,compact:!0,required:!0},e.currentDepth+1),e.editors[r].preBuild();var a=e.editors[r].options.hidden?0:e.editors[r].options.grid_columns||e.editors[r].getNumColumns();e.minwidth+=a,e.maxwidth+=a})),this.no_link_holder=!0;else{if(this.options.table)throw new Error("Not supported yet");this.schema.defaultProperties||(this.jsoneditor.options.display_required_only||this.options.display_required_only?this.schema.defaultProperties=Object.keys(this.schema.properties).filter((function(t){return e.isRequiredObject({key:t,schema:e.schema.properties[t]})})):this.schema.defaultProperties=Object.keys(this.schema.properties)),this.maxwidth+=1,Array.isArray(this.schema.defaultProperties)&&this.schema.defaultProperties.forEach((function(t){e.addObjectProperty(t,!0),e.editors[t]&&(e.minwidth=Math.max(e.minwidth,e.editors[t].options.grid_columns||e.editors[t].getNumColumns()),e.maxwidth+=e.editors[t].options.grid_columns||e.editors[t].getNumColumns())}))}this.property_order=Object.keys(this.editors),this.property_order=this.property_order.sort((function(t,n){var r=e.editors[t].schema.propertyOrder,i=e.editors[n].schema.propertyOrder;return"number"!=typeof r&&(r=1e3),"number"!=typeof i&&(i=1e3),r-i}))}},{key:"addTab",value:function(e){var t=this,n=this.rows[e].schema&&("object"===this.rows[e].schema.type||"array"===this.rows[e].schema.type);this.tabs_holder&&(this.rows[e].tab_text=document.createElement("span"),this.rows[e].tab_text.textContent=n?this.rows[e].getHeaderText():void 0===this.schema.basicCategoryTitle?"Basic":this.schema.basicCategoryTitle,this.rows[e].tab=this.theme.getTopTab(this.rows[e].tab_text,this.getValidId(this.rows[e].tab_text.textContent)),this.rows[e].tab.addEventListener("click",(function(n){t.active_tab=t.rows[e].tab,t.refreshTabs(),n.preventDefault(),n.stopPropagation()})))}},{key:"addRow",value:function(e,t,n){var r=this.rows.length,i="object"===e.schema.type||"array"===e.schema.type;this.rows[r]=e,this.rows[r].rowPane=n,i?(this.addTab(r),this.theme.addTopTab(t,this.rows[r].tab)):void 0===this.basicTab?(this.addTab(r),this.basicTab=r,this.basicPane=n,this.theme.addTopTab(t,this.rows[r].tab)):(this.rows[r].tab=this.rows[this.basicTab].tab,this.rows[r].tab_text=this.rows[this.basicTab].tab_text,this.rows[r].rowPane=this.rows[this.basicTab].rowPane)}},{key:"refreshTabs",value:function(e){var t=this,n=void 0!==this.basicTab,r=!1;this.rows.forEach((function(i){i.tab&&i.rowPane&&i.rowPane.parentNode&&(n&&i.tab===t.rows[t.basicTab].tab&&r||(e?i.tab_text.textContent=i.getHeaderText():(n&&i.tab===t.rows[t.basicTab].tab&&(r=!0),i.tab===t.active_tab?t.theme.markTabActive(i):t.theme.markTabInactive(i))))}))}},{key:"build",value:function(){var e=this,t="categories"===this.format;if(this.rows=[],this.active_tab=null,this.options.table_row)this.editor_holder=this.container,Object.entries(this.editors).forEach((function(t){var n=fr(t,2),r=n[0],i=n[1],o=e.theme.getTableCell();e.editor_holder.appendChild(o),i.setContainer(o),i.build(),i.postBuild(),i.setOptInCheckbox(i.header),e.editors[r].options.hidden&&(o.style.display="none"),e.editors[r].options.input_width&&(o.style.width=e.editors[r].options.input_width)}));else{if(this.options.table)throw new Error("Not supported yet");this.header="",this.options.compact||(this.header=document.createElement("label"),this.header.textContent=this.getTitle()),this.title=this.theme.getHeader(this.header),this.title.classList.add("je-object__title"),this.controls=this.theme.getButtonHolder(),this.controls.classList.add("je-object__controls"),this.container.appendChild(this.title),this.container.appendChild(this.controls),this.container.classList.add("je-object__container"),this.editjson_holder=this.theme.getModal(),this.editjson_textarea=this.theme.getTextareaInput(),this.editjson_textarea.classList.add("je-edit-json--textarea"),this.editjson_save=this.getButton("button_save","save","button_save"),this.editjson_save.classList.add("json-editor-btntype-save"),this.editjson_save.addEventListener("click",(function(t){t.preventDefault(),t.stopPropagation(),e.saveJSON()})),this.editjson_copy=this.getButton("button_copy","copy","button_copy"),this.editjson_copy.classList.add("json-editor-btntype-copy"),this.editjson_copy.addEventListener("click",(function(t){t.preventDefault(),t.stopPropagation(),e.copyJSON()})),this.editjson_cancel=this.getButton("button_cancel","cancel","button_cancel"),this.editjson_cancel.classList.add("json-editor-btntype-cancel"),this.editjson_cancel.addEventListener("click",(function(t){t.preventDefault(),t.stopPropagation(),e.hideEditJSON()})),this.editjson_holder.appendChild(this.editjson_textarea),this.editjson_holder.appendChild(this.editjson_save),this.editjson_holder.appendChild(this.editjson_copy),this.editjson_holder.appendChild(this.editjson_cancel),this.addproperty_holder=this.theme.getModal(),this.addproperty_list=document.createElement("div"),this.addproperty_list.classList.add("property-selector"),this.addproperty_add=this.getButton("button_add","add","button_add"),this.addproperty_add.classList.add("json-editor-btntype-add"),this.addproperty_input=this.theme.getFormInputField("text"),this.addproperty_input.setAttribute("placeholder","Property name..."),this.addproperty_input.classList.add("property-selector-input"),this.addproperty_add.addEventListener("click",(function(t){if(t.preventDefault(),t.stopPropagation(),e.addproperty_input.value){if(e.editors[e.addproperty_input.value])return void window.alert("there is already a property with that name");e.addObjectProperty(e.addproperty_input.value),e.editors[e.addproperty_input.value]&&e.editors[e.addproperty_input.value].disable(),e.onChange(!0)}})),this.addproperty_input.addEventListener("input",(function(e){e.target.previousSibling.childNodes.forEach((function(t){t.innerText.includes(e.target.value)?t.style.display="":t.style.display="none"}))})),this.addproperty_holder.appendChild(this.addproperty_list),this.addproperty_holder.appendChild(this.addproperty_input),this.addproperty_holder.appendChild(this.addproperty_add);var n=document.createElement("div");n.style.clear="both",this.addproperty_holder.appendChild(n),document.addEventListener("click",this.onOutsideModalClick),this.schema.description&&(this.description=this.theme.getDescription(this.schema.description),this.container.appendChild(this.description)),this.error_holder=document.createElement("div"),this.container.appendChild(this.error_holder),this.editor_holder=this.theme.getIndentedPanel(),this.container.appendChild(this.editor_holder),this.row_container=this.theme.getGridContainer(),t?(this.tabs_holder=this.theme.getTopTabHolder(this.getValidId(this.schema.title)),this.tabPanesContainer=this.theme.getTopTabContentHolder(this.tabs_holder),this.editor_holder.appendChild(this.tabs_holder)):(this.tabs_holder=this.theme.getTabHolder(this.getValidId(this.schema.title)),this.tabPanesContainer=this.theme.getTabContentHolder(this.tabs_holder),this.editor_holder.appendChild(this.row_container)),Object.values(this.editors).forEach((function(n){var r=e.theme.getTabContent(),i=e.theme.getGridColumn(),o=!(!n.schema||"object"!==n.schema.type&&"array"!==n.schema.type);if(r.isObjOrArray=o,t){if(o){var a=e.theme.getGridContainer();a.appendChild(i),r.appendChild(a),e.tabPanesContainer.appendChild(r),e.row_container=a}else void 0===e.row_container_basic&&(e.row_container_basic=e.theme.getGridContainer(),r.appendChild(e.row_container_basic),0===e.tabPanesContainer.childElementCount?e.tabPanesContainer.appendChild(r):e.tabPanesContainer.insertBefore(r,e.tabPanesContainer.childNodes[1])),e.row_container_basic.appendChild(i);e.addRow(n,e.tabs_holder,r),r.id=e.getValidId(n.schema.title)}else e.row_container.appendChild(i);n.setContainer(i),n.build(),n.postBuild(),n.setOptInCheckbox(n.header)})),this.rows[0]&&p(this.rows[0].tab,"click"),this.collapsed=!1,this.collapse_control=this.getButton("","collapse","button_collapse"),this.collapse_control.classList.add("json-editor-btntype-toggle"),this.title.insertBefore(this.collapse_control,this.title.childNodes[0]),this.collapse_control.addEventListener("click",(function(t){t.preventDefault(),t.stopPropagation(),e.collapsed?(e.editor_holder.style.display="",e.collapsed=!1,e.setButtonText(e.collapse_control,"","collapse","button_collapse")):(e.editor_holder.style.display="none",e.collapsed=!0,e.setButtonText(e.collapse_control,"","expand","button_expand"))})),this.options.collapsed&&p(this.collapse_control,"click"),this.schema.options&&void 0!==this.schema.options.disable_collapse?this.schema.options.disable_collapse&&(this.collapse_control.style.display="none"):this.jsoneditor.options.disable_collapse&&(this.collapse_control.style.display="none"),this.editjson_control=this.getButton("JSON","edit","button_edit_json"),this.editjson_control.classList.add("json-editor-btntype-editjson"),this.editjson_control.addEventListener("click",(function(t){t.preventDefault(),t.stopPropagation(),e.toggleEditJSON()})),this.controls.appendChild(this.editjson_control),this.controls.insertBefore(this.editjson_holder,this.controls.childNodes[0]),this.schema.options&&void 0!==this.schema.options.disable_edit_json?this.schema.options.disable_edit_json&&(this.editjson_control.style.display="none"):this.jsoneditor.options.disable_edit_json&&(this.editjson_control.style.display="none"),this.addproperty_button=this.getButton("properties","edit_properties","button_object_properties"),this.addproperty_button.classList.add("json-editor-btntype-properties"),this.addproperty_button.addEventListener("click",(function(t){t.preventDefault(),t.stopPropagation(),e.toggleAddProperty()})),this.controls.appendChild(this.addproperty_button),this.controls.insertBefore(this.addproperty_holder,this.controls.childNodes[1]),this.refreshAddProperties(),this.deactivateNonRequiredProperties()}this.options.table_row?(this.editor_holder=this.container,this.property_order.forEach((function(t){e.editor_holder.appendChild(e.editors[t].container)}))):(this.layoutEditors(),this.layoutEditors())}},{key:"deactivateNonRequiredProperties",value:function(){var e=this;(this.jsoneditor.options.show_opt_in||this.options.show_opt_in)&&Object.entries(this.editors).forEach((function(t){var n=fr(t,2),r=n[0],i=n[1];e.isRequiredObject(i)||e.editors[r].deactivate()}))}},{key:"showEditJSON",value:function(){this.editjson_holder&&(this.hideAddProperty(),this.editjson_holder.style.left="".concat(this.editjson_control.offsetLeft,"px"),this.editjson_holder.style.top="".concat(this.editjson_control.offsetTop+this.editjson_control.offsetHeight,"px"),this.editjson_textarea.value=JSON.stringify(this.getValue(),null,2),this.disable(),this.editjson_holder.style.display="",this.editjson_control.disabled=!1,this.editing_json=!0)}},{key:"hideEditJSON",value:function(){this.editjson_holder&&this.editing_json&&(this.editjson_holder.style.display="none",this.enable(),this.editing_json=!1)}},{key:"copyJSON",value:function(){if(this.editjson_holder){var e=document.createElement("textarea");e.value=this.editjson_textarea.value,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e),e.select(),document.execCommand("copy"),document.body.removeChild(e)}}},{key:"saveJSON",value:function(){if(this.editjson_holder)try{var e=JSON.parse(this.editjson_textarea.value);this.setValue(e),this.hideEditJSON(),this.onChange(!0)}catch(e){throw window.alert("invalid JSON"),e}}},{key:"toggleEditJSON",value:function(){this.editing_json?this.hideEditJSON():this.showEditJSON()}},{key:"insertPropertyControlUsingPropertyOrder",value:function(e,t,n){var r;this.schema.properties[e]&&(r=this.schema.properties[e].propertyOrder),"number"!=typeof r&&(r=1e3),t.propertyOrder=r;for(var i=0;i<n.childNodes.length;i++){var o=n.childNodes[i];if(t.propertyOrder<o.propertyOrder){this.addproperty_list.insertBefore(t,o),t=null;break}}t&&this.addproperty_list.appendChild(t)}},{key:"addPropertyCheckbox",value:function(e){var t,n=this,r=this.theme.getCheckbox();r.style.width="auto",t=this.schema.properties[e]&&this.schema.properties[e].title?this.schema.properties[e].title:e;var i=this.theme.getCheckboxLabel(t),o=this.theme.getFormControl(i,r);return o.style.paddingBottom=o.style.marginBottom=o.style.paddingTop=o.style.marginTop=0,o.style.height="auto",this.insertPropertyControlUsingPropertyOrder(e,o,this.addproperty_list),r.checked=e in this.editors,r.addEventListener("change",(function(){r.checked?n.addObjectProperty(e):n.removeObjectProperty(e),n.onChange(!0)})),this.addproperty_checkboxes[e]=r,r}},{key:"showAddProperty",value:function(){this.addproperty_holder&&(this.hideEditJSON(),this.addproperty_holder.style.left="".concat(this.addproperty_button.offsetLeft,"px"),this.addproperty_holder.style.top="".concat(this.addproperty_button.offsetTop+this.addproperty_button.offsetHeight,"px"),this.disable(),this.adding_property=!0,this.addproperty_button.disabled=!1,this.addproperty_holder.style.display="",this.refreshAddProperties())}},{key:"hideAddProperty",value:function(){this.addproperty_holder&&this.adding_property&&(this.addproperty_holder.style.display="none",this.enable(),this.adding_property=!1)}},{key:"toggleAddProperty",value:function(){this.adding_property?this.hideAddProperty():this.showAddProperty()}},{key:"removeObjectProperty",value:function(e){this.editors[e]&&(this.editors[e].unregister(),delete this.editors[e],this.refreshValue(),this.layoutEditors())}},{key:"getSchemaOnMaxDepth",value:function(e){return Object.keys(e).reduce((function(t,n){switch(n){case"$ref":return t;case"properties":case"items":return ur(ur({},t),{},cr({},n,{}));case"additionalProperties":case"propertyNames":return ur(ur({},t),{},cr({},n,!0));default:return ur(ur({},t),{},cr({},n,e[n]))}}),{})}},{key:"addObjectProperty",value:function(e,t){if(!this.editors[e]){if(this.cached_editors[e]){if(this.editors[e]=this.cached_editors[e],t)return;this.editors[e].register()}else{if(!(this.canHaveAdditionalProperties()||this.schema.properties&&this.schema.properties[e]))return;var n=this.getPropertySchema(e);"number"!=typeof n.propertyOrder&&(n.propertyOrder=Object.keys(this.editors).length+1e3);var r=this.jsoneditor.getEditorClass(n),i=this.jsoneditor.options.max_depth;if(this.editors[e]=this.jsoneditor.createEditor(r,{jsoneditor:this.jsoneditor,schema:i&&this.currentDepth>=i?this.getSchemaOnMaxDepth(n):n,path:"".concat(this.path,".").concat(e),parent:this},this.currentDepth+1),this.editors[e].preBuild(),!t){var o=this.theme.getChildEditorHolder();this.editor_holder.appendChild(o),this.editors[e].setContainer(o),this.editors[e].build(),this.editors[e].postBuild(),this.editors[e].setOptInCheckbox(r.header),this.editors[e].activate()}this.cached_editors[e]=this.editors[e]}t||(this.refreshValue(),this.layoutEditors())}}},{key:"onOutsideModalClick",value:function(e){this.addproperty_holder&&!this.addproperty_holder.contains(e.path[0]||e.composedPath()[0])&&this.adding_property&&(e.preventDefault(),e.stopPropagation(),this.toggleAddProperty())}},{key:"onChildEditorChange",value:function(e){this.refreshValue(),yr(br(i.prototype),"onChildEditorChange",this).call(this,e)}},{key:"canHaveAdditionalProperties",value:function(){return"boolean"==typeof this.schema.additionalProperties?this.schema.additionalProperties:!this.jsoneditor.options.no_additional_properties}},{key:"destroy",value:function(){Object.values(this.cached_editors).forEach((function(e){return e.destroy()})),this.editor_holder&&(this.editor_holder.innerHTML=""),this.title&&this.title.parentNode&&this.title.parentNode.removeChild(this.title),this.error_holder&&this.error_holder.parentNode&&this.error_holder.parentNode.removeChild(this.error_holder),this.editors=null,this.cached_editors=null,this.editor_holder&&this.editor_holder.parentNode&&this.editor_holder.parentNode.removeChild(this.editor_holder),this.editor_holder=null,document.removeEventListener("click",this.onOutsideModalClick),yr(br(i.prototype),"destroy",this).call(this)}},{key:"getValue",value:function(){if(this.dependenciesFulfilled){var e=yr(br(i.prototype),"getValue",this).call(this);return e&&(this.jsoneditor.options.remove_empty_properties||this.options.remove_empty_properties)&&Object.keys(e).forEach((function(t){var n;(void 0===(n=e[t])||""===n||n===Object(n)&&0===Object.keys(n).length&&n.constructor===Object)&&delete e[t]})),e}}},{key:"refreshValue",value:function(){var e=this;this.value={},Object.keys(this.editors).forEach((function(t){e.editors[t].isActive()&&(e.value[t]=e.editors[t].getValue())})),this.adding_property&&this.refreshAddProperties()}},{key:"refreshAddProperties",value:function(){var e=this;if(this.options.disable_properties||!1!==this.options.disable_properties&&this.jsoneditor.options.disable_properties)this.addproperty_button.style.display="none";else{var t,n=0,r=!1;Object.keys(this.editors).forEach((function(e){return n++})),t=this.canHaveAdditionalProperties()&&!(void 0!==this.schema.maxProperties&&n>=this.schema.maxProperties),this.addproperty_checkboxes&&(this.addproperty_list.innerHTML=""),this.addproperty_checkboxes={},Object.keys(this.cached_editors).forEach((function(i){e.addPropertyCheckbox(i),e.isRequiredObject(e.cached_editors[i])&&i in e.editors&&(e.addproperty_checkboxes[i].disabled=!0),void 0!==e.schema.minProperties&&n<=e.schema.minProperties?(e.addproperty_checkboxes[i].disabled=e.addproperty_checkboxes[i].checked,e.addproperty_checkboxes[i].checked||(r=!0)):i in e.editors?r=!0:t||y(e.schema.properties,i)?(e.addproperty_checkboxes[i].disabled=!1,r=!0):e.addproperty_checkboxes[i].disabled=!0})),this.canHaveAdditionalProperties()&&(r=!0),Object.keys(this.schema.properties).forEach((function(t){e.cached_editors[t]||(r=!0,e.addPropertyCheckbox(t))})),r?this.canHaveAdditionalProperties()?this.addproperty_add.disabled=!t:(this.addproperty_add.style.display="none",this.addproperty_input.style.display="none"):(this.hideAddProperty(),this.addproperty_button.style.display="none")}}},{key:"isRequiredObject",value:function(e){if(e)return"boolean"==typeof e.schema.required?e.schema.required:Array.isArray(this.schema.required)?this.schema.required.includes(e.key):!!this.jsoneditor.options.required_by_default}},{key:"setValue",value:function(e,t){var n=this;("object"!==pr(e=e||{})||Array.isArray(e))&&(e={}),Object.entries(this.cached_editors).forEach((function(r){var i=fr(r,2),o=i[0],a=i[1];void 0!==e[o]?(n.addObjectProperty(o),a.setValue(e[o],t)):t||n.isRequiredObject(a)?a.setValue(a.getDefault(),t):n.removeObjectProperty(o)})),Object.entries(e).forEach((function(e){var r=fr(e,2),i=r[0],o=r[1];n.cached_editors[i]||(n.addObjectProperty(i),n.editors[i]&&n.editors[i].setValue(o,t,!!n.editors[i].template))})),this.refreshValue(),this.layoutEditors(),this.onChange()}},{key:"showValidationErrors",value:function(e){var t=this,n=[],r=[];e.forEach((function(e){e.path===t.path?n.push(e):r.push(e)})),this.error_holder&&(n.length?(this.error_holder.innerHTML="",this.error_holder.style.display="",n.forEach((function(e){e.errorcount&&e.errorcount>1&&(e.message+=" (".concat(e.errorcount," errors)")),t.error_holder.appendChild(t.theme.getErrorMessage(e.message))}))):this.error_holder.style.display="none"),this.options.table_row&&(n.length?this.theme.addTableRowError(this.container):this.theme.removeTableRowError(this.container)),Object.values(this.editors).forEach((function(e){e.showValidationErrors(r)}))}}])&&hr(t.prototype,n),i}(L);function _r(e){return(_r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function wr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function kr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xr(e,t,n){return(xr="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Or(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Cr(e,t){return(Cr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Er(e,t){return!t||"object"!==_r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Or(e){return(Or=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}gr.rules={".je-object__title":"display:inline-block",".je-object__controls":"margin:0%200%200%2010px",".je-object__container":"position:relative",".je-object__property-checkbox":"margin:0;height:auto",".property-selector":"width:295px;max-height:160px;padding:5px%200;overflow-y:auto;overflow-x:hidden;padding-left:5px",".property-selector-input":"width:220px;margin-bottom:0;display:inline-block",".json-editor-btntype-toggle":"margin:0%2010px%200%200",".je-edit-json--textarea":"height:170px%20!important;width:300px%20!important;display:block"};var Sr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Cr(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Or(e);if(t){var i=Or(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Er(this,n)}}(i);function i(){return wr(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"preBuild",value:function(){this.schema.required=!0,xr(Or(i.prototype),"preBuild",this).call(this)}},{key:"build",value:function(){var e=this;this.label="",this.options.compact||(this.header=this.label=this.theme.getFormInputLabel(this.getTitle(),this.isRequired())),this.schema.description&&(this.description=this.theme.getFormInputDescription(this.schema.description)),this.options.infoText&&(this.infoButton=this.theme.getInfoButton(this.options.infoText)),this.options.compact&&this.container.classList.add("compact"),this.radioContainer=document.createElement("div"),this.radioGroup=[];for(var t=function(t){e.setValue(t.currentTarget.value),e.onChange(!0)},n=0;n<this.enum_values.length;n++){this.input=this.theme.getFormRadio({name:this.formname,id:"".concat(this.formname,"[").concat(n,"]"),value:this.enum_values[n]}),this.setInputAttributes(["id","value","name"]),this.input.addEventListener("change",t,!1),this.radioGroup.push(this.input);var r=this.theme.getFormRadioLabel(this.enum_display[n]);r.htmlFor=this.input.id;var i=this.theme.getFormRadioControl(r,this.input,!("horizontal"!==this.options.layout&&!this.options.compact));this.radioContainer.appendChild(i)}(this.schema.readOnly||this.schema.readonly)&&this.disable(!0);var o=this.theme.getContainer();o.appendChild(this.radioContainer),o.dataset.containerFor="radio",this.input=o,this.control=this.theme.getFormControl(this.label,o,this.description,this.infoButton),this.container.appendChild(this.control),window.requestAnimationFrame((function(){e.input.parentNode&&e.afterInputReady()}))}},{key:"enable",value:function(){if(!this.always_disabled){for(var e=0;e<this.radioGroup.length;e++)this.radioGroup[e].disabled=!1;this.radioContainer.classList.remove("readonly"),xr(Or(i.prototype),"enable",this).call(this)}}},{key:"disable",value:function(e){e&&(this.always_disabled=!0);for(var t=0;t<this.radioGroup.length;t++)this.radioGroup[t].disabled=!0;this.radioContainer.classList.add("readonly"),xr(Or(i.prototype),"disable",this).call(this)}},{key:"destroy",value:function(){this.radioContainer.parentNode&&this.radioContainer.parentNode.parentNode&&this.radioContainer.parentNode.parentNode.removeChild(this.radioContainer.parentNode),this.label&&this.label.parentNode&&this.label.parentNode.removeChild(this.label),this.description&&this.description.parentNode&&this.description.parentNode.removeChild(this.description),xr(Or(i.prototype),"destroy",this).call(this)}},{key:"getNumColumns",value:function(){return 2}},{key:"setValue",value:function(e){for(var t=0;t<this.radioGroup.length;t++)if(this.radioGroup[t].value===e){this.radioGroup[t].checked=!0,this.value=e,this.onChange();break}}}])&&kr(t.prototype,n),i}(_t);function jr(e){return(jr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ar(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Pr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Tr(e,t,n){return(Tr="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Ir(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Rr(e,t){return(Rr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Lr(e,t){return!t||"object"!==jr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ir(e){return(Ir=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Nr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Rr(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ir(e);if(t){var i=Ir(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Lr(this,n)}}(i);function i(){return Ar(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"setValue",value:function(e,t,n){var r=Tr(Ir(i.prototype),"setValue",this).call(this,e,t,n);void 0!==r&&r.changed&&this.sceditor_instance&&this.sceditor_instance.val(r.value)}},{key:"build",value:function(){this.options.format="textarea",Tr(Ir(i.prototype),"build",this).call(this),this.input_type=this.schema.format,this.input.setAttribute("data-schemaformat",this.input_type)}},{key:"afterInputReady",value:function(){var e=this;if(window.sceditor){var t=this.expandCallbacks("sceditor",d({},{format:this.input_type,emoticonsEnabled:!1,width:"100%",height:300,readOnly:this.schema.readOnly||this.schema.readonly||this.schema.template},this.defaults.options.sceditor||{},this.options.sceditor||{},{element:this.input})),n=window.sceditor.instance(this.input);void 0===n&&window.sceditor.create(this.input,t),this.sceditor_instance=n||window.sceditor.instance(this.input),this.sceditor_instance.blur((function(){e.value=e.sceditor_instance.val(),e.sceditor_instance.updateOriginal(),e.is_dirty=!0,e.onChange(!0)})),this.theme.afterInputReady(this.input)}else Tr(Ir(i.prototype),"afterInputReady",this).call(this)}},{key:"getNumColumns",value:function(){return 6}},{key:"enable",value:function(){!this.always_disabled&&this.sceditor_instance&&this.sceditor_instance.readOnly(!1),Tr(Ir(i.prototype),"enable",this).call(this)}},{key:"disable",value:function(e){this.sceditor_instance&&this.sceditor_instance.readOnly(!0),Tr(Ir(i.prototype),"disable",this).call(this,e)}},{key:"destroy",value:function(){this.sceditor_instance&&(this.sceditor_instance.destroy(),this.sceditor_instance=null),Tr(Ir(i.prototype),"destroy",this).call(this)}}])&&Pr(t.prototype,n),i}(V);function Br(e){return(Br="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Dr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Mr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Fr(e,t,n){return(Fr="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Hr(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function zr(e,t){return(zr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Vr(e,t){return!t||"object"!==Br(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Hr(e){return(Hr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ur=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&zr(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Hr(e);if(t){var i=Hr(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Vr(this,n)}}(i);function i(){return Dr(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"setValue",value:function(e,t){if(this.select2_instance){t?this.is_dirty=!1:"change"===this.jsoneditor.options.show_errors&&(this.is_dirty=!0);var n=this.updateValue(e);this.input.value=n,this.select2v4?this.select2_instance.val(n).trigger("change"):this.select2_instance.select2("val",n),this.onChange(!0)}else Fr(Hr(i.prototype),"setValue",this).call(this,e,t)}},{key:"afterInputReady",value:function(){var e=this;if(window.jQuery&&window.jQuery.fn&&window.jQuery.fn.select2&&!this.select2_instance){var t=this.expandCallbacks("select2",d({},this.defaults.options.select2||{},this.options.select2||{}));this.newEnumAllowed=t.tags=!!t.tags&&"string"===this.schema.type,this.select2_instance=window.jQuery(this.input).select2(t),this.select2v4=y(this.select2_instance.select2,"amd"),this.selectChangeHandler=function(){var t=e.select2v4?e.select2_instance.val():e.select2_instance.select2("val");e.updateValue(t),e.onChange(!0)},this.select2_instance.on("change",this.selectChangeHandler),this.select2_instance.on("select2-blur",this.selectChangeHandler)}Fr(Hr(i.prototype),"afterInputReady",this).call(this)}},{key:"updateValue",value:function(e){var t=this.enum_values[0];return e=this.typecast(e||""),this.enum_values.includes(e)?t=e:this.newEnumAllowed&&(t=this.addNewOption(e)?e:t),this.value=t,t}},{key:"addNewOption",value:function(e){var t,n=this.typecast(e),r=!1;return this.enum_values.includes(n)||""===n||(this.enum_options.push("".concat(n)),this.enum_display.push("".concat(n)),this.enum_values.push(n),this.schema.enum.push(n),(t=this.input.querySelector('option[value="'.concat(n,'"]')))?t.removeAttribute("data-select2-tag"):this.input.appendChild(new Option(n,n,!1,!1)).trigger("change"),r=!0),r}},{key:"enable",value:function(){this.always_disabled||this.select2_instance&&(this.select2v4?this.select2_instance.prop("disabled",!1):this.select2_instance.select2("enable",!0)),Fr(Hr(i.prototype),"enable",this).call(this)}},{key:"disable",value:function(e){this.select2_instance&&(this.select2v4?this.select2_instance.prop("disabled",!0):this.select2_instance.select2("enable",!1)),Fr(Hr(i.prototype),"disable",this).call(this,e)}},{key:"destroy",value:function(){this.select2_instance&&(this.select2_instance.select2("destroy"),this.select2_instance=null),Fr(Hr(i.prototype),"destroy",this).call(this)}}])&&Mr(t.prototype,n),i}(_t);function qr(e){return(qr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Wr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function $r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Gr(e,t,n){return(Gr="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Jr(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Kr(e,t){return(Kr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Qr(e,t){return!t||"object"!==qr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Jr(e){return(Jr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Yr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Kr(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Jr(e);if(t){var i=Jr(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Qr(this,n)}}(i);function i(){return Wr(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"setValue",value:function(e,t){if(this.selectize_instance){t?this.is_dirty=!1:"change"===this.jsoneditor.options.show_errors&&(this.is_dirty=!0);var n=this.updateValue(e);this.input.value=n,this.selectize_instance.clear(!0),this.selectize_instance.setValue(n),this.onChange(!0)}else Gr(Jr(i.prototype),"setValue",this).call(this,e,t)}},{key:"afterInputReady",value:function(){var e=this;if(window.jQuery&&window.jQuery.fn&&window.jQuery.fn.selectize&&!this.selectize_instance){var t=this.expandCallbacks("selectize",d({},this.defaults.options.selectize||{},this.options.selectize||{}));this.newEnumAllowed=t.create=!!t.create&&"string"===this.schema.type,this.selectize_instance=window.jQuery(this.input).selectize(t)[0].selectize,this.control.removeEventListener("change",this.multiselectChangeHandler),this.multiselectChangeHandler=function(t){e.updateValue(t),e.onChange(!0)},this.selectize_instance.on("change",this.multiselectChangeHandler)}Gr(Jr(i.prototype),"afterInputReady",this).call(this)}},{key:"updateValue",value:function(e){var t=this.enum_values[0];return e=this.typecast(e||""),this.enum_values.includes(e)?t=e:this.newEnumAllowed&&(t=this.addNewOption(e)?e:t),this.value=t,t}},{key:"addNewOption",value:function(e){var t=this.typecast(e),n=!1;return this.enum_values.includes(t)||""===t||(this.enum_options.push("".concat(t)),this.enum_display.push("".concat(t)),this.enum_values.push(t),this.schema.enum.push(t),this.selectize_instance.addItem(t),this.selectize_instance.refreshOptions(!1),n=!0),n}},{key:"onWatchedFieldChange",value:function(){var e=this;Gr(Jr(i.prototype),"onWatchedFieldChange",this).call(this),this.selectize_instance&&(this.selectize_instance.clear(!0),this.selectize_instance.clearOptions(!0),this.enum_options.forEach((function(t,n){e.selectize_instance.addOption({value:t,text:e.enum_display[n]})})),this.selectize_instance.addItem("".concat(this.value),!0))}},{key:"enable",value:function(){!this.always_disabled&&this.selectize_instance&&this.selectize_instance.unlock(),Gr(Jr(i.prototype),"enable",this).call(this)}},{key:"disable",value:function(e){this.selectize_instance&&this.selectize_instance.lock(),Gr(Jr(i.prototype),"disable",this).call(this,e)}},{key:"destroy",value:function(){this.selectize_instance&&(this.selectize_instance.destroy(),this.selectize_instance=null),Gr(Jr(i.prototype),"destroy",this).call(this)}}])&&$r(t.prototype,n),i}(_t);function Zr(e){return(Zr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Xr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ei(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ti(e,t){return(ti=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ni(e,t){return!t||"object"!==Zr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ri(e){return(ri=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ii=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ti(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ri(e);if(t){var i=ri(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return ni(this,n)}}(i);function i(){return Xr(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"build",value:function(){var e=this;this.options.compact||(this.header=this.label=this.theme.getFormInputLabel(this.getTitle(),this.isRequired())),this.schema.description&&(this.description=this.theme.getFormInputDescription(this.schema.description));var t=this.formname.replace(/\W/g,"");if("function"==typeof SignaturePad){this.input=this.theme.getFormInputField("hidden"),this.container.appendChild(this.input);var n=document.createElement("div");n.classList.add("signature-container");var r=document.createElement("canvas");r.setAttribute("name",t),r.classList.add("signature"),n.appendChild(r),this.signaturePad=new window.SignaturePad(r,{onEnd:function(){this.signaturePad.isEmpty()?this.input.value="":this.input.value=this.signaturePad.toDataURL(),this.is_dirty=!0,this.refreshValue(),this.watch_listener(),this.jsoneditor.notifyWatchers(this.path),this.parent?this.parent.onChildEditorChange(this):this.jsoneditor.onChange()}});var i=document.createElement("div"),o=document.createElement("button");o.classList.add("tiny","button"),o.innerHTML="Clear signature",i.appendChild(o),n.appendChild(i),this.options.compact&&this.container.setAttribute("class","".concat(this.container.getAttribute("class")," compact")),(this.schema.readOnly||this.schema.readonly)&&(this.disable(!0),Array.from(this.inputs).forEach((function(e){r.setAttribute("readOnly","readOnly"),e.disabled=!0}))),o.addEventListener("click",(function(t){t.preventDefault(),t.stopPropagation(),e.signaturePad.clear(),e.signaturePad.strokeEnd()})),this.control=this.theme.getFormControl(this.label,n,this.description),this.container.appendChild(this.control),this.refreshValue(),r.width=n.offsetWidth,this.options&&this.options.canvas_height?r.height=this.options.canvas_height:r.height="300"}else{var a=document.createElement("p");a.innerHTML="Signature pad is not available, please include SignaturePad from https://github.com/szimek/signature_pad",this.container.appendChild(a)}}},{key:"setValue",value:function(e){if("function"==typeof SignaturePad){var t=this.sanitize(e);if(this.value===t)return;return this.value=t,this.input.value=this.value,this.signaturePad.clear(),e&&""!==e&&this.signaturePad.fromDataURL(e),this.watch_listener(),this.jsoneditor.notifyWatchers(this.path),!1}}},{key:"destroy",value:function(){this.signaturePad.off(),delete this.signaturePad}}])&&ei(t.prototype,n),i}(V);function oi(e){return(oi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ai(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function si(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function li(e,t,n){return(li="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=fi(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function ui(e,t){return(ui=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ci(e,t){return!t||"object"!==oi(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function fi(e){return(fi=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}n(160);var di=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ui(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=fi(e);if(t){var i=fi(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return ci(this,n)}}(i);function i(){return ai(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"setValue",value:function(e,t,n){var r=li(fi(i.prototype),"setValue",this).call(this,e,t,n);void 0!==r&&r.changed&&this.simplemde_instance&&this.simplemde_instance.value(r.value)}},{key:"build",value:function(){this.options.format="textarea",li(fi(i.prototype),"build",this).call(this),this.input_type=this.schema.format,this.input.setAttribute("data-schemaformat",this.input_type)}},{key:"afterInputReady",value:function(){var e,t=this;window.SimpleMDE?(e=this.expandCallbacks("simplemde",d({},{height:300},this.defaults.options.simplemde||{},this.options.simplemde||{},{element:this.input})),this.simplemde_instance=new window.SimpleMDE(e),(this.schema.readOnly||this.schema.readonly||this.schema.template)&&(this.simplemde_instance.codemirror.options.readOnly=!0),this.simplemde_instance.codemirror.on("change",(function(){t.value=t.simplemde_instance.value(),t.is_dirty=!0,t.onChange(!0)})),e.autorefresh&&this.startListening(this.simplemde_instance.codemirror,this.simplemde_instance.codemirror.state.autoRefresh={delay:250}),this.theme.afterInputReady(this.input)):li(fi(i.prototype),"afterInputReady",this).call(this)}},{key:"getNumColumns",value:function(){return 6}},{key:"enable",value:function(){!this.always_disabled&&this.simplemde_instance&&(this.simplemde_instance.codemirror.options.readOnly=!1),li(fi(i.prototype),"enable",this).call(this)}},{key:"disable",value:function(e){this.simplemde_instance&&(this.simplemde_instance.codemirror.options.readOnly=!0),li(fi(i.prototype),"disable",this).call(this,e)}},{key:"destroy",value:function(){this.simplemde_instance&&(this.simplemde_instance.toTextArea(),this.simplemde_instance=null),li(fi(i.prototype),"destroy",this).call(this)}},{key:"startListening",value:function(e,t){function n(){e.display.wrapper.offsetHeight?(this.stopListening(e,t),e.display.lastWrapHeight!==e.display.wrapper.clientHeight&&e.refresh()):t.timeout=window.setTimeout(n,t.delay)}t.timeout=window.setTimeout(n,t.delay),t.hurry=function(){window.clearTimeout(t.timeout),t.timeout=window.setTimeout(n,50)},e.on(window,"mouseup",t.hurry),e.on(window,"keyup",t.hurry)}},{key:"stopListening",value:function(e,t){window.clearTimeout(t.timeout),e.off(window,"mouseup",t.hurry),e.off(window,"keyup",t.hurry)}}])&&si(t.prototype,n),i}(V);function pi(e){return(pi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function hi(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function yi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function mi(e,t,n){return(mi="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=gi(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function vi(e,t){return(vi=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function bi(e,t){return!t||"object"!==pi(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function gi(e){return(gi=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var _i=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&vi(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=gi(e);if(t){var i=gi(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return bi(this,n)}}(i);function i(){return hi(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"build",value:function(){var e=this;if(this.options.compact||(this.header=this.label=this.theme.getFormInputLabel(this.getTitle(),this.isRequired())),this.schema.description&&(this.description=this.theme.getFormInputDescription(this.schema.description)),this.options.infoText&&(this.infoButton=this.theme.getInfoButton(this.options.infoText)),this.options.compact&&this.container.classList.add("compact"),this.ratingContainer=document.createElement("div"),this.ratingContainer.classList.add("starrating"),void 0===this.schema.enum){var t=this.schema.maximum?this.schema.maximum:5;this.schema.exclusiveMaximum&&t--,this.enum_values=[];for(var n=0;n<t;n++)this.enum_values.push(n+1)}else this.enum_values=this.schema.enum;this.radioGroup=[];for(var r=function(t){t.preventDefault(),t.stopPropagation(),e.setValue(t.currentTarget.value),e.onChange(!0)},i=this.enum_values.length-1;i>-1;i--){var o=this.formname+(i+1),a=this.theme.getFormInputField("radio");a.name="".concat(this.formname,"[starrating]"),a.value=this.enum_values[i],a.id=o,a.addEventListener("change",r,!1),this.radioGroup.push(a);var s=document.createElement("label");s.htmlFor=o,s.title=this.enum_values[i],this.options.displayValue&&s.classList.add("starrating-display-enabled"),this.ratingContainer.appendChild(a),this.ratingContainer.appendChild(s)}this.options.displayValue&&(this.displayRating=document.createElement("div"),this.displayRating.classList.add("starrating-display"),this.displayRating.innerText=this.enum_values[0],this.ratingContainer.appendChild(this.displayRating)),(this.schema.readOnly||this.schema.readonly)&&this.disable(!0);var l=this.theme.getContainer();l.appendChild(this.ratingContainer),this.input=l,this.control=this.theme.getFormControl(this.label,l,this.description,this.infoButton),this.container.appendChild(this.control),this.refreshValue()}},{key:"enable",value:function(){if(!this.always_disabled){for(var e=0;e<this.radioGroup.length;e++)this.radioGroup[e].disabled=!1;this.ratingContainer.classList.remove("readonly"),this.disabled=!1}}},{key:"disable",value:function(e){e&&(this.always_disabled=!0);for(var t=0;t<this.radioGroup.length;t++)this.radioGroup[t].disabled=!0;this.ratingContainer.classList.add("readonly"),this.disabled=!0}},{key:"destroy",value:function(){this.ratingContainer.parentNode&&this.ratingContainer.parentNode.parentNode&&this.ratingContainer.parentNode.parentNode.removeChild(this.ratingContainer.parentNode),this.label&&this.label.parentNode&&this.label.parentNode.removeChild(this.label),this.description&&this.description.parentNode&&this.description.parentNode.removeChild(this.description),mi(gi(i.prototype),"destroy",this).call(this)}},{key:"getNumColumns",value:function(){return 2}},{key:"getValue",value:function(){if(this.dependenciesFulfilled)return"integer"===this.schema.type?""===this.value?void 0:1*this.value:this.value}},{key:"setValue",value:function(e){for(var t=0;t<this.radioGroup.length;t++)if(this.radioGroup[t].value==="".concat(e)){this.radioGroup[t].checked=!0,this.value=e,this.options.displayValue&&(this.displayRating.innerHTML=this.value),this.onChange(!0);break}}}])&&yi(t.prototype,n),i}(V);function wi(e){return(wi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ki(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function xi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ci(e,t,n){return(Ci="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Si(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Ei(e,t){return(Ei=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Oi(e,t){return!t||"object"!==wi(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Si(e){return(Si=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}_i.rules={".starrating":"direction:rtl;display:inline-block;white-space:nowrap",".starrating > input":"display:none",".starrating > label:before":"content:'%5C2606';margin:1px;font-size:18px;font-style:normal;font-weight:400;line-height:1;font-family:'Arial';display:inline-block",".starrating > label":"color:%23888;cursor:pointer;margin:8px%200%202px%200",".starrating > label.starrating-display-enabled":"margin:1px%200%200%200",".starrating > input:checked ~ label":"color:%23ffca08",".starrating:not(.readonly) > input:hover ~ label":"color:%23ffca08",".starrating > input:checked ~ label:before":"content:'%5C2605';text-shadow:0%200%201px%20rgba(0%2C20%2C20%2C1)",".starrating:not(.readonly) > input:hover ~ label:before":"content:'%5C2605';text-shadow:0%200%201px%20rgba(0%2C20%2C20%2C1)",".starrating .starrating-display":"position:relative;direction:rtl;text-align:center;font-size:10px;line-height:0px"};var ji=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ei(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Si(e);if(t){var i=Si(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Oi(this,n)}}(i);function i(){return ki(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"build",value:function(){Ci(Si(i.prototype),"build",this).call(this),this.input.setAttribute("type","number"),this.input.getAttribute("step")||this.input.setAttribute("step","1");var e=this.theme.getStepperButtons(this.input);this.control.appendChild(e),this.stepperDown=this.control.querySelector(".stepper-down"),this.stepperUp=this.control.querySelector(".stepper-up")}},{key:"enable",value:function(){Ci(Si(i.prototype),"enable",this).call(this),this.stepperDown.removeAttribute("disabled"),this.stepperUp.removeAttribute("disabled")}},{key:"disable",value:function(){Ci(Si(i.prototype),"disable",this).call(this),this.stepperDown.setAttribute("disabled",!0),this.stepperUp.setAttribute("disabled",!0)}}])&&xi(t.prototype,n),i}(Pn);function Ai(e){return(Ai="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Pi(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ti(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ri(e,t,n){return(Ri="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Ni(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Li(e,t){return(Li=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ii(e,t){return!t||"object"!==Ai(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ni(e){return(Ni=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Bi=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Li(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ni(e);if(t){var i=Ni(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Ii(this,n)}}(i);function i(){return Pi(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"register",value:function(){if(Ri(Ni(i.prototype),"register",this).call(this),this.rows)for(var e=0;e<this.rows.length;e++)this.rows[e].register()}},{key:"unregister",value:function(){if(Ri(Ni(i.prototype),"unregister",this).call(this),this.rows)for(var e=0;e<this.rows.length;e++)this.rows[e].unregister()}},{key:"getNumColumns",value:function(){return Math.max(Math.min(12,this.width),3)}},{key:"preBuild",value:function(){var e=this.jsoneditor.expandRefs(this.schema.items||{});this.item_title=e.title||"row",this.item_default=e.default||null,this.item_has_child_editors=e.properties||e.items,this.width=12,Ri(Ni(i.prototype),"preBuild",this).call(this)}},{key:"build",value:function(){this.table=this.theme.getTable(),this.container.appendChild(this.table),this.thead=this.theme.getTableHead(),this.table.appendChild(this.thead),this.header_row=this.theme.getTableRow(),this.thead.appendChild(this.header_row),this.row_holder=this.theme.getTableBody(),this.table.appendChild(this.row_holder);var e=this.getElementEditor(0,!0);if(this.item_default=e.getDefault(),this.width=e.getNumColumns()+2,this.options.compact?(this.panel=document.createElement("div"),this.container.appendChild(this.panel)):(this.header=document.createElement("label"),this.header.textContent=this.getTitle(),this.title=this.theme.getHeader(this.header),this.container.appendChild(this.title),this.title_controls=this.theme.getHeaderButtonHolder(),this.title.appendChild(this.title_controls),this.schema.description&&(this.description=this.theme.getDescription(this.schema.description),this.container.appendChild(this.description)),this.panel=this.theme.getIndentedPanel(),this.container.appendChild(this.panel),this.error_holder=document.createElement("div"),this.panel.appendChild(this.error_holder)),this.panel.appendChild(this.table),this.controls=this.theme.getButtonHolder(),this.panel.appendChild(this.controls),this.item_has_child_editors)for(var t=e.getChildEditors(),n=e.property_order||Object.keys(t),r=0;r<n.length;r++){var i=this.theme.getTableHeaderCell(t[n[r]].getTitle());t[n[r]].options.hidden&&(i.style.display="none"),this.header_row.appendChild(i)}else this.header_row.appendChild(this.theme.getTableHeaderCell(this.item_title));e.destroy(),this.row_holder.innerHTML="",this.controls_header_cell=this.theme.getTableHeaderCell(" "),this.header_row.appendChild(this.controls_header_cell),this.addControls()}},{key:"onChildEditorChange",value:function(e){this.refreshValue(),Ri(Ni(i.prototype),"onChildEditorChange",this).call(this)}},{key:"getItemDefault",value:function(){return d({},{default:this.item_default}).default}},{key:"getItemTitle",value:function(){return this.item_title}},{key:"getElementEditor",value:function(e,t){var n=d({},this.schema.items),r=this.jsoneditor.getEditorClass(n,this.jsoneditor),i=this.row_holder.appendChild(this.theme.getTableRow()),o=i;this.item_has_child_editors||(o=this.theme.getTableCell(),i.appendChild(o));var a=this.jsoneditor.createEditor(r,{jsoneditor:this.jsoneditor,schema:n,container:o,path:"".concat(this.path,".").concat(e),parent:this,compact:!0,table_row:!0});return a.preBuild(),t||(a.build(),a.postBuild(),a.controls_cell=i.appendChild(this.theme.getTableCell()),a.row=i,a.table_controls=this.theme.getButtonHolder(),a.controls_cell.appendChild(a.table_controls),a.table_controls.style.margin=0,a.table_controls.style.padding=0),a}},{key:"destroy",value:function(){this.innerHTML="",this.checkParent(this.title)&&this.title.parentNode.removeChild(this.title),this.checkParent(this.description)&&this.description.parentNode.removeChild(this.description),this.checkParent(this.row_holder)&&this.row_holder.parentNode.removeChild(this.row_holder),this.checkParent(this.table)&&this.table.parentNode.removeChild(this.table),this.checkParent(this.panel)&&this.panel.parentNode.removeChild(this.panel),this.rows=this.title=this.description=this.row_holder=this.table=this.panel=null,Ri(Ni(i.prototype),"destroy",this).call(this)}},{key:"ensureArraySize",value:function(e){if(Array.isArray(e)||(e=[e]),this.schema.minItems)for(;e.length<this.schema.minItems;)e.push(this.getItemDefault());return this.schema.maxItems&&e.length>this.schema.maxItems&&(e=e.slice(0,this.schema.maxItems)),e}},{key:"setValue",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0;if(t=this.ensureArraySize(t),JSON.stringify(t)!==this.serialized){var r=!1;t.forEach((function(t,n){e.rows[n]?e.rows[n].setValue(t):(e.addRow(t),r=!0)}));for(var i=t.length;i<this.rows.length;i++){var o=this.rows[i].container;this.item_has_child_editors||this.rows[i].row.parentNode.removeChild(this.rows[i].row),this.rows[i].destroy(),o.parentNode&&o.parentNode.removeChild(o),this.rows[i]=null,r=!0}this.rows=this.rows.slice(0,t.length),this.refreshValue(),(r||n)&&this.refreshRowButtons(),this.onChange()}}},{key:"refreshRowButtons",value:function(){var e=this,t=this.schema.minItems&&this.schema.minItems>=this.rows.length,n=this.schema.maxItems&&this.schema.maxItems<=this.rows.length,r=[];this.rows.forEach((function(i,o){if(i.delete_button){var a=!t;e.setVisibility(i.delete_button,a),r.push(a)}if(i.copy_button){var s=!n;e.setVisibility(i.copy_button,s),r.push(s)}if(i.moveup_button){var l=0!==o;e.setVisibility(i.moveup_button,l),r.push(l)}if(i.movedown_button){var u=o!==e.rows.length-1;e.setVisibility(i.movedown_button,u),r.push(u)}}));var i=r.some((function(e){return e}));this.rows.forEach((function(t){return e.setVisibility(t.controls_cell,i)})),this.setVisibility(this.controls_header_cell,i),this.setVisibility(this.table,this.value.length);var o=!(n||this.hide_add_button);this.setVisibility(this.add_row_button,o);var a=!(!this.value.length||t||this.hide_delete_last_row_buttons);this.setVisibility(this.delete_last_row_button,a);var s=!(this.value.length<=1||t||this.hide_delete_all_rows_buttons);this.setVisibility(this.remove_all_rows_button,s);var l=o||a||s;this.setVisibility(this.controls,l)}},{key:"refreshValue",value:function(){var e=this;this.value=[],this.rows.forEach((function(t,n){e.value[n]=t.getValue()})),this.serialized=JSON.stringify(this.value)}},{key:"addRow",value:function(e){var t=this.rows.length;this.rows[t]=this.getElementEditor(t);var n=this.rows[t].table_controls;this.hide_delete_buttons||(this.rows[t].delete_button=this._createDeleteButton(t,n)),this.show_copy_button&&(this.rows[t].copy_button=this._createCopyButton(t,n)),this.hide_move_buttons||(this.rows[t].moveup_button=this._createMoveUpButton(t,n)),this.hide_move_buttons||(this.rows[t].movedown_button=this._createMoveDownButton(t,n)),e&&this.rows[t].setValue(e)}},{key:"_createDeleteButton",value:function(e,t){var n=this,r=this.getButton("","delete","button_delete_row_title_short");return r.classList.add("delete","json-editor-btntype-delete"),r.setAttribute("data-i",e),r.addEventListener("click",(function(e){if(e.preventDefault(),e.stopPropagation(),!n.askConfirmation())return!1;var t=1*e.currentTarget.getAttribute("data-i"),r=n.getValue();r.splice(t,1),n.setValue(r),n.onChange(!0),n.jsoneditor.trigger("deleteRow",n.rows[t])})),t.appendChild(r),r}},{key:"_createCopyButton",value:function(e,t){var n=this,r=this.getButton("","copy","button_copy_row_title_short");return r.classList.add("copy","json-editor-btntype-copy"),r.setAttribute("data-i",e),r.addEventListener("click",(function(e){e.preventDefault(),e.stopPropagation();var t=1*e.currentTarget.getAttribute("data-i"),r=n.getValue();r.splice(t+1,0,r[t]),n.setValue(r),n.onChange(!0),n.jsoneditor.trigger("copyRow",n.rows[t+1])})),t.appendChild(r),r}},{key:"_createMoveUpButton",value:function(e,t){var n=this,r=this.getButton("","moveup","button_move_up_title");return r.classList.add("moveup","json-editor-btntype-move"),r.setAttribute("data-i",e),r.addEventListener("click",(function(e){e.preventDefault(),e.stopPropagation();var t=1*e.currentTarget.getAttribute("data-i"),r=n.getValue();r.splice(t-1,0,r.splice(t,1)[0]),n.setValue(r),n.onChange(!0),n.jsoneditor.trigger("moveRow",n.rows[t-1])})),t.appendChild(r),r}},{key:"_createMoveDownButton",value:function(e,t){var n=this,r=this.getButton("","movedown","button_move_down_title");return r.classList.add("movedown","json-editor-btntype-move"),r.setAttribute("data-i",e),r.addEventListener("click",(function(e){e.preventDefault(),e.stopPropagation();var t=1*e.currentTarget.getAttribute("data-i"),r=n.getValue();r.splice(t+1,0,r.splice(t,1)[0]),n.setValue(r),n.onChange(!0),n.jsoneditor.trigger("moveRow",n.rows[t+1])})),t.appendChild(r),r}},{key:"addControls",value:function(){var e=this;this.collapsed=!1,this.toggle_button=this._createToggleButton(),this.title_controls&&(this.title.insertBefore(this.toggle_button,this.title.childNodes[0]),this.toggle_button.addEventListener("click",(function(t){t.preventDefault(),t.stopPropagation(),e.setVisibility(e.panel,e.collapsed),e.collapsed?(e.collapsed=!1,e.setButtonText(t.currentTarget,"","collapse","button_collapse")):(e.collapsed=!0,e.setButtonText(t.currentTarget,"","expand","button_expand"))})),this.options.collapsed&&p(this.toggle_button,"click"),this.schema.options&&void 0!==this.schema.options.disable_collapse?this.schema.options.disable_collapse&&(this.toggle_button.style.display="none"):this.jsoneditor.options.disable_collapse&&(this.toggle_button.style.display="none")),this.add_row_button=this._createAddRowButton(),this.delete_last_row_button=this._createDeleteLastRowButton(),this.remove_all_rows_button=this._createRemoveAllRowsButton()}},{key:"_createToggleButton",value:function(){var e=this.getButton("","collapse","button_collapse");return e.classList.add("json-editor-btntype-toggle"),e}},{key:"_createAddRowButton",value:function(){var e=this,t=this.getButton(this.getItemTitle(),"add","button_add_row_title",[this.getItemTitle()]);return t.classList.add("json-editor-btntype-add"),t.addEventListener("click",(function(t){t.preventDefault(),t.stopPropagation();var n=e.addRow();e.refreshValue(),e.refreshRowButtons(),e.onChange(!0),e.jsoneditor.trigger("addRow",n)})),this.controls.appendChild(t),t}},{key:"_createDeleteLastRowButton",value:function(){var e=this,t=this.getButton("button_delete_last","subtract","button_delete_last_title",[this.getItemTitle()]);return t.classList.add("json-editor-btntype-deletelast"),t.addEventListener("click",(function(t){if(t.preventDefault(),t.stopPropagation(),!e.askConfirmation())return!1;var n=e.getValue(),r=n.pop();e.setValue(n),e.onChange(!0),e.jsoneditor.trigger("deleteRow",r)})),this.controls.appendChild(t),t}},{key:"_createRemoveAllRowsButton",value:function(){var e=this,t=this.getButton("button_delete_all","delete","button_delete_all_title");return t.classList.add("json-editor-btntype-deleteall"),t.addEventListener("click",(function(t){if(t.preventDefault(),t.stopPropagation(),!e.askConfirmation())return!1;e.setValue([]),e.onChange(!0),e.jsoneditor.trigger("deleteAllRows")})),this.controls.appendChild(t),t}}])&&Ti(t.prototype,n),i}(re);function Di(e){return(Di="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Mi(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Fi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function zi(e,t,n){return(zi="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Ui(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Vi(e,t){return(Vi=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Hi(e,t){return!t||"object"!==Di(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ui(e){return(Ui=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function qi(e){return(qi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Wi(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function $i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Gi(e,t,n){return(Gi="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Ji(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Ki(e,t){return(Ki=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Qi(e,t){return!t||"object"!==qi(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ji(e){return(Ji=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Yi(e){return(Yi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Zi(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Xi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function eo(e,t,n){return(eo="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=ro(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function to(e,t){return(to=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function no(e,t){return!t||"object"!==Yi(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ro(e){return(ro=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}n(135);var io={ace:Q,array:re,arrayChoices:ge,arraySelect2:Se,arraySelectize:Ne,autocomplete:Ue,base64:Ye,button:it,checkbox:dt,choices:jt,datetime:Bt,describedBy:qt,enum:Xt,hidden:ln,info:yn,integer:Pn,ip:Mn,jodit:$n,multiple:er,multiselect:fe,null:sr,number:xn,object:gr,radio:Sr,sceditor:Nr,select:_t,select2:Ur,selectize:Yr,signature:ii,simplemde:di,starrating:_i,stepper:ji,string:V,table:Bi,upload:function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Vi(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ui(e);if(t){var i=Ui(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Hi(this,n)}}(i);function i(){return Mi(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"getNumColumns",value:function(){return 4}},{key:"build",value:function(){var e=this;if(this.options.compact||(this.header=this.label=this.theme.getFormInputLabel(this.getTitle(),this.isRequired())),this.schema.description&&(this.description=this.theme.getFormInputDescription(this.schema.description)),this.options.infoText&&(this.infoButton=this.theme.getInfoButton(this.options.infoText)),this.options=this.expandCallbacks("upload",d({},{title:"Browse",icon:"",auto_upload:!1,hide_input:!1,enable_drag_drop:!1,drop_zone_text:"Drag & Drop file here",drop_zone_top:!1,alt_drop_zone:"",mime_type:"",max_upload_size:0,upload_handler:function(e,t,n,r){window.alert('No upload_handler defined for "'.concat(e.path,'". You must create your own handler to enable upload to server'))}},this.defaults.options.upload||{},this.options.upload||{})),this.options.mime_type=this.options.mime_type?[].concat(this.options.mime_type):[],this.input=this.theme.getFormInputField("hidden"),this.container.appendChild(this.input),!this.schema.readOnly&&!this.schema.readonly){if("function"!=typeof this.options.upload_handler)throw new Error("Upload handler required for upload editor");if(this.uploader=this.theme.getFormInputField("file"),this.uploader.style.display="none",this.options.mime_type.length&&this.uploader.setAttribute("accept",this.options.mime_type),!0===this.options.enable_drag_drop&&!0===this.options.hide_input||(this.clickHandler=function(t){e.uploader.dispatchEvent(new window.MouseEvent("click",{view:window,bubbles:!0,cancelable:!1}))},this.browseButton=this.getButton(this.options.title,this.options.icon,this.options.title),this.browseButton.addEventListener("click",this.clickHandler),this.fileDisplay=this.theme.getFormInputField("input"),this.fileDisplay.setAttribute("readonly",!0),this.fileDisplay.value="No file selected.",this.fileDisplay.addEventListener("dblclick",this.clickHandler),this.fileUploadGroup=this.theme.getInputGroup(this.fileDisplay,[this.browseButton]),this.fileUploadGroup||(this.fileUploadGroup=document.createElement("div"),this.fileUploadGroup.appendChild(this.fileDisplay),this.fileUploadGroup.appendChild(this.browseButton))),!0===this.options.enable_drag_drop){if(""!==this.options.alt_drop_zone){if(this.altDropZone=document.querySelector(this.options.alt_drop_zone),!this.altDropZone)throw new Error('Error: alt_drop_zone selector "'.concat(this.options.alt_drop_zone,'" not found!'));this.dropZone=this.altDropZone}else this.dropZone=this.theme.getDropZone(this.options.drop_zone_text);this.dropZone&&(this.dropZone.classList.add("upload-dropzone"),this.dropZone.addEventListener("dblclick",this.clickHandler))}this.uploadHandler=function(t){t.preventDefault(),t.stopPropagation();var n=t.target.files||t.dataTransfer.files;if(n&&n.length)if(0!==e.options.max_upload_size&&n[0].size>e.options.max_upload_size)e.theme.addInputError(e.uploader,"Filesize too large. Max size is ".concat(e.options.max_upload_size));else if(0===e.options.mime_type.length||e.isValidMimeType(n[0].type,e.options.mime_type)){e.fileDisplay&&(e.fileDisplay.value=n[0].name);var r=new window.FileReader;r.onload=function(t){e.preview_value=t.target.result,e.refreshPreview(n),e.onChange(!0),r=null},r.readAsDataURL(n[0])}else e.theme.addInputError(e.uploader,"Wrong file format. Allowed format(s): ".concat(e.options.mime_type.toString()))},this.uploader.addEventListener("change",this.uploadHandler),this.dragHandler=function(t){var n=t.dataTransfer.items||t.dataTransfer.files,r=n&&n.length&&(0===e.options.mime_type.length||e.isValidMimeType(n[0].type,e.options.mime_type)),i=t.currentTarget.classList&&t.currentTarget.classList.contains("upload-dropzone")&&r;switch((t.currentTarget===window?"w_":"e_")+t.type){case"w_drop":case"w_dragover":i||(t.dataTransfer.dropEffect="none");break;case"e_dragenter":i?(e.dropZone.classList.add("valid-dropzone"),t.dataTransfer.dropEffect="copy"):e.dropZone.classList.add("invalid-dropzone");break;case"e_dragover":i&&(t.dataTransfer.dropEffect="copy");break;case"e_dragleave":e.dropZone.classList.remove("valid-dropzone","invalid-dropzone");break;case"e_drop":e.dropZone.classList.remove("valid-dropzone","invalid-dropzone"),i&&e.uploadHandler(t)}i||t.preventDefault()},!0===this.options.enable_drag_drop&&(["dragover","drop"].forEach((function(t){window.addEventListener(t,e.dragHandler,!0)})),["dragenter","dragover","dragleave","drop"].forEach((function(t){e.dropZone.addEventListener(t,e.dragHandler,!0)})))}this.preview=document.createElement("div"),this.control=this.input.controlgroup=this.theme.getFormControl(this.label,this.uploader||this.input,this.description,this.infoButton),this.uploader&&(this.uploader.controlgroup=this.control);var t=this.uploader||this.input,n=document.createElement("div");this.dropZone&&!this.altDropZone&&!0===this.options.drop_zone_top&&n.appendChild(this.dropZone),this.fileUploadGroup&&n.appendChild(this.fileUploadGroup),this.dropZone&&!this.altDropZone&&!0!==this.options.drop_zone_top&&n.appendChild(this.dropZone),n.appendChild(this.preview),t.parentNode.insertBefore(n,t.nextSibling),this.container.appendChild(this.control),window.requestAnimationFrame((function(){e.afterInputReady()}))}},{key:"afterInputReady",value:function(){var e=this;if(this.value){var t=document.createElement("img");t.style.maxWidth="100%",t.style.maxHeight="100px",t.onload=function(n){e.preview.appendChild(t)},t.onerror=function(e){console.error("upload error",e,e.currentTarget)},t.src=this.container.querySelector("a").href}this.theme.afterInputReady(this.input)}},{key:"refreshPreview",value:function(e){var t=this;if(this.last_preview!==this.preview_value&&(this.last_preview=this.preview_value,this.preview.innerHTML="",this.preview_value)){var n=e[0],r=this.preview_value.match(/^data:([^;,]+)[;,]/);if(n.mimeType=r?r[1]:"unknown",n.size>0){var i=Math.floor(Math.log(n.size)/Math.log(1024));n.formattedSize="".concat(parseFloat((n.size/Math.pow(1024,i)).toFixed(2))," ").concat(["Bytes","KB","MB","GB","TB","PB","EB","ZB","YB"][i])}else n.formattedSize="0 Bytes";var o=this.getButton("button_upload","upload","button_upload");o.addEventListener("click",(function(e){e.preventDefault(),o.setAttribute("disabled","disabled"),t.theme.removeInputError(t.uploader),t.theme.getProgressBar&&(t.progressBar=t.theme.getProgressBar(),t.preview.appendChild(t.progressBar)),t.options.upload_handler(t.path,n,{success:function(e){t.setValue(e),t.parent?t.parent.onChildEditorChange(t):t.jsoneditor.onChange(),t.progressBar&&t.preview.removeChild(t.progressBar),o.removeAttribute("disabled")},failure:function(e){t.theme.addInputError(t.uploader,e),t.progressBar&&t.preview.removeChild(t.progressBar),o.removeAttribute("disabled")},updateProgress:function(e){t.progressBar&&(e?t.theme.updateProgressBar(t.progressBar,e):t.theme.updateProgressBarUnknown(t.progressBar))}})})),this.preview.appendChild(this.theme.getUploadPreview(n,o,this.preview_value)),this.options.auto_upload&&(o.dispatchEvent(new window.MouseEvent("click")),this.preview.removeChild(o))}}},{key:"enable",value:function(){this.always_disabled||(this.uploader&&(this.uploader.disabled=!1),zi(Ui(i.prototype),"enable",this).call(this))}},{key:"disable",value:function(e){e&&(this.always_disabled=!0),this.uploader&&(this.uploader.disabled=!0),zi(Ui(i.prototype),"disable",this).call(this)}},{key:"setValue",value:function(e){this.value!==e&&(this.value=e,this.input.value=this.value,this.onChange())}},{key:"destroy",value:function(){var e=this;!0===this.options.enable_drag_drop&&(["dragover","drop"].forEach((function(t){window.removeEventListener(t,e.dragHandler,!0)})),["dragenter","dragover","dragleave","drop"].forEach((function(t){e.dropZone.removeEventListener(t,e.dragHandler,!0)})),this.dropZone.removeEventListener("dblclick",this.clickHandler),this.dropZone&&this.dropZone.parentNode&&this.dropZone.parentNode.removeChild(this.dropZone)),this.uploader&&this.uploader.parentNode&&(this.uploader.removeEventListener("change",this.uploadHandler),this.uploader.parentNode.removeChild(this.uploader)),this.browseButton&&this.browseButton.parentNode&&(this.browseButton.removeEventListener("click",this.clickHandler),this.browseButton.parentNode.removeChild(this.browseButton)),this.fileDisplay&&this.fileDisplay.parentNode&&(this.fileDisplay.removeEventListener("dblclick",this.clickHandler),this.fileDisplay.parentNode.removeChild(this.fileDisplay)),this.fileUploadGroup&&this.fileUploadGroup.parentNode&&this.fileUploadGroup.parentNode.removeChild(this.fileUploadGroup),this.preview&&this.preview.parentNode&&this.preview.parentNode.removeChild(this.preview),this.header&&this.header.parentNode&&this.header.parentNode.removeChild(this.header),this.input&&this.input.parentNode&&this.input.parentNode.removeChild(this.input),zi(Ui(i.prototype),"destroy",this).call(this)}},{key:"isValidMimeType",value:function(e,t){return t.reduce((function(t,n){return t||new RegExp(n.replace(/\*/g,".*"),"gi").test(e)}),!1)}}])&&Fi(t.prototype,n),i}(L),uuid:function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ki(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ji(e);if(t){var i=Ji(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Qi(this,n)}}(i);function i(){return Wi(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"preBuild",value:function(){Gi(Ji(i.prototype),"preBuild",this).call(this),this.schema.default=this.uuid=this.getUuid(),this.schema.options||(this.schema.options={}),this.schema.options.cleave||(this.schema.options.cleave={delimiters:["-"],blocks:[8,4,4,4,12]})}},{key:"build",value:function(){Gi(Ji(i.prototype),"build",this).call(this),this.disable(!0)}},{key:"sanitize",value:function(e){return this.testUuid(e)||(e=this.uuid),e}},{key:"setValue",value:function(e,t,n){this.testUuid(e)||(e=this.uuid),this.uuid=e,Gi(Ji(i.prototype),"setValue",this).call(this,e,t,n)}},{key:"getUuid",value:function(){var e=(new Date).getTime();return"undefined"!=typeof performance&&"function"==typeof performance.now&&(e+=performance.now()),"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:3&n|8).toString(16)}))}},{key:"testUuid",value:function(e){return/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(e)}}])&&$i(t.prototype,n),i}(V),colorpicker:function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&to(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ro(e);if(t){var i=ro(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return no(this,n)}}(i);function i(){return Zi(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"postBuild",value:function(){window.Picker&&(this.input.type="text"),this.input.style.padding="3px"}},{key:"setValue",value:function(e,t,n){var r=eo(ro(i.prototype),"setValue",this).call(this,e,t,n);return this.picker_instance&&this.picker_instance.domElement&&r&&r.changed&&this.picker_instance.setColor(r.value,!0),r}},{key:"getNumColumns",value:function(){return 2}},{key:"afterInputReady",value:function(){eo(ro(i.prototype),"afterInputReady",this).call(this),this.createPicker(!0)}},{key:"disable",value:function(){if(eo(ro(i.prototype),"disable",this).call(this),this.picker_instance&&this.picker_instance.domElement){this.picker_instance.domElement.style.pointerEvents="none";for(var e=this.picker_instance.domElement.querySelectorAll("button"),t=0;t<e.length;t++)e[t].disabled=!0}}},{key:"enable",value:function(){if(eo(ro(i.prototype),"enable",this).call(this),this.picker_instance&&this.picker_instance.domElement){this.picker_instance.domElement.style.pointerEvents="auto";for(var e=this.picker_instance.domElement.querySelectorAll("button"),t=0;t<e.length;t++)e[t].disabled=!1}}},{key:"destroy",value:function(){this.createPicker(!1),eo(ro(i.prototype),"destroy",this).call(this)}},{key:"createPicker",value:function(e){var t=this;if(e){if(window.Picker&&!this.picker_instance){var n=this.expandCallbacks("colorpicker",d({},{editor:!1,alpha:!1,color:this.value,popup:"bottom"},this.defaults.options.colorpicker||{},this.options.colorpicker||{},{parent:this.container})),r=function(e){var n=t.picker_instance.settings.editorFormat,r=t.picker_instance.settings.alpha;t.setValue("hex"===n?r?e.hex:e.hex.slice(0,7):e["".concat(n+(r?"a":""),"String")])};n.popup||"function"==typeof n.onChange?n.popup&&"function"!=typeof n.onDone&&(n.onDone=r):n.onChange=r,this.picker_instance=new window.Picker(n),n.popup||(this.input.style.display="none",this.theme.afterInputReady(this.picker_instance.domElement))}}else this.picker_instance&&(this.picker_instance.destroy(),this.picker_instance=null,this.input.style.display="")}}])&&Xi(t.prototype,n),i}(V)},oo=(n(163),{default:function(){return{compile:function(e){var t=e.match(/{{\s*([a-zA-Z0-9\-_ .]+)\s*}}/g),n=t&&t.length;if(!n)return function(){return e};for(var r=[],i=function(e){var n,i,o=t[e].replace(/[{}]+/g,"").trim().split("."),a=o.length;a>1?n=function(t){for(i=t,e=0;e<a&&(i=i[o[e]]);e++);return i}:(o=o[0],n=function(e){return e[o]}),r.push({s:t[e],r:n})},o=0;o<n;o++)i(o);return function(t){var i,a="".concat(e);for(o=0;o<n;o++)i=r[o],a=a.replace(i.s,i.r(t));return a}}}},ejs:function(){return!!window.EJS&&{compile:function(e){var t=new window.EJS({text:e});return function(e){return t.render(e)}}}},handlebars:function(){return window.Handlebars},hogan:function(){return!!window.Hogan&&{compile:function(e){var t=window.Hogan.compile(e);return function(e){return t.render(e)}}}},lodash:function(){return!!window._&&{compile:function(e){return function(t){return window._.template(e)(t)}}}},markup:function(){return!(!window.Mark||!window.Mark.up)&&{compile:function(e){return function(t){return window.Mark.up(e,t)}}}},mustache:function(){return!!window.Mustache&&{compile:function(e){return function(t){return window.Mustache.render(e,t)}}}},swig:function(){return window.swig},underscore:function(){return!!window._&&{compile:function(e){return function(t){return window._.template(e)(t)}}}}});function ao(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function so(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function lo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var uo={collapse:"",expand:"",delete:"",edit:"",add:"",cancel:"",save:"",moveup:"",movedown:""},co=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:uo;so(this,e),this.mapping=n,this.icon_prefix=t}var t,n;return t=e,(n=[{key:"getIconClass",value:function(e){return this.mapping[e]?this.icon_prefix+this.mapping[e]:null}},{key:"getIcon",value:function(e){var t,n=this.getIconClass(e);if(!n)return null;var r=document.createElement("i");return(t=r.classList).add.apply(t,function(e){return function(e){if(Array.isArray(e))return ao(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return ao(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ao(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(n.split(" "))),r}}])&&lo(t.prototype,n),e}();function fo(e){return(fo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function po(e,t){return(po=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ho(e,t){return!t||"object"!==fo(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function yo(e){return(yo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var mo={collapse:"chevron-down",expand:"chevron-right",delete:"trash",edit:"pencil",add:"plus",subtract:"minus",cancel:"floppy-remove",save:"floppy-saved",moveup:"arrow-up",moveright:"arrow-right",movedown:"arrow-down",moveleft:"arrow-left",copy:"copy",clear:"remove-circle",time:"time",calendar:"calendar",edit_properties:"list"};function vo(e){return(vo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function bo(e,t){return(bo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function go(e,t){return!t||"object"!==vo(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function _o(e){return(_o=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var wo={collapse:"chevron-down",expand:"chevron-right",delete:"trash",edit:"pencil",add:"plus",subtract:"minus",cancel:"ban-circle",save:"save",moveup:"arrow-up",moveright:"arrow-right",movedown:"arrow-down",moveleft:"arrow-left",copy:"copy",clear:"remove-circle",time:"time",calendar:"calendar",edit_properties:"list"};function ko(e){return(ko="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function xo(e,t){return(xo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Co(e,t){return!t||"object"!==ko(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Eo(e){return(Eo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Oo={collapse:"caret-square-o-down",expand:"caret-square-o-right",delete:"times",edit:"pencil",add:"plus",subtract:"minus",cancel:"ban",save:"save",moveup:"arrow-up",moveright:"arrow-right",movedown:"arrow-down",moveleft:"arrow-left",copy:"files-o",clear:"times-circle-o",time:"clock-o",calendar:"calendar",edit_properties:"list"};function So(e){return(So="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function jo(e,t){return(jo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ao(e,t){return!t||"object"!==So(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Po(e){return(Po=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var To={collapse:"caret-down",expand:"caret-right",delete:"trash",edit:"pen",add:"plus",subtract:"minus",cancel:"ban",save:"save",moveup:"arrow-up",moveright:"arrow-right",movedown:"arrow-down",moveleft:"arrow-left",copy:"copy",clear:"times-circle",time:"clock",calendar:"calendar",edit_properties:"list"};function Ro(e){return(Ro="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Lo(e,t){return(Lo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Io(e,t){return!t||"object"!==Ro(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function No(e){return(No=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Bo={collapse:"triangle-1-s",expand:"triangle-1-e",delete:"trash",edit:"pencil",add:"plusthick",subtract:"minusthick",cancel:"closethick",save:"disk",moveup:"arrowthick-1-n",moveright:"arrowthick-1-e",movedown:"arrowthick-1-s",moveleft:"arrowthick-1-w",copy:"copy",clear:"circle-close",time:"time",calendar:"calendar",edit_properties:"note"};function Do(e){return(Do="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Mo(e,t){return(Mo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Fo(e,t){return!t||"object"!==Do(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function zo(e){return(zo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Vo={collapse:"collapse-down",expand:"expand-right",delete:"trash",edit:"pencil",add:"plus",subtract:"minus",cancel:"ban",save:"file",moveup:"arrow-thick-top",moveright:"arrow-thick-right",movedown:"arrow-thick-bottom",moveleft:"arrow-thick-left",copy:"clipboard",clear:"circle-x",time:"clock",calendar:"calendar",edit_properties:"list"};function Ho(e){return(Ho="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Uo(e,t){return(Uo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function qo(e,t){return!t||"object"!==Ho(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Wo(e){return(Wo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var $o={collapse:"arrow-down",expand:"arrow-right",delete:"delete",edit:"edit",add:"plus",subtract:"minus",cancel:"cross",save:"check",moveup:"upward",moveright:"forward",movedown:"downward",moveleft:"back",copy:"copy",clear:"close",time:"time",calendar:"bookmark",edit_properties:"menu"},Go={bootstrap3:function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&po(e,t)}(n,e);var t=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=yo(e);if(t){var i=yo(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return ho(this,n)}}(n);function n(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t.call(this,"glyphicon glyphicon-",mo)}return n}(co),fontawesome3:function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&bo(e,t)}(n,e);var t=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=_o(e);if(t){var i=_o(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return go(this,n)}}(n);function n(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t.call(this,"icon-",wo)}return n}(co),fontawesome4:function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&xo(e,t)}(n,e);var t=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Eo(e);if(t){var i=Eo(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Co(this,n)}}(n);function n(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t.call(this,"fa fa-",Oo)}return n}(co),fontawesome5:function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&jo(e,t)}(n,e);var t=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Po(e);if(t){var i=Po(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Ao(this,n)}}(n);function n(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t.call(this,"fas fa-",To)}return n}(co),jqueryui:function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Lo(e,t)}(n,e);var t=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=No(e);if(t){var i=No(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Io(this,n)}}(n);function n(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t.call(this,"ui-icon ui-icon-",Bo)}return n}(co),openiconic:function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Mo(e,t)}(n,e);var t=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=zo(e);if(t){var i=zo(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Fo(this,n)}}(n);function n(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t.call(this,"oi oi-",Vo)}return n}(co),spectre:function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Uo(e,t)}(n,e);var t=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Wo(e);if(t){var i=Wo(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return qo(this,n)}}(n);function n(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t.call(this,"icon icon-",$o)}return n}(co)};function Ko(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Qo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}n(136);var Jo=["matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector"].find((function(e){return e in document.documentElement})),Yo=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{disable_theme_rules:!1};Ko(this,e),this.jsoneditor=t,Object.keys(n).forEach((function(e){void 0!==t.options[e]&&(n[e]=t.options[e])})),this.options=n}var t,n;return t=e,(n=[{key:"getContainer",value:function(){return document.createElement("div")}},{key:"getFloatRightLinkHolder",value:function(){var e=document.createElement("div");return e.classList.add("je-float-right-linkholder"),e}},{key:"getModal",value:function(){var e=document.createElement("div");return e.style.display="none",e.classList.add("je-modal"),e}},{key:"getGridContainer",value:function(){return document.createElement("div")}},{key:"getGridRow",value:function(){var e=document.createElement("div");return e.classList.add("row"),e}},{key:"getGridColumn",value:function(){return document.createElement("div")}},{key:"setGridColumnSize",value:function(e,t){}},{key:"getLink",value:function(e){var t=document.createElement("a");return t.setAttribute("href","#"),t.appendChild(document.createTextNode(e)),t}},{key:"disableHeader",value:function(e){e.style.color="#ccc"}},{key:"disableLabel",value:function(e){e.style.color="#ccc"}},{key:"enableHeader",value:function(e){e.style.color=""}},{key:"enableLabel",value:function(e){e.style.color=""}},{key:"getInfoButton",value:function(e){var t=document.createElement("span");t.innerText="ⓘ",t.classList.add("je-infobutton-icon");var n=document.createElement("span");return n.classList.add("je-infobutton-tooltip"),n.innerText=e,t.onmouseover=function(){n.style.visibility="visible"},t.onmouseleave=function(){n.style.visibility="hidden"},t.appendChild(n),t}},{key:"getFormInputLabel",value:function(e,t){var n=document.createElement("label");return n.appendChild(document.createTextNode(e)),t&&n.classList.add("required"),n}},{key:"getHeader",value:function(e){var t=document.createElement("h3");return"string"==typeof e?t.textContent=e:t.appendChild(e),t.classList.add("je-header"),t}},{key:"getCheckbox",value:function(){var e=this.getFormInputField("checkbox");return e.classList.add("je-checkbox"),e}},{key:"getCheckboxLabel",value:function(e,t){var n=document.createElement("label");return n.appendChild(document.createTextNode(" ".concat(e))),t&&n.classList.add("required"),n}},{key:"getMultiCheckboxHolder",value:function(e,t,n,r){var i=document.createElement("div");return i.classList.add("control-group"),t&&(t.style.display="block",i.appendChild(t),r&&t.appendChild(r)),Object.values(e).forEach((function(e){e.style.display="inline-block",e.style.marginRight="20px",i.appendChild(e)})),n&&i.appendChild(n),i}},{key:"getFormCheckboxControl",value:function(e,t,n){var r=document.createElement("div");return r.appendChild(e),t.style.width="auto",e.insertBefore(t,e.firstChild),n&&r.classList.add("je-checkbox-control--compact"),r}},{key:"getFormRadio",value:function(e){var t=this.getFormInputField("radio");return Object.keys(e).forEach((function(n){return t.setAttribute(n,e[n])})),t.classList.add("je-radio"),t}},{key:"getFormRadioLabel",value:function(e,t){var n=document.createElement("label");return n.appendChild(document.createTextNode(" ".concat(e))),t&&n.classList.add("required"),n}},{key:"getFormRadioControl",value:function(e,t,n){var r=document.createElement("div");return r.appendChild(e),t.style.width="auto",e.insertBefore(t,e.firstChild),n&&r.classList.add("je-radio-control--compact"),r}},{key:"getSelectInput",value:function(e,t){var n=document.createElement("select");return e&&this.setSelectOptions(n,e),n}},{key:"getSwitcher",value:function(e){var t=this.getSelectInput(e,!1);return t.classList.add("je-switcher"),t}},{key:"getSwitcherOptions",value:function(e){return e.getElementsByTagName("option")}},{key:"setSwitcherOptions",value:function(e,t,n){this.setSelectOptions(e,t,n)}},{key:"setSelectOptions",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];e.innerHTML="";for(var r=0;r<t.length;r++){var i=document.createElement("option");i.setAttribute("value",t[r]),i.textContent=n[r]||t[r],e.appendChild(i)}}},{key:"getTextareaInput",value:function(){var e=document.createElement("textarea");return e.classList.add("je-textarea"),e}},{key:"getRangeInput",value:function(e,t,n){var r=this.getFormInputField("range");return r.setAttribute("min",e),r.setAttribute("max",t),r.setAttribute("step",n),r}},{key:"getStepperButtons",value:function(e){var t=document.createElement("div"),n=document.createElement("button");n.setAttribute("type","button"),n.classList.add("stepper-down");var r=document.createElement("button");r.setAttribute("type","button"),r.classList.add("stepper-up"),e.getAttribute("readonly")&&(n.setAttribute("disabled",!0),r.setAttribute("disabled",!0)),n.textContent="-",r.textContent="+";var i=function(e,t){e.value=Number(t||e.value),e.setAttribute("initialized","1")},o=e.getAttribute("min"),a=e.getAttribute("max");return n.addEventListener("click",(function(){e.getAttribute("initialized")?o?Number(e.value)>Number(o)&&e.stepDown():e.stepDown():i(e,o),p(e,"change")})),r.addEventListener("click",(function(){e.getAttribute("initialized")?a?Number(e.value)<Number(a)&&e.stepUp():e.stepUp():i(e,o),p(e,"change")})),t.appendChild(n),t.appendChild(r),t}},{key:"getRangeOutput",value:function(e,t){var n=document.createElement("output");n.value=t||0;var r=function(e){n.value=e.currentTarget.value};return e.addEventListener("change",r,!1),e.addEventListener("input",r,!1),n}},{key:"getRangeControl",value:function(e,t){var n=document.createElement("div");return n.classList.add("je-range-control"),t&&n.appendChild(t),n.appendChild(e),n}},{key:"getFormInputField",value:function(e){var t=document.createElement("input");return t.setAttribute("type",e),t}},{key:"afterInputReady",value:function(e){}},{key:"getFormControl",value:function(e,t,n,r){var i=document.createElement("div");return i.classList.add("form-control"),e&&i.appendChild(e),"checkbox"!==t.type&&"radio"!==t.type||!e?(r&&e&&e.appendChild(r),i.appendChild(t)):(t.style.width="auto",e.insertBefore(t,e.firstChild),r&&e.appendChild(r)),n&&i.appendChild(n),i}},{key:"getIndentedPanel",value:function(){var e=document.createElement("div");return e.classList.add("je-indented-panel"),e}},{key:"getTopIndentedPanel",value:function(){var e=document.createElement("div");return e.classList.add("je-indented-panel--top"),e}},{key:"getChildEditorHolder",value:function(){return document.createElement("div")}},{key:"getDescription",value:function(e){var t=document.createElement("p");return window.DOMPurify?t.innerHTML=window.DOMPurify.sanitize(e):t.textContent=this.cleanText(e),t}},{key:"getCheckboxDescription",value:function(e){return this.getDescription(e)}},{key:"getFormInputDescription",value:function(e){return this.getDescription(e)}},{key:"getButtonHolder",value:function(){return document.createElement("span")}},{key:"getHeaderButtonHolder",value:function(){return this.getButtonHolder()}},{key:"getFormButtonHolder",value:function(e){return this.getButtonHolder()}},{key:"getButton",value:function(e,t,n){var r=document.createElement("button");return r.type="button",this.setButtonText(r,e,t,n),r}},{key:"getFormButton",value:function(e,t,n){return this.getButton(e,t,n)}},{key:"setButtonText",value:function(e,t,n,r){for(;e.firstChild;)e.removeChild(e.firstChild);if(n&&(e.appendChild(n),t=" ".concat(t)),!this.jsoneditor.options.iconlib||!this.jsoneditor.options.remove_button_labels||!n){var i=document.createElement("span");i.appendChild(document.createTextNode(t)),e.appendChild(i)}r&&e.setAttribute("title",r)}},{key:"getTable",value:function(){return document.createElement("table")}},{key:"getTableRow",value:function(){return document.createElement("tr")}},{key:"getTableHead",value:function(){return document.createElement("thead")}},{key:"getTableBody",value:function(){return document.createElement("tbody")}},{key:"getTableHeaderCell",value:function(e){var t=document.createElement("th");return t.textContent=e,t}},{key:"getTableCell",value:function(){return document.createElement("td")}},{key:"getErrorMessage",value:function(e){var t=document.createElement("p");return t.style=t.style||{},t.style.color="red",t.appendChild(document.createTextNode(e)),t}},{key:"addInputError",value:function(e,t){}},{key:"removeInputError",value:function(e){}},{key:"addTableRowError",value:function(e){}},{key:"removeTableRowError",value:function(e){}},{key:"getTabHolder",value:function(e){var t=void 0===e?"":e,n=document.createElement("div");return n.innerHTML="<div class='je-tabholder tabs'></div><div class='content' id='".concat(t,"'></div><div class='je-tabholder--clear'></div>"),n}},{key:"getTopTabHolder",value:function(e){var t=void 0===e?"":e,n=document.createElement("div");return n.innerHTML="<div class='tabs je-tabholder--top'></div><div class='je-tabholder--clear'></div><div class='content' id='".concat(t,"'></div>"),n}},{key:"applyStyles",value:function(e,t){Object.keys(t).forEach((function(n){return e.style[n]=t[n]}))}},{key:"closest",value:function(e,t){for(;e&&e!==document;){if(!e[Jo])return!1;if(e[Jo](t))return e;e=e.parentNode}return!1}},{key:"insertBasicTopTab",value:function(e,t){t.firstChild.insertBefore(e,t.firstChild.firstChild)}},{key:"getTab",value:function(e,t){var n=document.createElement("div");return n.appendChild(e),n.id=t,n.classList.add("je-tab"),n}},{key:"getTopTab",value:function(e,t){var n=document.createElement("div");return n.appendChild(e),n.id=t,n.classList.add("je-tab--top"),n}},{key:"getTabContentHolder",value:function(e){return e.children[1]}},{key:"getTopTabContentHolder",value:function(e){return e.children[1]}},{key:"getTabContent",value:function(){return this.getIndentedPanel()}},{key:"getTopTabContent",value:function(){return this.getTopIndentedPanel()}},{key:"markTabActive",value:function(e){this.applyStyles(e.tab,{opacity:1,background:"white"}),void 0!==e.rowPane?e.rowPane.style.display="":e.container.style.display=""}},{key:"markTabInactive",value:function(e){this.applyStyles(e.tab,{opacity:.5,background:""}),void 0!==e.rowPane?e.rowPane.style.display="none":e.container.style.display="none"}},{key:"addTab",value:function(e,t){e.children[0].appendChild(t)}},{key:"addTopTab",value:function(e,t){e.children[0].appendChild(t)}},{key:"getBlockLink",value:function(){var e=document.createElement("a");return e.classList.add("je-block-link"),e}},{key:"getBlockLinkHolder",value:function(){return document.createElement("div")}},{key:"getLinksHolder",value:function(){return document.createElement("div")}},{key:"createMediaLink",value:function(e,t,n){e.appendChild(t),n.classList.add("je-media"),e.appendChild(n)}},{key:"createImageLink",value:function(e,t,n){e.appendChild(t),t.appendChild(n)}},{key:"getFirstTab",value:function(e){return e.firstChild.firstChild}},{key:"getInputGroup",value:function(e,t){}},{key:"cleanText",value:function(e){var t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText}},{key:"getDropZone",value:function(e){var t=document.createElement("div");return t.setAttribute("data-text",e),t.classList.add("je-dropzone"),t}},{key:"getUploadPreview",value:function(e,t,n){var r=document.createElement("div");if(r.classList.add("je-upload-preview"),"image"===e.mimeType.substr(0,5)){var i=document.createElement("img");i.src=n,r.appendChild(i)}var o=document.createElement("div");o.innerHTML+="<strong>Name:</strong> ".concat(e.name,"<br><strong>Type:</strong> ").concat(e.type,"<br><strong>Size:</strong> ").concat(e.formattedSize),r.appendChild(o),r.appendChild(t);var a=document.createElement("div");return a.style.clear="left",r.appendChild(a),r}},{key:"getProgressBar",value:function(){var e=document.createElement("progress");return e.setAttribute("max",100),e.setAttribute("value",0),e}},{key:"updateProgressBar",value:function(e,t){e&&e.setAttribute("value",t)}},{key:"updateProgressBarUnknown",value:function(e){e&&e.removeAttribute("value")}}])&&Qo(t.prototype,n),e}();function Zo(e){return(Zo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Xo(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ea(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ta(e,t,n){return(ta="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=ia(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function na(e,t){return(na=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ra(e,t){return!t||"object"!==Zo(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ia(e){return(ia=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var oa=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&na(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ia(e);if(t){var i=ia(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return ra(this,n)}}(i);function i(){return Xo(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"getFormInputLabel",value:function(e,t){var n=ta(ia(i.prototype),"getFormInputLabel",this).call(this,e,t);return n.classList.add("je-form-input-label"),n}},{key:"getFormInputDescription",value:function(e){var t=ta(ia(i.prototype),"getFormInputDescription",this).call(this,e);return t.classList.add("je-form-input-label"),t}},{key:"getIndentedPanel",value:function(){var e=ta(ia(i.prototype),"getIndentedPanel",this).call(this);return e.classList.add("je-indented-panel"),e}},{key:"getTopIndentedPanel",value:function(){return this.getIndentedPanel()}},{key:"getChildEditorHolder",value:function(){var e=ta(ia(i.prototype),"getChildEditorHolder",this).call(this);return e.classList.add("je-child-editor-holder"),e}},{key:"getHeaderButtonHolder",value:function(){var e=this.getButtonHolder();return e.classList.add("je-header-button-holder"),e}},{key:"getTable",value:function(){var e=ta(ia(i.prototype),"getTable",this).call(this);return e.classList.add("je-table"),e}},{key:"addInputError",value:function(e,t){if(e.style.borderColor="red",e.errmsg)e.errmsg.style.display="block";else{var n=this.closest(e,".form-control");e.errmsg=document.createElement("div"),e.errmsg.setAttribute("class","errmsg"),e.errmsg.style=e.errmsg.style||{},e.errmsg.style.color="red",n.appendChild(e.errmsg)}e.errmsg.innerHTML="",e.errmsg.appendChild(document.createTextNode(t))}},{key:"removeInputError",value:function(e){e.style&&(e.style.borderColor=""),e.errmsg&&(e.errmsg.style.display="none")}}])&&ea(t.prototype,n),i}(Yo);oa.rules={".je-form-input-label":"display:block;margin-bottom:3px;font-weight:bold",".je-form-input-description":"display:inline-block;margin:0;font-size:0.8em;font-style:italic",".je-indented-panel":"padding:5px;margin:10px;border-radius:3px;border:1px%20solid%20%23ddd",".je-child-editor-holder":"margin-bottom:8px",".je-header-button-holder":"display:inline-block;margin-left:10px;font-size:0.8em;vertical-align:middle",".je-table":"margin-bottom:5px;border-bottom:1px%20solid%20%23ccc",".je-upload-preview img":"float:left;margin:0%200.5rem%200.5rem%200;max-width:100%25;max-height:5rem",".je-dropzone":"position:relative;margin:0.5rem%200;border:2px%20dashed%20black;width:100%25;height:60px;background:teal;transition:all%200.5s",".je-dropzone:before":"position:absolute;content:attr(data-text);color:rgba(0%2C%200%2C%200%2C%200.6);left:50%25;top:50%25;transform:translate(-50%25%2C%20-50%25)",".je-dropzone.valid-dropzone":"background:green",".je-dropzone.invalid-dropzone":"background:red"};var aa=n(137),sa=n.n(aa);function la(e){return(la="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ua(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ca(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function fa(e,t,n){return(fa="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=ha(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function da(e,t){return(da=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function pa(e,t){return!t||"object"!==la(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ha(e){return(ha=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ya=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&da(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ha(e);if(t){var i=ha(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return pa(this,n)}}(i);function i(){return ua(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"getSelectInput",value:function(e,t){var n=fa(ha(i.prototype),"getSelectInput",this).call(this,e);return n.classList.add("form-control"),n}},{key:"setGridColumnSize",value:function(e,t,n){e.classList.add("col-md-".concat(t)),n&&e.classList.add("col-md-offset-".concat(n))}},{key:"afterInputReady",value:function(e){if(!e.controlgroup&&(e.controlgroup=this.closest(e,".form-group"),this.closest(e,".compact")&&(e.controlgroup.style.marginBottom=0),this.queuedInputErrorText)){var t=this.queuedInputErrorText;delete this.queuedInputErrorText,this.addInputError(e,t)}}},{key:"getTextareaInput",value:function(){var e=document.createElement("textarea");return e.classList.add("form-control"),e}},{key:"getRangeInput",value:function(e,t,n){return fa(ha(i.prototype),"getRangeInput",this).call(this,e,t,n)}},{key:"getFormInputField",value:function(e){var t=fa(ha(i.prototype),"getFormInputField",this).call(this,e);return"checkbox"!==e&&"radio"!==e&&t.classList.add("form-control"),t}},{key:"getFormControl",value:function(e,t,n){var r=document.createElement("div");return!e||"checkbox"!==t.type&&"radio"!==t.type?(r.classList.add("form-group"),e&&(e.classList.add("control-label"),r.appendChild(e)),r.appendChild(t)):(r.classList.add(t.type),e.insertBefore(t,e.firstChild),r.appendChild(e)),n&&r.appendChild(n),r}},{key:"getIndentedPanel",value:function(){var e=document.createElement("div");return e.classList.add("well","well-sm"),e.style.paddingBottom=0,e}},{key:"getInfoButton",value:function(e){var t=document.createElement("span");t.classList.add("glyphicon","glyphicon-info-sign","pull-right"),t.style.padding=".25rem",t.style.position="relative",t.style.display="inline-block";var n=document.createElement("span");return n.style["font-family"]="sans-serif",n.style.visibility="hidden",n.style["background-color"]="rgba(50, 50, 50, .75)",n.style.margin="0 .25rem",n.style.color="#FAFAFA",n.style.padding=".5rem 1rem",n.style["border-radius"]=".25rem",n.style.width="25rem",n.style.transform="translateX(-27rem) translateY(-.5rem)",n.style.position="absolute",n.innerText=e,t.onmouseover=function(){n.style.visibility="visible"},t.onmouseleave=function(){n.style.visibility="hidden"},t.appendChild(n),t}},{key:"getFormInputDescription",value:function(e){var t=document.createElement("p");return t.classList.add("help-block"),window.DOMPurify?t.innerHTML=window.DOMPurify.sanitize(e):t.textContent=this.cleanText(e),t}},{key:"getHeaderButtonHolder",value:function(){var e=this.getButtonHolder();return e.style.marginLeft="10px",e}},{key:"getButtonHolder",value:function(){var e=document.createElement("span");return e.classList.add("btn-group"),e}},{key:"getButton",value:function(e,t,n){var r=fa(ha(i.prototype),"getButton",this).call(this,e,t,n);return r.classList.add("btn","btn-default"),r}},{key:"getTable",value:function(){var e=document.createElement("table");return e.classList.add("table","table-bordered"),e.style.width="auto",e.style.maxWidth="none",e}},{key:"addInputError",value:function(e,t){e.controlgroup?(e.controlgroup.classList.add("has-error"),e.errmsg?e.errmsg.style.display="":(e.errmsg=document.createElement("p"),e.errmsg.classList.add("help-block","errormsg"),e.controlgroup.appendChild(e.errmsg)),e.errmsg.textContent=t):this.queuedInputErrorText=t}},{key:"removeInputError",value:function(e){e.controlgroup||delete this.queuedInputErrorText,e.errmsg&&(e.errmsg.style.display="none",e.controlgroup.classList.remove("has-error"))}},{key:"getTabHolder",value:function(e){var t=void 0===e?"":e,n=document.createElement("div");return n.innerHTML="<ul class='col-md-2 nav nav-pills nav-stacked' id='".concat(t,"' role='tablist'></ul><div class='col-md-10 tab-content well well-small'  id='").concat(t,"'></div>"),n}},{key:"getTopTabHolder",value:function(e){var t=void 0===e?"":e,n=document.createElement("div");return n.innerHTML="<ul class='nav nav-tabs' id='".concat(t,"' role='tablist'></ul><div class='tab-content well well-small'  id='").concat(t,"'></div>"),n}},{key:"getTab",value:function(e,t){var n=document.createElement("li");n.setAttribute("role","presentation");var r=document.createElement("a");return r.setAttribute("href","#".concat(t)),r.appendChild(e),r.setAttribute("aria-controls",t),r.setAttribute("role","tab"),r.setAttribute("data-toggle","tab"),n.appendChild(r),n}},{key:"getTopTab",value:function(e,t){var n=document.createElement("li");n.setAttribute("role","presentation");var r=document.createElement("a");return r.setAttribute("href","#".concat(t)),r.appendChild(e),r.setAttribute("aria-controls",t),r.setAttribute("role","tab"),r.setAttribute("data-toggle","tab"),n.appendChild(r),n}},{key:"getTabContent",value:function(){var e=document.createElement("div");return e.classList.add("tab-pane"),e.setAttribute("role","tabpanel"),e}},{key:"getTopTabContent",value:function(){var e=document.createElement("div");return e.classList.add("tab-pane"),e.setAttribute("role","tabpanel"),e}},{key:"markTabActive",value:function(e){e.tab.classList.add("active"),void 0!==e.rowPane?e.rowPane.classList.add("active"):e.container.classList.add("active")}},{key:"markTabInactive",value:function(e){e.tab.classList.remove("active"),void 0!==e.rowPane?e.rowPane.classList.remove("active"):e.container.classList.remove("active")}},{key:"getProgressBar",value:function(){var e=document.createElement("div");e.classList.add("progress");var t=document.createElement("div");return t.classList.add("progress-bar"),t.setAttribute("role","progressbar"),t.setAttribute("aria-valuenow",0),t.setAttribute("aria-valuemin",0),t.setAttribute("aria-valuenax",100),t.innerHTML="".concat(0,"%"),e.appendChild(t),e}},{key:"updateProgressBar",value:function(e,t){if(e){var n=e.firstChild,r="".concat(t,"%");n.setAttribute("aria-valuenow",t),n.style.width=r,n.innerHTML=r}}},{key:"updateProgressBarUnknown",value:function(e){if(e){var t=e.firstChild;e.classList.add("progress","progress-striped","active"),t.removeAttribute("aria-valuenow"),t.style.width="100%",t.innerHTML=""}}},{key:"getInputGroup",value:function(e,t){if(e){var n=document.createElement("div");n.classList.add("input-group"),n.appendChild(e);var r=document.createElement("div");r.classList.add("input-group-btn"),n.appendChild(r);for(var i=0;i<t.length;i++)r.appendChild(t[i]);return n}}}])&&ca(t.prototype,n),i}(Yo);function ma(e){return(ma="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function va(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ba(e,t,n){return(ba="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=wa(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function ga(e,t){return(ga=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _a(e,t){return!t||"object"!==ma(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function wa(e){return(wa=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}ya.rules=sa.a,n(165);var ka={disable_theme_rules:!1,input_size:"normal",custom_forms:!1,object_indent:!0,object_background:"bg-light",object_text:"",table_border:!1,table_zebrastyle:!1,tooltip:"bootstrap"},xa=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ga(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=wa(e);if(t){var i=wa(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return _a(this,n)}}(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),r.call(this,e,ka)}return t=i,(n=[{key:"getSelectInput",value:function(e,t){var n=ba(wa(i.prototype),"getSelectInput",this).call(this,e);return n.classList.add("form-control"),!1===this.options.custom_forms?("small"===this.options.input_size&&n.classList.add("form-control-sm"),"large"===this.options.input_size&&n.classList.add("form-control-lg")):(n.classList.remove("form-control"),n.classList.add("custom-select"),"small"===this.options.input_size&&n.classList.add("custom-select-sm"),"large"===this.options.input_size&&n.classList.add("custom-select-lg")),n}},{key:"getContainer",value:function(){var e=document.createElement("div");return this.options.object_indent||e.classList.add("je-noindent"),e}},{key:"setGridColumnSize",value:function(e,t,n){e.classList.add("col-md-".concat(t)),n&&e.classList.add("offset-md-".concat(n))}},{key:"afterInputReady",value:function(e){if(!e.controlgroup){var t=e.name;e.id=t;var n=e.parentNode.parentNode.getElementsByTagName("label")[0];n&&(n.htmlFor=t),e.controlgroup=this.closest(e,".form-group")}}},{key:"getTextareaInput",value:function(){var e=document.createElement("textarea");return e.classList.add("form-control"),"small"===this.options.input_size&&e.classList.add("form-control-sm"),"large"===this.options.input_size&&e.classList.add("form-control-lg"),e}},{key:"getRangeInput",value:function(e,t,n){var r=ba(wa(i.prototype),"getRangeInput",this).call(this,e,t,n);return!0===this.options.custom_forms&&(r.classList.remove("form-control"),r.classList.add("custom-range")),r}},{key:"getStepperButtons",value:function(e){var t=document.createElement("div"),n=document.createElement("div"),r=document.createElement("div"),i=document.createElement("button");i.setAttribute("type","button");var o=document.createElement("button");o.setAttribute("type","button"),t.appendChild(n),t.appendChild(e),t.appendChild(r),n.appendChild(i),r.appendChild(o),t.classList.add("input-group"),n.classList.add("input-group-prepend"),r.classList.add("input-group-append"),i.classList.add("btn"),i.classList.add("btn-secondary"),i.classList.add("stepper-down"),o.classList.add("btn"),o.classList.add("btn-secondary"),o.classList.add("stepper-up"),e.getAttribute("readonly")&&(i.setAttribute("disabled",!0),o.setAttribute("disabled",!0)),i.textContent="-",o.textContent="+";var a=function(e,t){e.value=Number(t||e.value),e.setAttribute("initialized","1")},s=e.getAttribute("min"),l=e.getAttribute("max");return i.addEventListener("click",(function(){e.getAttribute("initialized")?s?Number(e.value)>Number(s)&&e.stepDown():e.stepDown():a(e,s),p(e,"change")})),o.addEventListener("click",(function(){e.getAttribute("initialized")?l?Number(e.value)<Number(l)&&e.stepUp():e.stepUp():a(e,s),p(e,"change")})),t}},{key:"getFormInputField",value:function(e){var t=ba(wa(i.prototype),"getFormInputField",this).call(this,e);return"checkbox"!==e&&"radio"!==e&&"file"!==e&&(t.classList.add("form-control"),"small"===this.options.input_size&&t.classList.add("form-control-sm"),"large"===this.options.input_size&&t.classList.add("form-control-lg")),"file"===e&&t.classList.add("form-control-file"),t}},{key:"getFormControl",value:function(e,t,n,r){var i=document.createElement("div");if(i.classList.add("form-group"),!e||"checkbox"!==t.type&&"radio"!==t.type)e&&(i.appendChild(e),r&&i.appendChild(r)),i.appendChild(t);else{var o=document.createElement("div");!1===this.options.custom_forms?(o.classList.add("form-check"),t.classList.add("form-check-input"),e.classList.add("form-check-label")):(o.classList.add("custom-control"),t.classList.add("custom-control-input"),e.classList.add("custom-control-label"),"checkbox"===t.type?o.classList.add("custom-checkbox"):o.classList.add("custom-radio"));var a=(Date.now()*Math.random()).toFixed(0);t.setAttribute("id",a),e.setAttribute("for",a),o.appendChild(t),o.appendChild(e),r&&o.appendChild(r),i.appendChild(o)}return n&&i.appendChild(n),i}},{key:"getInfoButton",value:function(e){var t=document.createElement("button");t.type="button",t.classList.add("ml-3","jsoneditor-twbs4-text-button"),t.setAttribute("data-toggle","tooltip"),t.setAttribute("data-placement","auto"),t.title=e;var n=document.createTextNode("ⓘ");return t.appendChild(n),"bootstrap"===this.options.tooltip?window.jQuery&&window.jQuery().tooltip?window.jQuery(t).tooltip():console.warn("Could not find popper jQuery plugin of Bootstrap."):"css"===this.options.tooltip&&t.classList.add("je-tooltip"),t}},{key:"getCheckbox",value:function(){return this.getFormInputField("checkbox")}},{key:"getMultiCheckboxHolder",value:function(e,t,n,r){var i=document.createElement("div");i.classList.add("form-group"),t&&(i.appendChild(t),r&&t.appendChild(r));var o=document.createElement("div");return Object.values(e).forEach((function(e){var t=e.firstChild;o.appendChild(t)})),i.appendChild(o),n&&i.appendChild(n),i}},{key:"getFormRadio",value:function(e){var t=this.getFormInputField("radio");for(var n in e)t.setAttribute(n,e[n]);return!1===this.options.custom_forms?t.classList.add("form-check-input"):t.classList.add("custom-control-input"),t}},{key:"getFormRadioLabel",value:function(e,t){var n=document.createElement("label");return!1===this.options.custom_forms?n.classList.add("form-check-label"):n.classList.add("custom-control-label"),n.appendChild(document.createTextNode(e)),n}},{key:"getFormRadioControl",value:function(e,t,n){var r=document.createElement("div");return!1===this.options.custom_forms?r.classList.add("form-check"):r.classList.add("custom-control","custom-radio"),r.appendChild(t),r.appendChild(e),n&&(!1===this.options.custom_forms?r.classList.add("form-check-inline"):r.classList.add("custom-control-inline")),r}},{key:"getIndentedPanel",value:function(){var e=document.createElement("div");return e.classList.add("card","card-body","mb-3"),this.options.object_background&&e.classList.add(this.options.object_background),this.options.object_text&&e.classList.add(this.options.object_text),e}},{key:"getFormInputDescription",value:function(e){var t=document.createElement("small");return t.classList.add("form-text"),window.DOMPurify?t.innerHTML=window.DOMPurify.sanitize(e):t.textContent=this.cleanText(e),t}},{key:"getHeader",value:function(e){var t=document.createElement("h3");return t.classList.add("card-title"),"string"==typeof e?t.textContent=e:t.appendChild(e),t.style.display="inline-block",t}},{key:"getHeaderButtonHolder",value:function(){return this.getButtonHolder()}},{key:"getButtonHolder",value:function(){var e=document.createElement("span");return e.classList.add("btn-group"),e}},{key:"getFormButtonHolder",value:function(e){var t=this.getButtonHolder();return t.classList.add("d-block"),"center"===e?t.classList.add("text-center"):"right"===e&&t.classList.add("text-right"),t}},{key:"getButton",value:function(e,t,n){var r=ba(wa(i.prototype),"getButton",this).call(this,e,t,n);return r.classList.add("btn","btn-secondary","btn-sm"),r}},{key:"getTable",value:function(){var e=document.createElement("table");return e.classList.add("table","table-sm"),this.options.table_border&&e.classList.add("table-bordered"),this.options.table_zebrastyle&&e.classList.add("table-striped"),e}},{key:"getErrorMessage",value:function(e){var t=document.createElement("div");return t.classList.add("alert","alert-danger"),t.setAttribute("role","alert"),t.appendChild(document.createTextNode(e)),t}},{key:"addInputError",value:function(e,t){e.controlgroup&&(e.classList.add("is-invalid"),e.errmsg||(e.errmsg=document.createElement("p"),e.errmsg.classList.add("invalid-feedback"),e.controlgroup.appendChild(e.errmsg),e.errmsg.style.display="block"),e.errmsg.style.display="block",e.errmsg.textContent=t)}},{key:"removeInputError",value:function(e){e.errmsg&&(e.errmsg.style.display="none",e.classList.remove("is-invalid"))}},{key:"getTabHolder",value:function(e){var t=document.createElement("div"),n=void 0===e?"":e;return t.innerHTML="<div class='col-md-2' id='".concat(n,"'><ul class='nav flex-column nav-pills'></ul></div><div class='col-md-10'><div class='tab-content' id='").concat(n,"'></div></div>"),t.classList.add("row"),t}},{key:"addTab",value:function(e,t){e.children[0].children[0].appendChild(t)}},{key:"getTabContentHolder",value:function(e){return e.children[1].children[0]}},{key:"getTopTabHolder",value:function(e){var t=void 0===e?"":e,n=document.createElement("div");return n.classList.add("card"),n.innerHTML="<div class='card-header'><ul class='nav nav-tabs card-header-tabs' id='".concat(t,"'></ul></div><div class='card-body'><div class='tab-content' id='").concat(t,"'></div></div>"),n}},{key:"getTab",value:function(e,t){var n=document.createElement("li");n.classList.add("nav-item");var r=document.createElement("a");return r.classList.add("nav-link"),r.setAttribute("href","#".concat(t)),r.setAttribute("data-toggle","tab"),r.appendChild(e),n.appendChild(r),n}},{key:"getTopTab",value:function(e,t){var n=document.createElement("li");n.classList.add("nav-item");var r=document.createElement("a");return r.classList.add("nav-link"),r.setAttribute("href","#".concat(t)),r.setAttribute("data-toggle","tab"),r.appendChild(e),n.appendChild(r),n}},{key:"getTabContent",value:function(){var e=document.createElement("div");return e.classList.add("tab-pane"),e.setAttribute("role","tabpanel"),e}},{key:"getTopTabContent",value:function(){var e=document.createElement("div");return e.classList.add("tab-pane"),e.setAttribute("role","tabpanel"),e}},{key:"markTabActive",value:function(e){e.tab.firstChild.classList.add("active"),void 0!==e.rowPane?e.rowPane.classList.add("active"):e.container.classList.add("active")}},{key:"markTabInactive",value:function(e){e.tab.firstChild.classList.remove("active"),void 0!==e.rowPane?e.rowPane.classList.remove("active"):e.container.classList.remove("active")}},{key:"insertBasicTopTab",value:function(e,t){t.children[0].children[0].insertBefore(e,t.children[0].children[0].firstChild)}},{key:"addTopTab",value:function(e,t){e.children[0].children[0].appendChild(t)}},{key:"getTopTabContentHolder",value:function(e){return e.children[1].children[0]}},{key:"getFirstTab",value:function(e){return e.firstChild.firstChild.firstChild}},{key:"getProgressBar",value:function(){var e=document.createElement("div");e.classList.add("progress");var t=document.createElement("div");return t.classList.add("progress-bar"),t.setAttribute("role","progressbar"),t.setAttribute("aria-valuenow",0),t.setAttribute("aria-valuemin",0),t.setAttribute("aria-valuenax",100),t.innerHTML="".concat(0,"%"),e.appendChild(t),e}},{key:"updateProgressBar",value:function(e,t){if(e){var n=e.firstChild,r="".concat(t,"%");n.setAttribute("aria-valuenow",t),n.style.width=r,n.innerHTML=r}}},{key:"updateProgressBarUnknown",value:function(e){if(e){var t=e.firstChild;e.classList.add("progress","progress-striped","active"),t.removeAttribute("aria-valuenow"),t.style.width="100%",t.innerHTML=""}}},{key:"getBlockLink",value:function(){var e=document.createElement("a");return e.classList.add("mb-3","d-inline-block"),e}},{key:"getLinksHolder",value:function(){return document.createElement("div")}},{key:"getInputGroup",value:function(e,t){if(e){var n=document.createElement("div");n.classList.add("input-group"),n.appendChild(e);var r=document.createElement("div");r.classList.add("input-group-append"),n.appendChild(r);for(var i=0;i<t.length;i++)t[i].classList.remove("mr-2","btn-secondary"),t[i].classList.add("btn-outline-secondary"),r.appendChild(t[i]);return n}}}])&&va(t.prototype,n),i}(Yo);function Ca(e){return(Ca="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ea(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Oa(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Sa(e,t,n){return(Sa="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Pa(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function ja(e,t){return(ja=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Aa(e,t){return!t||"object"!==Ca(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Pa(e){return(Pa=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}xa.rules={".jsoneditor-twbs4-text-button":"background:none;padding:0;border:0;color:currentColor","td > .form-group":"margin-bottom:0",".json-editor-btn-upload":"margin-top:1rem",".je-noindent .card":"padding:0;border:0",".je-tooltip:hover::before":"display:block;position:absolute;font-size:0.8em;color:%23fff;border-radius:0.2em;content:attr(title);background-color:%23000;margin-top:-2.5em;padding:0.3em",".je-tooltip:hover::after":"display:block;position:absolute;font-size:0.8em;color:%23fff",".select2-container--default .select2-selection--single":"height:calc(1.5em%20%2B%200.75rem%20%2B%202px)",".select2-container--default   .select2-selection--single   .select2-selection__arrow":"height:calc(1.5em%20%2B%200.75rem%20%2B%202px)",".select2-container--default   .select2-selection--single   .select2-selection__rendered":"line-height:calc(1.5em%20%2B%200.75rem%20%2B%202px)",".selectize-control.form-control":"padding:0",".selectize-dropdown.form-control":"padding:0;height:auto",".je-upload-preview img":"float:left;margin:0%200.5rem%200.5rem%200;max-width:100%25;max-height:5rem",".je-dropzone":"position:relative;margin:0.5rem%200;border:2px%20dashed%20black;width:100%25;height:60px;background:teal;transition:all%200.5s",".je-dropzone:before":"position:absolute;content:attr(data-text);color:rgba(0%2C%200%2C%200%2C%200.6);left:50%25;top:50%25;transform:translate(-50%25%2C%20-50%25)",".je-dropzone.valid-dropzone":"background:green",".je-dropzone.invalid-dropzone":"background:red"};var Ta=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ja(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Pa(e);if(t){var i=Pa(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Aa(this,n)}}(i);function i(){return Ea(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"getTable",value:function(){var e=Sa(Pa(i.prototype),"getTable",this).call(this);return e.setAttribute("cellpadding",5),e.setAttribute("cellspacing",0),e}},{key:"getTableHeaderCell",value:function(e){var t=Sa(Pa(i.prototype),"getTableHeaderCell",this).call(this,e);return t.classList.add("ui-state-active"),t.style.fontWeight="bold",t}},{key:"getTableCell",value:function(){var e=Sa(Pa(i.prototype),"getTableCell",this).call(this);return e.classList.add("ui-widget-content"),e}},{key:"getHeaderButtonHolder",value:function(){var e=this.getButtonHolder();return e.style.marginLeft="10px",e.style.fontSize=".6em",e.style.display="inline-block",e}},{key:"getFormInputDescription",value:function(e){var t=this.getDescription(e);return t.style.marginLeft="10px",t.style.display="inline-block",t}},{key:"getFormControl",value:function(e,t,n,r){var o=Sa(Pa(i.prototype),"getFormControl",this).call(this,e,t,n,r);return"checkbox"===t.type?(o.style.lineHeight="25px",o.style.padding="3px 0"):o.style.padding="4px 0 8px 0",o}},{key:"getDescription",value:function(e){var t=document.createElement("span");return t.style.fontSize=".8em",t.style.fontStyle="italic",window.DOMPurify?t.innerHTML=window.DOMPurify.sanitize(e):t.textContent=this.cleanText(e),t}},{key:"getButtonHolder",value:function(){var e=document.createElement("div");return e.classList.add("ui-buttonset"),e.style.fontSize=".7em",e}},{key:"getFormInputLabel",value:function(e,t){var n=document.createElement("label");return n.style.fontWeight="bold",n.style.display="block",n.textContent=e,t&&n.classList.add("required"),n}},{key:"getButton",value:function(e,t,n){var r=document.createElement("button");r.classList.add("ui-button","ui-widget","ui-state-default","ui-corner-all"),t&&!e?(r.classList.add("ui-button-icon-only"),t.classList.add("ui-button-icon-primary","ui-icon-primary"),r.appendChild(t)):t?(r.classList.add("ui-button-text-icon-primary"),t.classList.add("ui-button-icon-primary","ui-icon-primary"),r.appendChild(t)):r.classList.add("ui-button-text-only");var i=document.createElement("span");return i.classList.add("ui-button-text"),i.textContent=e||n||".",r.appendChild(i),r.setAttribute("title",n),r}},{key:"setButtonText",value:function(e,t,n,r){e.innerHTML="",e.classList.add("ui-button","ui-widget","ui-state-default","ui-corner-all"),n&&!t?(e.classList.add("ui-button-icon-only"),n.classList.add("ui-button-icon-primary","ui-icon-primary"),e.appendChild(n)):n?(e.classList.add("ui-button-text-icon-primary"),n.classList.add("ui-button-icon-primary","ui-icon-primary"),e.appendChild(n)):e.classList.add("ui-button-text-only");var i=document.createElement("span");i.classList.add("ui-button-text"),i.textContent=t||r||".",e.appendChild(i),e.setAttribute("title",r)}},{key:"getIndentedPanel",value:function(){var e=document.createElement("div");return e.classList.add("ui-widget-content","ui-corner-all"),e.style.padding="1em 1.4em",e.style.marginBottom="20px",e}},{key:"afterInputReady",value:function(e){if(!e.controls&&(e.controls=this.closest(e,".form-control"),this.queuedInputErrorText)){var t=this.queuedInputErrorText;delete this.queuedInputErrorText,this.addInputError(e,t)}}},{key:"addInputError",value:function(e,t){e.controls?(e.errmsg?e.errmsg.style.display="":(e.errmsg=document.createElement("div"),e.errmsg.classList.add("ui-state-error"),e.controls.appendChild(e.errmsg)),e.errmsg.textContent=t):this.queuedInputErrorText=t}},{key:"removeInputError",value:function(e){e.controls||delete this.queuedInputErrorText,e.errmsg&&(e.errmsg.style.display="none")}},{key:"markTabActive",value:function(e){e.tab.classList.remove("ui-widget-header"),e.tab.classList.add("ui-state-active"),void 0!==e.rowPane?e.rowPane.style.display="":e.container.style.display=""}},{key:"markTabInactive",value:function(e){e.tab.classList.add("ui-widget-header"),e.tab.classList.remove("ui-state-active"),void 0!==e.rowPane?e.rowPane.style.display="none":e.container.style.display="none"}}])&&Oa(t.prototype,n),i}(Yo);function Ra(e){return(Ra="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function La(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ia(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Na(e,t){return(Na=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ba(e,t){return!t||"object"!==Ra(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Da(e){return(Da=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}Ta.rules={'div[data-schemaid="root"]:after':'position:relative;color:red;margin:10px 0;font-weight:600;display:block;width:100%;text-align:center;content:"This is an old JSON-Editor 1.x Theme and might not display elements correctly when used with the 2.x version"'};var Ma=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Na(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Da(e);if(t){var i=Da(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Ba(this,n)}}(i);function i(){return La(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"addInputError",value:function(e,t){if(e.errmsg)e.errmsg.style.display="block";else{var n=this.closest(e,".form-control");e.errmsg=document.createElement("div"),e.errmsg.setAttribute("class","errmsg"),n.appendChild(e.errmsg)}e.errmsg.innerHTML="",e.errmsg.appendChild(document.createTextNode(t))}},{key:"removeInputError",value:function(e){e.style&&(e.style.borderColor=""),e.errmsg&&(e.errmsg.style.display="none")}}])&&Ia(t.prototype,n),i}(Yo);function Fa(e){return(Fa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function za(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Va(e,t,n){return(Va="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=qa(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Ha(e,t){return(Ha=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ua(e,t){return!t||"object"!==Fa(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function qa(e){return(qa=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}Ma.rules={".je-upload-preview img":"float:left;margin:0%200.5rem%200.5rem%200;max-width:100%25;max-height:5rem",".je-dropzone":"position:relative;margin:0.5rem%200;border:2px%20dashed%20black;width:100%25;height:60px;background:teal;transition:all%200.5s",".je-dropzone:before":"position:absolute;content:attr(data-text);color:rgba(0%2C%200%2C%200%2C%200.6);left:50%25;top:50%25;transform:translate(-50%25%2C%20-50%25)",".je-dropzone.valid-dropzone":"background:green",".je-dropzone.invalid-dropzone":"background:red"};var Wa={disable_theme_rules:!1,label_bold:!0,align_bottom:!1,object_indent:!1,object_border:!1,table_border:!1,table_zebrastyle:!1,input_size:"normal"},$a=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ha(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=qa(e);if(t){var i=qa(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Ua(this,n)}}(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),r.call(this,e,Wa)}return t=i,(n=[{key:"setGridColumnSize",value:function(e,t,n){e.classList.add("col-".concat(t)),n&&e.classList.add("col-mx-auto")}},{key:"getGridContainer",value:function(){var e=document.createElement("div");return e.classList.add("container"),this.options.object_indent||e.classList.add("je-noindent"),e}},{key:"getGridRow",value:function(){var e=document.createElement("div");return e.classList.add("columns"),e}},{key:"getGridColumn",value:function(){var e=document.createElement("div");return e.classList.add("column"),this.options.align_bottom&&e.classList.add("je-align-bottom"),e}},{key:"getIndentedPanel",value:function(){var e=document.createElement("div");return e.classList.add("je-panel"),this.options.object_border&&e.classList.add("je-border"),e}},{key:"getTopIndentedPanel",value:function(){var e=document.createElement("div");return e.classList.add("je-panel-top"),this.options.object_border&&e.classList.add("je-border"),e}},{key:"getHeaderButtonHolder",value:function(){return this.getButtonHolder()}},{key:"getButtonHolder",value:function(){var e=Va(qa(i.prototype),"getButtonHolder",this).call(this);return e.classList.add("btn-group"),e}},{key:"getFormButtonHolder",value:function(e){var t=Va(qa(i.prototype),"getFormButtonHolder",this).call(this);return t.classList.remove("btn-group"),t.classList.add("d-block"),"center"===e?t.classList.add("text-center"):"right"===e?t.classList.add("text-right"):t.classList.add("text-left"),t}},{key:"getFormButton",value:function(e,t,n){var r=Va(qa(i.prototype),"getFormButton",this).call(this,e,t,n);return r.classList.add("btn","btn-primary","mx-2","my-1"),"small"!==this.options.input_size&&r.classList.remove("btn-sm"),"large"===this.options.input_size&&r.classList.add("btn-lg"),r}},{key:"getButton",value:function(e,t,n){var r=Va(qa(i.prototype),"getButton",this).call(this,e,t,n);return r.classList.add("btn","btn-sm","btn-primary","mr-2","my-1"),r}},{key:"getHeader",value:function(e){var t=document.createElement("h4");return"string"==typeof e?t.textContent=e:t.appendChild(e),t.style.display="inline-block",t}},{key:"getFormInputDescription",value:function(e){var t=Va(qa(i.prototype),"getFormInputDescription",this).call(this,e);return t.classList.add("je-desc","hide-sm"),t}},{key:"getFormInputLabel",value:function(e,t){var n=Va(qa(i.prototype),"getFormInputLabel",this).call(this,e,t);return this.options.label_bold&&n.classList.add("je-label"),n}},{key:"getCheckbox",value:function(){return this.getFormInputField("checkbox")}},{key:"getCheckboxLabel",value:function(e,t){var n=Va(qa(i.prototype),"getCheckboxLabel",this).call(this,e,t),r=document.createElement("i");return r.classList.add("form-icon"),n.classList.add("form-checkbox","mr-5"),n.insertBefore(r,n.firstChild),n}},{key:"getFormCheckboxControl",value:function(e,t,n){return e.insertBefore(t,e.firstChild),n&&e.classList.add("form-inline"),e}},{key:"getMultiCheckboxHolder",value:function(e,t,n,r){return console.log("mul"),Va(qa(i.prototype),"getMultiCheckboxHolder",this).call(this,e,t,n,r)}},{key:"getFormRadio",value:function(e){var t=this.getFormInputField("radio");for(var n in e)t.setAttribute(n,e[n]);return t}},{key:"getFormRadioLabel",value:function(e,t){var n=Va(qa(i.prototype),"getFormRadioLabel",this).call(this,e,t),r=document.createElement("i");return r.classList.add("form-icon"),n.classList.add("form-radio"),n.insertBefore(r,n.firstChild),n}},{key:"getFormRadioControl",value:function(e,t,n){return e.insertBefore(t,e.firstChild),n&&e.classList.add("form-inline"),e}},{key:"getFormInputField",value:function(e){var t=Va(qa(i.prototype),"getFormInputField",this).call(this,e);return["checkbox","radio"].includes(e)||t.classList.add("form-input"),t}},{key:"getRangeInput",value:function(e,t,n){var r=this.getFormInputField("range");return r.classList.add("slider"),r.classList.remove("form-input"),r.setAttribute("oninput",'this.setAttribute("value", this.value)'),r.setAttribute("min",e),r.setAttribute("max",t),r.setAttribute("step",n),r}},{key:"getRangeControl",value:function(e,t){var n=Va(qa(i.prototype),"getRangeControl",this).call(this,e,t);return n.classList.add("text-center"),n}},{key:"getSelectInput",value:function(e,t){var n=Va(qa(i.prototype),"getSelectInput",this).call(this,e);return n.classList.add("form-select"),n}},{key:"getTextareaInput",value:function(){var e=document.createElement("textarea");return e.classList.add("form-input"),e}},{key:"getFormControl",value:function(e,t,n,r){var i=document.createElement("div");return i.classList.add("form-group"),e&&("checkbox"===t.type&&(e=this.getFormCheckboxControl(e,t,!1)),e.classList.add("form-label"),i.appendChild(e),r&&i.insertBefore(r,i.firstChild)),"small"===this.options.input_size?t.classList.add("input-sm","select-sm"):"large"===this.options.input_size&&t.classList.add("input-lg","select-lg"),"checkbox"!==t.type&&i.appendChild(t),n&&i.appendChild(n),i}},{key:"getInputGroup",value:function(e,t){if(e){var n=document.createElement("div");n.classList.add("input-group"),n.appendChild(e);for(var r=0;r<t.length;r++)t[r].classList.add("input-group-btn"),t[r].classList.remove("btn-sm","mr-2","my-1"),n.appendChild(t[r]);return n}}},{key:"getInfoButton",value:function(e){var t=document.createElement("div");t.classList.add("popover","popover-left","float-right");var n=document.createElement("button");n.classList.add("btn","btn-secondary","btn-info","btn-action","s-circle"),n.setAttribute("tabindex","-1"),t.appendChild(n);var r=document.createTextNode("I");n.appendChild(r);var i=document.createElement("div");i.classList.add("popover-container"),t.appendChild(i);var o=document.createElement("div");o.classList.add("card"),i.appendChild(o);var a=document.createElement("div");return a.classList.add("card-body"),a.innerHTML=e,o.appendChild(a),t}},{key:"getTable",value:function(){var e=Va(qa(i.prototype),"getTable",this).call(this);return e.classList.add("table","table-scroll"),this.options.table_border&&e.classList.add("je-table-border"),this.options.table_zebrastyle&&e.classList.add("table-striped"),e}},{key:"getProgressBar",value:function(){var e=Va(qa(i.prototype),"getProgressBar",this).call(this);return e.classList.add("progress"),e}},{key:"getTabHolder",value:function(e){var t=void 0===e?"":e,n=document.createElement("div");return n.classList.add("columns"),n.innerHTML='<div class="column col-2"></div><div class="column col-10 content" id="'.concat(t,'"></div>'),n}},{key:"getTopTabHolder",value:function(e){var t=void 0===e?"":e,n=document.createElement("div");return n.innerHTML='<ul class="tab"></ul><div class="content" id="'.concat(t,'"></div>'),n}},{key:"getTab",value:function(e,t){var n=document.createElement("a");return n.classList.add("btn","btn-secondary","btn-block"),n.setAttribute("href","#".concat(t)),n.appendChild(e),n}},{key:"getTopTab",value:function(e,t){var n=document.createElement("li");n.id=t,n.classList.add("tab-item");var r=document.createElement("a");return r.setAttribute("href","#".concat(t)),r.appendChild(e),n.appendChild(r),n}},{key:"markTabActive",value:function(e){e.tab.classList.add("active"),void 0!==e.rowPane?e.rowPane.style.display="":e.container.style.display=""}},{key:"markTabInactive",value:function(e){e.tab.classList.remove("active"),void 0!==e.rowPane?e.rowPane.style.display="none":e.container.style.display="none"}},{key:"afterInputReady",value:function(e){if("select"===e.localName)if(e.classList.contains("selectized")){var t=e.nextSibling;t&&(t.classList.remove("form-select"),Array.from(t.querySelectorAll(".form-select")).forEach((function(e){e.classList.remove("form-select")})))}else if(e.classList.contains("select2-hidden-accessible")){var n=e.nextSibling;n&&n.querySelector(".select2-selection--single")&&n.classList.add("form-select")}e.controlgroup||(e.controlgroup=this.closest(e,".form-group"),this.closest(e,".compact")&&(e.controlgroup.style.marginBottom=0))}},{key:"addInputError",value:function(e,t){e.controlgroup&&(e.controlgroup.classList.add("has-error"),e.errmsg||(e.errmsg=document.createElement("p"),e.errmsg.classList.add("form-input-hint"),e.controlgroup.appendChild(e.errmsg)),e.errmsg.classList.remove("d-hide"),e.errmsg.textContent=t)}},{key:"removeInputError",value:function(e){e.errmsg&&(e.errmsg.classList.add("d-hide"),e.controlgroup.classList.remove("has-error"))}}])&&za(t.prototype,n),i}(Yo);function Ga(e){return(Ga="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ka(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Qa(e,t,n){return(Qa="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Za(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}function Ja(e,t){return(Ja=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ya(e,t){return!t||"object"!==Ga(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Za(e){return(Za=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}$a.rules={"*":"--primary-color:%235755d9;--gray-color:%23bcc3ce;--light-color:%23fff",".slider:focus":"box-shadow:none","h4 > label + .btn-group":"margin-left:1rem",".text-right > button":"margin-right:0%20!important",".text-left > button":"margin-left:0%20!important",".property-selector":"font-size:0.7rem;font-weight:normal;max-height:260px%20!important;width:395px%20!important",".property-selector .form-checkbox":"margin:0",textarea:"width:100%25;min-height:2rem;resize:vertical",table:"border-collapse:collapse",".table td":"padding:0.4rem%200.4rem",".mr-5":"margin-right:1rem%20!important","div[data-schematype]:not([data-schematype='object'])":"transition:0.5s","div[data-schematype]:not([data-schematype='object']):hover":"background-color:%23eee",".je-table-border td":"border:0.05rem%20solid%20%23dadee4%20!important",".btn-info":"font-size:0.5rem;font-weight:bold;height:0.8rem;padding:0.15rem%200;line-height:0.8;margin:0.3rem%200%200.3rem%200.1rem",".je-label + select":"min-width:5rem",".je-label":"font-weight:600",".btn-action.btn-info":"width:0.8rem",".je-border":"border:0.05rem%20solid%20%23dadee4",".je-panel":"padding:0.2rem;margin:0.2rem;background-color:rgba(218%2C%20222%2C%20228%2C%200.1)",".je-panel-top":"padding:0.2rem;margin:0.2rem;background-color:rgba(218%2C%20222%2C%20228%2C%200.1)",".required:after":"content:%22%20*%22;color:red;font:inherit",".je-align-bottom":"margin-top:auto",".je-desc":"font-size:smaller;margin:0.2rem%200",".je-upload-preview img":"float:left;margin:0%200.5rem%200.5rem%200;max-width:100%25;max-height:5rem;border:3px%20solid%20white;box-shadow:0px%200px%208px%20rgba(0%2C%200%2C%200%2C%200.3);box-sizing:border-box",".je-dropzone":"position:relative;margin:0.5rem%200;border:2px%20dashed%20black;width:100%25;height:60px;background:teal;transition:all%200.5s",".je-dropzone:before":"position:absolute;content:attr(data-text);color:rgba(0%2C%200%2C%200%2C%200.6);left:50%25;top:50%25;transform:translate(-50%25%2C%20-50%25)",".je-dropzone.valid-dropzone":"background:green",".je-dropzone.invalid-dropzone":"background:red",".columns .container.je-noindent":"padding-left:0;padding-right:0",".selectize-control.multi .item":"background:var(--primary-color)%20!important",".select2-container--default   .select2-selection--single   .select2-selection__arrow":"display:none",".select2-container--default .select2-selection--single":"border:none",".select2-container .select2-selection--single .select2-selection__rendered":"padding:0",".select2-container .select2-search--inline .select2-search__field":"margin-top:0",".select2-container--default.select2-container--focus   .select2-selection--multiple":"border:0.05rem%20solid%20var(--gray-color)",".select2-container--default   .select2-selection--multiple   .select2-selection__choice":"margin:0.4rem%200.2rem%200.2rem%200;padding:2px%205px;background-color:var(--primary-color);color:var(--light-color)",".select2-container--default .select2-search--inline .select2-search__field":"line-height:normal",".choices":"margin-bottom:auto",".choices__list--multiple .choices__item":"border:none;background-color:var(--primary-color);color:var(--light-color)",".choices[data-type*='select-multiple'] .choices__button":"border-left:0.05rem%20solid%20%232826a6",".choices__inner":"font-size:inherit;min-height:20px;padding:4px%207.5px%204px%203.75px",".choices[data-type*='select-one'] .choices__inner":"padding-bottom:4px",".choices__list--dropdown .choices__item":"font-size:inherit"};var Xa={disable_theme_rules:!1,label_bold:!1,object_panel_default:!0,object_indent:!0,object_border:!1,table_border:!1,table_hdiv:!1,table_zebrastyle:!1,input_size:"small",enable_compact:!1},es=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ja(e,t)}(i,e);var t,n,r=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Za(e);if(t){var i=Za(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return Ya(this,n)}}(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),r.call(this,e,Xa)}return t=i,(n=[{key:"getGridContainer",value:function(){var e=document.createElement("div");return e.classList.add("flex","flex-col","w-full"),this.options.object_indent||e.classList.add("je-noindent"),e}},{key:"getGridRow",value:function(){var e=document.createElement("div");return e.classList.add("flex","flex-wrap","w-full"),e}},{key:"getGridColumn",value:function(){var e=document.createElement("div");return e.classList.add("flex","flex-col"),e}},{key:"setGridColumnSize",value:function(e,t,n){t>0&&t<12?e.classList.add("w-".concat(t,"/12"),"px-1"):e.classList.add("w-full","px-1"),n&&(e.style.marginLeft="".concat(100/12*n,"%"))}},{key:"getIndentedPanel",value:function(){var e=document.createElement("div");return this.options.object_panel_default?e.classList.add("w-full","p-1"):e.classList.add("relative","flex","flex-col","rounded","break-words","border","bg-white","border-0","border-blue-400","p-1","shadow-md"),this.options.object_border&&e.classList.add("je-border"),e}},{key:"getTopIndentedPanel",value:function(){var e=document.createElement("div");return this.options.object_panel_default?e.classList.add("w-full","m-2"):e.classList.add("relative","flex","flex-col","rounded","break-words","border","bg-white","border-0","border-blue-400","p-1","shadow-md"),this.options.object_border&&e.classList.add("je-border"),e}},{key:"getTitle",value:function(){return this.schema.title}},{key:"getSelectInput",value:function(e,t){var n=Qa(Za(i.prototype),"getSelectInput",this).call(this,e);return t?n.classList.add("form-multiselect","block","py-0","h-auto","w-full","px-1","text-sm","text-black","leading-normal","bg-white","border","border-grey","rounded"):n.classList.add("form-select","block","py-0","h-6","w-full","px-1","text-sm","text-black","leading-normal","bg-white","border","border-grey","rounded"),this.options.enable_compact&&n.classList.add("compact"),n}},{key:"afterInputReady",value:function(e){e.controlgroup||(e.controlgroup=this.closest(e,".form-group"),this.closest(e,".compact")&&(e.controlgroup.style.marginBottom=0))}},{key:"getTextareaInput",value:function(){var e=Qa(Za(i.prototype),"getTextareaInput",this).call(this);return e.classList.add("block","w-full","px-1","text-sm","leading-normal","bg-white","text-black","border","border-grey","rounded"),this.options.enable_compact&&e.classList.add("compact"),e.style.height=0,e}},{key:"getRangeInput",value:function(e,t,n){var r=this.getFormInputField("range");return r.classList.add("slider"),this.options.enable_compact&&r.classList.add("compact"),r.setAttribute("oninput",'this.setAttribute("value", this.value)'),r.setAttribute("min",e),r.setAttribute("max",t),r.setAttribute("step",n),r}},{key:"getRangeControl",value:function(e,t){var n=Qa(Za(i.prototype),"getRangeControl",this).call(this,e,t);return n.classList.add("text-center","text-black"),n}},{key:"getCheckbox",value:function(){var e=this.getFormInputField("checkbox");return e.classList.add("form-checkbox","text-red-600"),e}},{key:"getCheckboxLabel",value:function(e,t){var n=Qa(Za(i.prototype),"getCheckboxLabel",this).call(this,e,t);return n.classList.add("inline-flex","items-center"),n}},{key:"getFormCheckboxControl",value:function(e,t,n){return e.insertBefore(t,e.firstChild),n&&e.classList.add("inline-flex flex-row"),e}},{key:"getMultiCheckboxHolder",value:function(e,t,n,r){var o=Qa(Za(i.prototype),"getMultiCheckboxHolder",this).call(this,e,t,n,r);return o.classList.add("inline-flex","flex-col"),o}},{key:"getFormRadio",value:function(e){var t=this.getFormInputField("radio");for(var n in t.classList.add("form-radio","text-red-600"),e)t.setAttribute(n,e[n]);return t}},{key:"getFormRadioLabel",value:function(e,t){var n=Qa(Za(i.prototype),"getFormRadioLabel",this).call(this,e,t);return n.classList.add("inline-flex","items-center","mr-2"),n}},{key:"getFormRadioControl",value:function(e,t,n){return e.insertBefore(t,e.firstChild),n&&e.classList.add("form-radio"),e}},{key:"getRadioHolder",value:function(e,t,n,r,o){var a=Qa(Za(i.prototype),"getRadioHolder",this).call(this,t,n,r,o);return"h"===e.options.layout?a.classList.add("inline-flex","flex-row"):a.classList.add("inline-flex","flex-col"),a}},{key:"getFormInputLabel",value:function(e,t){var n=Qa(Za(i.prototype),"getFormInputLabel",this).call(this,e,t);return this.options.label_bold?n.classList.add("font-bold"):n.classList.add("required"),n}},{key:"getFormInputField",value:function(e){var t=Qa(Za(i.prototype),"getFormInputField",this).call(this,e);return["checkbox","radio"].includes(e)||t.classList.add("block","w-full","px-1","text-black","text-sm","leading-normal","bg-white","border","border-grey","rounded"),this.options.enable_compact&&t.classList.add("compact"),t}},{key:"getFormInputDescription",value:function(e){var t=document.createElement("p");return t.classList.add("block","mt-1","text-xs"),window.DOMPurify?t.innerHTML=window.DOMPurify.sanitize(e):t.textContent=this.cleanText(e),t}},{key:"getFormControl",value:function(e,t,n,r){var i=document.createElement("div");return i.classList.add("form-group","mb-1","w-full"),e&&(e.classList.add("text-xs"),"checkbox"===t.type&&(t.classList.add("form-checkbox","text-xs","text-red-600","mr-1"),e.classList.add("items-center","flex"),e=this.getFormCheckboxControl(e,t,!1,r)),"radio"===t.type&&(t.classList.add("form-radio","text-red-600","mr-1"),e.classList.add("items-center","flex"),e=this.getFormRadioControl(e,t,!1,r)),i.appendChild(e),!["checkbox","radio"].includes(t.type)&&r&&i.appendChild(r)),["checkbox","radio"].includes(t.type)||("small"===this.options.input_size?t.classList.add("text-xs"):"normal"===this.options.input_size?t.classList.add("text-base"):"large"===this.options.input_size&&t.classList.add("text-xl"),i.appendChild(t)),n&&i.appendChild(n),i}},{key:"getHeaderButtonHolder",value:function(){var e=this.getButtonHolder();return e.classList.add("text-sm"),e}},{key:"getButtonHolder",value:function(){var e=document.createElement("div");return e.classList.add("flex","relative","inline-flex","align-middle"),e}},{key:"getButton",value:function(e,t,n){var r=Qa(Za(i.prototype),"getButton",this).call(this,e,t,n);return r.classList.add("inline-block","align-middle","text-center","text-sm","bg-blue-700","text-white","py-1","pr-1","m-2","shadow","select-none","whitespace-no-wrap","rounded"),r}},{key:"getInfoButton",value:function(e){var t=document.createElement("a");t.classList.add("tooltips","float-right"),t.innerHTML="ⓘ";var n=document.createElement("span");return n.innerHTML=e,t.appendChild(n),t}},{key:"getTable",value:function(){var e=Qa(Za(i.prototype),"getTable",this).call(this);return this.options.table_border?e.classList.add("je-table-border"):e.classList.add("table","border","p-0"),e}},{key:"getTableRow",value:function(){var e=Qa(Za(i.prototype),"getTableRow",this).call(this);return this.options.table_border&&e.classList.add("je-table-border"),this.options.table_zebrastyle&&e.classList.add("je-table-zebra"),e}},{key:"getTableHeaderCell",value:function(e){var t=Qa(Za(i.prototype),"getTableHeaderCell",this).call(this,e);return this.options.table_border?t.classList.add("je-table-border"):this.options.table_hdiv?t.classList.add("je-table-hdiv"):t.classList.add("text-xs","border","p-0","m-0"),t}},{key:"getTableCell",value:function(){var e=Qa(Za(i.prototype),"getTableCell",this).call(this);return this.options.table_border?e.classList.add("je-table-border"):this.options.table_hdiv?e.classList.add("je-table-hdiv"):e.classList.add("border-0","p-0","m-0"),e}},{key:"addInputError",value:function(e,t){e.controlgroup&&(e.controlgroup.classList.add("has-error"),e.classList.add("bg-red-600"),e.errmsg?e.errmsg.style.display="":(e.errmsg=document.createElement("p"),e.errmsg.classList.add("block","mt-1","text-xs","text-red"),e.controlgroup.appendChild(e.errmsg)),e.errmsg.textContent=t)}},{key:"removeInputError",value:function(e){e.errmsg&&(e.errmsg.style.display="none",e.classList.remove("bg-red-600"),e.controlgroup.classList.remove("has-error"))}},{key:"getTabHolder",value:function(e){var t=document.createElement("div"),n=void 0===e?"":e;return t.innerHTML="<div class='w-2/12' id='".concat(n,"'><ul class='list-reset pl-0 mb-0'></ul></div><div class='w-10/12' id='").concat(n,"'></div>"),t.classList.add("flex"),t}},{key:"addTab",value:function(e,t){e.children[0].children[0].appendChild(t)}},{key:"getTopTabHolder",value:function(e){var t=void 0===e?"":e,n=document.createElement("div");return n.innerHTML="<ul class='nav-tabs flex list-reset pl-0 mb-0 border-b border-grey-light' id='".concat(t,"'></ul><div class='p-6 block' id='").concat(t,"'></div>"),n}},{key:"getTab",value:function(e,t){var n=document.createElement("li");n.classList.add("nav-item","flex-col","text-center","text-white","bg-blue-500","shadow-md","border","p-2","mb-2","mr-2","hover:bg-blue-400","rounded");var r=document.createElement("a");return r.classList.add("nav-link","text-center"),r.setAttribute("href","#".concat(t)),r.setAttribute("data-toggle","tab"),r.appendChild(e),n.appendChild(r),n}},{key:"getTopTab",value:function(e,t){var n=document.createElement("li");n.classList.add("nav-item","flex","border-l","border-t","border-r");var r=document.createElement("a");return r.classList.add("nav-link","-mb-px","flex-row","text-center","bg-white","p-2","hover:bg-blue-400","rounded-t"),r.setAttribute("href","#".concat(t)),r.setAttribute("data-toggle","tab"),r.appendChild(e),n.appendChild(r),n}},{key:"getTabContent",value:function(){var e=document.createElement("div");return e.setAttribute("role","tabpanel"),e}},{key:"getTopTabContent",value:function(){var e=document.createElement("div");return e.setAttribute("role","tabpanel"),e}},{key:"markTabActive",value:function(e){e.tab.firstChild.classList.add("block"),!0===e.tab.firstChild.classList.contains("border-b")?(e.tab.firstChild.classList.add("border-b-0"),e.tab.firstChild.classList.remove("border-b")):e.tab.firstChild.classList.add("border-b-0"),!0===e.container.classList.contains("hidden")?(e.container.classList.remove("hidden"),e.container.classList.add("block")):e.container.classList.add("block")}},{key:"markTabInactive",value:function(e){!0===e.tab.firstChild.classList.contains("border-b-0")?(e.tab.firstChild.classList.add("border-b"),e.tab.firstChild.classList.remove("border-b-0")):e.tab.firstChild.classList.add("border-b"),!0===e.container.classList.contains("block")&&(e.container.classList.remove("block"),e.container.classList.add("hidden"))}},{key:"getProgressBar",value:function(){var e=document.createElement("div");e.classList.add("progress");var t=document.createElement("div");return t.classList.add("bg-blue","leading-none","py-1","text-xs","text-center","text-white"),t.setAttribute("role","progressbar"),t.setAttribute("aria-valuenow",0),t.setAttribute("aria-valuemin",0),t.setAttribute("aria-valuenax",100),t.innerHTML="".concat(0,"%"),e.appendChild(t),e}},{key:"updateProgressBar",value:function(e,t){if(e){var n=e.firstChild,r="".concat(t,"%");n.setAttribute("aria-valuenow",t),n.style.width=r,n.innerHTML=r}}},{key:"updateProgressBarUnknown",value:function(e){if(e){var t=e.firstChild;e.classList.add("progress","bg-blue","leading-none","py-1","text-xs","text-center","text-white","block"),t.removeAttribute("aria-valuenow"),t.classList.add("w-full"),t.innerHTML=""}}},{key:"getInputGroup",value:function(e,t){if(e){var n=document.createElement("div");n.classList.add("relative","items-stretch","w-full"),n.appendChild(e);var r=document.createElement("div");r.classList.add("-mr-1"),n.appendChild(r);for(var i=0;i<t.length;i++)r.appendChild(t[i]);return n}}}])&&Ka(t.prototype,n),i}(Yo);es.rules={".slider":"-webkit-appearance:none;-moz-appearance:none;appearance:none;background:transparent;display:block;border:none;height:1.2rem;width:100%25",".slider:focus":"box-shadow:0%200%200%200%20rgba(87%2C%2085%2C%20217%2C%200.2);outline:none",".slider.tooltip:not([data-tooltip])::after":"content:attr(value)",".slider::-webkit-slider-thumb":"-webkit-appearance:none;background:%23f17405;border-radius:100%25;height:0.6rem;margin-top:-0.25rem;transition:transform%200.2s;width:0.6rem",".slider:active::-webkit-slider-thumb":"transform:scale(1.25);outline:none",".slider::-webkit-slider-runnable-track":"background:%23b2b4b6;border-radius:0.1rem;height:0.1rem;width:100%25","a.tooltips":"position:relative;display:inline","a.tooltips span":"position:absolute;white-space:nowrap;width:auto;padding-left:1rem;padding-right:1rem;color:%23ffffff;background:rgba(56%2C%2056%2C%2056%2C%200.85);height:1.5rem;line-height:1.5rem;text-align:center;visibility:hidden;border-radius:3px","a.tooltips span:after":"content:%22%22;position:absolute;top:50%25;left:100%25;margin-top:-5px;width:0;height:0;border-left:5px%20solid%20rgba(56%2C%2056%2C%2056%2C%200.85);border-top:5px%20solid%20transparent;border-bottom:5px%20solid%20transparent","a:hover.tooltips span":"visibility:visible;opacity:0.9;font-size:0.8rem;right:100%25;top:50%25;margin-top:-12px;margin-right:10px;z-index:999",".json-editor-btntype-properties + div":"font-size:0.8rem;font-weight:normal",textarea:"width:100%25;min-height:2rem;resize:vertical",table:"width:100%25;border-collapse:collapse",".table td":"padding:0rem%200rem","div[data-schematype]:not([data-schematype='object'])":"transition:0.5s","div[data-schematype]:not([data-schematype='object']):hover":"background-color:%23e6f4fe","div[data-schemaid='root']":"position:relative;width:inherit;display:inherit;overflow-x:hidden;z-index:10","select[multiple]":"height:auto","select[multiple].from-select":"height:auto",".je-table-zebra:nth-child(even)":"background-color:%23f2f2f2",".je-table-border":"border:0.5px%20solid%20black",".je-table-hdiv":"border-bottom:1px%20solid%20black",".je-border":"border:0.05rem%20solid%20%233182ce",".je-panel":"width:inherit;padding:0.2rem;margin:0.2rem;background-color:rgba(218%2C%20222%2C%20228%2C%200.1)",".je-panel-top":"width:100%25;padding:0.2rem;margin:0.2rem;background-color:rgba(218%2C%20222%2C%20228%2C%200.1)",".required:after":"content:%22%20*%22;color:red;font:inherit;font-weight:bold",".je-desc":"font-size:smaller;margin:0.2rem%200",".container-xl.je-noindent":"padding-left:0;padding-right:0",".json-editor-btntype-add":"color:white;margin:0.3rem;padding:0.3rem%200.8rem;background-color:%234299e1;box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-webkit-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-moz-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2)",".json-editor-btntype-deletelast":"color:white;margin:0.3rem;padding:0.3rem%200.8rem;background-color:%23e53e3e;box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-webkit-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-moz-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2)",".json-editor-btntype-deleteall":"color:white;margin:0.3rem;padding:0.3rem%200.8rem;background-color:%23000000;box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-webkit-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-moz-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2)",".json-editor-btn-save":"float:right;color:white;margin:0.3rem;padding:0.3rem%200.8rem;background-color:%232b6cb0;box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-webkit-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-moz-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2)",".json-editor-btn-back":"color:white;margin:0.3rem;padding:0.3rem%200.8rem;background-color:%232b6cb0;box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-webkit-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-moz-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2)",".json-editor-btntype-delete":"color:%23e53e3e;background-color:rgba(218%2C%20222%2C%20228%2C%200.1);margin:0.03rem;padding:0.1rem",".json-editor-btntype-move":"color:%23000000;background-color:rgba(218%2C%20222%2C%20228%2C%200.1);margin:0.03rem;padding:0.1rem",".json-editor-btn-collapse":"padding:0em%200.8rem;font-size:1.3rem;color:%23e53e3e;background-color:rgba(218%2C%20222%2C%20228%2C%200.1)",".je-upload-preview img":"float:left;margin:0%200.5rem%200.5rem%200;max-width:100%25;max-height:5rem",".je-dropzone":"position:relative;margin:0.5rem%200;border:2px%20dashed%20black;width:100%25;height:60px;background:teal;transition:all%200.5s",".je-dropzone:before":"position:absolute;content:attr(data-text);color:rgba(0%2C%200%2C%200%2C%200.6);left:50%25;top:50%25;transform:translate(-50%25%2C%20-50%25)",".je-dropzone.valid-dropzone":"background:green",".je-dropzone.invalid-dropzone":"background:red"};var ts={html:oa,bootstrap3:ya,bootstrap4:xa,jqueryui:Ta,barebones:Ma,spectre:$a,tailwind:es},ns={".je-float-right-linkholder":"float:right;margin-left:10px",".je-modal":"background-color:white;border:1px%20solid%20black;box-shadow:3px%203px%20black;position:absolute;z-index:10",".je-infobutton-icon":"font-size:16px;font-weight:bold;padding:0.25rem;position:relative;display:inline-block",".je-infobutton-tooltip":"font-size:12px;font-weight:normal;font-family:sans-serif;visibility:hidden;background-color:rgba(50%2C%2050%2C%2050%2C%200.75);margin:0%200.25rem;color:%23fafafa;padding:0.5rem%201rem;border-radius:0.25rem;width:20rem;position:absolute",".je-header":"display:inline-block",".je-upload-preview img":"float:left;margin:0%200.5rem%200.5rem%200;max-width:100%25;max-height:5rem",".je-checkbox":"display:inline-block;width:auto",".je-checkbox-control--compact":"display:inline-block;margin-right:1rem",".je-radio":"display:inline-block;width:auto",".je-radio-control--compact":"display:inline-block;margin-right:1rem",".je-switcher":"background-color:transparent;display:inline-block;font-style:italic;font-weight:normal;height:auto;width:auto;margin-bottom:0;margin-left:5px;padding:0%200%200%203px",".je-textarea":"width:100%25;height:300px;box-sizing:border-box",".je-range-control":"text-align:center",".je-indented-panel":"padding-left:10px;margin-left:10px;border-left:1px%20solid%20%23ccc",".je-indented-panel--top":"padding-left:10px;margin-left:10px",".je-tabholder":"float:left;width:130px",".je-tabholder .content":"margin-left:120px",".je-tabholder--top":"margin-left:10px",".je-tabholder--clear":"clear:both",".je-tab":"border:1px%20solid%20%23ccc;border-width:1px%200%201px%201px;text-align:center;line-height:30px;border-radius:5px;border-bottom-right-radius:0;border-top-right-radius:0;font-weight:bold;cursor:pointer",".je-tab--top":"float:left;border:1px%20solid%20%23ccc;border-width:1px%201px%200px%201px;text-align:center;line-height:30px;border-radius:5px;padding-left:5px;padding-right:5px;border-bottom-right-radius:0;border-bottom-left-radius:0;font-weight:bold;cursor:pointer",".je-block-link":"display:block",".je-media":"width:100%25"};function rs(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function is(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function os(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var as=function(){function e(t){var n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(is(this,e),!(t instanceof Element))throw new Error("element should be an instance of Element");this.element=t,this.options=d({},e.defaults.options,r),this.ready=!1,this.copyClipboard=null,this.schema=this.options.schema,this.template=this.options.template,this.translate=this.options.translate||e.defaults.translate,this.uuid=0,this.__data={};var i=this.options.theme||e.defaults.theme,o=e.defaults.themes[i];if(!o)throw new Error("Unknown theme ".concat(i));this.element.setAttribute("data-theme",i),this.theme=new o(this);var a=d(ns,this.getEditorsRules()),s=function(e,t,r){return r?n.addNewStyleRulesToShadowRoot(e,t,r):n.addNewStyleRules(e,t)};if(!this.theme.options.disable_theme_rules){var l=h(this.element);s("default",a,l),void 0!==o.rules&&s(i,o.rules,l)}var u=e.defaults.iconlibs[this.options.iconlib||e.defaults.iconlib];u&&(this.iconlib=new u),this.root_container=this.theme.getContainer(),this.element.appendChild(this.root_container);var c=document.location.origin+document.location.pathname.toString(),f=new A(this.options),p=document.location.toString();this.expandSchema=function(e,t){return f.expandSchema(e,t)},this.expandRefs=function(e,t){return f.expandRefs(e,t)},this.refs=f.refs,f.load(this.schema,(function(t){var r=n.options.custom_validators?{custom_validators:n.options.custom_validators}:{};n.validator=new C(n,null,r,e.defaults);var i=n.getEditorClass(t);n.root=n.createEditor(i,{jsoneditor:n,schema:t,required:!0,container:n.root_container}),n.root.preBuild(),n.root.build(),n.root.postBuild(),y(n.options,"startval")&&n.root.setValue(n.options.startval),n.validation_results=n.validator.validate(n.root.getValue()),n.root.showValidationErrors(n.validation_results),n.ready=!0,window.requestAnimationFrame((function(){n.ready&&(n.validation_results=n.validator.validate(n.root.getValue()),n.root.showValidationErrors(n.validation_results),n.trigger("ready"),n.trigger("change"))}))}),c,p)}var t,n;return t=e,(n=[{key:"getValue",value:function(){if(!this.ready)throw new Error("JSON Editor not ready yet.  Listen for 'ready' event before getting the value");return this.root.getValue()}},{key:"setValue",value:function(e){if(!this.ready)throw new Error("JSON Editor not ready yet.  Listen for 'ready' event before setting the value");return this.root.setValue(e),this}},{key:"validate",value:function(e){if(!this.ready)throw new Error("JSON Editor not ready yet.  Listen for 'ready' event before validating");return 1===arguments.length?this.validator.validate(e):this.validation_results}},{key:"destroy",value:function(){this.destroyed||this.ready&&(this.schema=null,this.options=null,this.root.destroy(),this.root=null,this.root_container=null,this.validator=null,this.validation_results=null,this.theme=null,this.iconlib=null,this.template=null,this.__data=null,this.ready=!1,this.element.innerHTML="",this.element.removeAttribute("data-theme"),this.destroyed=!0)}},{key:"on",value:function(e,t){return this.callbacks=this.callbacks||{},this.callbacks[e]=this.callbacks[e]||[],this.callbacks[e].push(t),this}},{key:"off",value:function(e,t){if(e&&t){this.callbacks=this.callbacks||{},this.callbacks[e]=this.callbacks[e]||[];for(var n=[],r=0;r<this.callbacks[e].length;r++)this.callbacks[e][r]!==t&&n.push(this.callbacks[e][r]);this.callbacks[e]=n}else e?(this.callbacks=this.callbacks||{},this.callbacks[e]=[]):this.callbacks={};return this}},{key:"trigger",value:function(e,t){if(this.callbacks&&this.callbacks[e]&&this.callbacks[e].length)for(var n=0;n<this.callbacks[e].length;n++)this.callbacks[e][n].apply(this,[t]);return this}},{key:"setOption",value:function(e,t){if("show_errors"!==e)throw new Error("Option ".concat(e," must be set during instantiation and cannot be changed later"));return this.options.show_errors=t,this.onChange(),this}},{key:"getEditorsRules",value:function(){return Object.values(e.defaults.editors).reduce((function(e,t){return t.rules?d(e,t.rules):e}),{})}},{key:"getEditorClass",value:function(t){var n;if(t=this.expandSchema(t),e.defaults.resolvers.find((function(r){return(n=r(t))&&e.defaults.editors[n]})),!n)throw new Error("Unknown editor for schema ".concat(JSON.stringify(t)));if(!e.defaults.editors[n])throw new Error("Unknown editor ".concat(n));return e.defaults.editors[n]}},{key:"createEditor",value:function(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return new t(n=d({},t.options||{},n),e.defaults,r)}},{key:"onChange",value:function(){var e=this;if(this.ready&&!this.firing_change)return this.firing_change=!0,window.requestAnimationFrame((function(){e.firing_change=!1,e.ready&&(e.validation_results=e.validator.validate(e.root.getValue()),"never"!==e.options.show_errors?e.root.showValidationErrors(e.validation_results):e.root.showValidationErrors([]),e.trigger("change"))})),this}},{key:"compileTemplate",value:function(t){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.defaults.template;if("string"==typeof r){if(!e.defaults.templates[r])throw new Error("Unknown template engine ".concat(r));if(!(n=e.defaults.templates[r]()))throw new Error("Template engine ".concat(r," missing required library."))}else n=r;if(!n)throw new Error("No template engine set");if(!n.compile)throw new Error("Invalid template engine set");return n.compile(t)}},{key:"_data",value:function(e,t,n){if(3!==arguments.length)return e.hasAttribute("data-jsoneditor-".concat(t))?this.__data[e.getAttribute("data-jsoneditor-".concat(t))]:null;var r;e.hasAttribute("data-jsoneditor-".concat(t))?r=e.getAttribute("data-jsoneditor-".concat(t)):(r=this.uuid++,e.setAttribute("data-jsoneditor-".concat(t),r)),this.__data[r]=n}},{key:"registerEditor",value:function(e){return this.editors=this.editors||{},this.editors[e.path]=e,this}},{key:"unregisterEditor",value:function(e){return this.editors=this.editors||{},this.editors[e.path]=null,this}},{key:"getEditor",value:function(e){if(this.editors)return this.editors[e]}},{key:"watch",value:function(e,t){return this.watchlist=this.watchlist||{},this.watchlist[e]=this.watchlist[e]||[],this.watchlist[e].push(t),this}},{key:"unwatch",value:function(e,t){if(!this.watchlist||!this.watchlist[e])return this;if(!t)return this.watchlist[e]=null,this;for(var n=[],r=0;r<this.watchlist[e].length;r++)this.watchlist[e][r]!==t&&n.push(this.watchlist[e][r]);return this.watchlist[e]=n.length?n:null,this}},{key:"notifyWatchers",value:function(e){if(!this.watchlist||!this.watchlist[e])return this;for(var t=0;t<this.watchlist[e].length;t++)this.watchlist[e][t]()}},{key:"isEnabled",value:function(){return!this.root||this.root.isEnabled()}},{key:"enable",value:function(){this.root.enable()}},{key:"disable",value:function(){this.root.disable()}},{key:"setCopyClipboardContents",value:function(e){this.copyClipboard=e}},{key:"getCopyClipboardContents",value:function(){return this.copyClipboard}},{key:"addNewStyleRules",value:function(e,t){var n=document.querySelector("#theme-".concat(e));n||((n=document.createElement("style")).setAttribute("id","theme-".concat(e)),n.appendChild(document.createTextNode("")),document.head.appendChild(n));for(var r=n.sheet?n.sheet:n.styleSheet,i=this.element.nodeName.toLowerCase();r.cssRules.length>0;)r.deleteRule(0);Object.keys(t).forEach((function(n){var o="default"===e?n:"".concat(i,'[data-theme="').concat(e,'"] ').concat(n);r.insertRule?r.insertRule(o+" {"+decodeURIComponent(t[n])+"}",0):r.addRule&&r.addRule(o,decodeURIComponent(t[n]),0)}))}},{key:"addNewStyleRulesToShadowRoot",value:function(e,t,n){var r=this.element.nodeName.toLowerCase(),i="";Object.keys(t).forEach((function(n){var o="default"===e?n:"".concat(r,'[data-theme="').concat(e,'"] ').concat(n);i+=o+" {"+decodeURIComponent(t[n])+"}\n"}));var o=new CSSStyleSheet;o.replaceSync(i),n.adoptedStyleSheets=[].concat(function(e){return function(e){if(Array.isArray(e))return rs(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return rs(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?rs(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(n.adoptedStyleSheets),[o])}}])&&os(t.prototype,n),e}();as.defaults=s,as.AbstractEditor=L,as.AbstractTheme=Yo,as.AbstractIconLib=co,Object.assign(as.defaults.themes,ts),Object.assign(as.defaults.editors,io),Object.assign(as.defaults.templates,oo),Object.assign(as.defaults.iconlibs,Go)}])},4184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function i(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var o=typeof n;if("string"===o||"number"===o)e.push(n);else if(Array.isArray(n)){if(n.length){var a=i.apply(null,n);a&&e.push(a)}}else if("object"===o)if(n.toString===Object.prototype.toString)for(var s in n)r.call(n,s)&&n[s]&&e.push(s);else e.push(n.toString())}}return e.join(" ")}e.exports?(i.default=i,e.exports=i):void 0===(n=function(){return i}.apply(t,[]))||(e.exports=n)}()},244:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(4015),i=n.n(r),o=n(3645),a=n.n(o)()(i());a.push([e.id,".analysis-screen {\r\n    display: flex;\r\n    height: 80vh;\r\n    flex-direction: row;\r\n    width: 90vw;\r\n    font-size: 2vmin;\r\n}\r\n\r\n.analysis-screen .selected-sequence {\r\n    max-height: 100vh;\r\n    width: 65%;\r\n    overflow-y: auto;\r\n    padding: 2vmin;\r\n}\r\n\r\n.analysis-screen .item-container {\r\n    display: flex;\r\n    max-height: 100vh;\r\n    width: 35%;\r\n    flex-direction: column;\r\n    overflow-y: scroll;\r\n}\r\n\r\n.analysis-screen .item-container .item {\r\n    padding: 1vmin;\r\n    margin-bottom: 1vh;\r\n    cursor: pointer;\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.analysis-screen .item-container .item.active {\r\n    background: aliceblue;\r\n    border-right: 1vmin solid #61798C;\r\n}\r\n\r\n.analysis-screen .item-container .item:hover {\r\n    background: aliceblue;\r\n}\r\n\r\n.analysis-screen .item-container .item .controls {\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin-right: 1.5vmax ;\r\n}\r\n\r\n.analysis-screen .item-container .item .controls button {\r\n    cursor: pointer;\r\n    opacity: 0.3;\r\n    background: transparent;\r\n    border: none;\r\n    height: 3vh;\r\n    width: 3vh;\r\n}\r\n\r\n.analysis-screen .item-container .item:hover .controls button {\r\n     opacity: .8;\r\n}\r\n\r\n.analysis-screen .item-container .item .controls button:hover {\r\n    /*background:  #61798C;*/\r\n    opacity: 1;\r\n }\r\n\r\n.analysis-screen .part:hover {\r\n    margin-bottom: -1px;\r\n    border-bottom: 1px solid red;\r\n}\r\n\r\n.analysis-screen .item-container .item .header {\r\n    font-weight: bold;\r\n}\r\n\r\n.analysis-screen .item-container .item .header-subtext {\r\n    font-size: 1.6vmin;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n}\r\n\r\n.analysis-screen .item-container .item .preview {\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    line-height: 2.5vmin;\r\n    max-height: 5vmin;\r\n    min-height: 5vmin;\r\n}\r\n\r\n","",{version:3,sources:["webpack://./src/screens/analysis/analysis-screen.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,YAAY;IACZ,mBAAmB;IACnB,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;IACjB,UAAU;IACV,gBAAgB;IAChB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,UAAU;IACV,sBAAsB;IACtB,kBAAkB;AACtB;;AAEA;IACI,cAAc;IACd,kBAAkB;IAClB,eAAe;IACf,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,qBAAqB;IACrB,iCAAiC;AACrC;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,uBAAuB;IACvB,YAAY;IACZ,WAAW;IACX,UAAU;AACd;;AAEA;KACK,WAAW;AAChB;;AAEA;IACI,wBAAwB;IACxB,UAAU;CACb;;AAED;IACI,mBAAmB;IACnB,4BAA4B;AAChC;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;IAChB,uBAAuB;IACvB,oBAAoB;IACpB,iBAAiB;IACjB,iBAAiB;AACrB",sourcesContent:[".analysis-screen {\r\n    display: flex;\r\n    height: 80vh;\r\n    flex-direction: row;\r\n    width: 90vw;\r\n    font-size: 2vmin;\r\n}\r\n\r\n.analysis-screen .selected-sequence {\r\n    max-height: 100vh;\r\n    width: 65%;\r\n    overflow-y: auto;\r\n    padding: 2vmin;\r\n}\r\n\r\n.analysis-screen .item-container {\r\n    display: flex;\r\n    max-height: 100vh;\r\n    width: 35%;\r\n    flex-direction: column;\r\n    overflow-y: scroll;\r\n}\r\n\r\n.analysis-screen .item-container .item {\r\n    padding: 1vmin;\r\n    margin-bottom: 1vh;\r\n    cursor: pointer;\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.analysis-screen .item-container .item.active {\r\n    background: aliceblue;\r\n    border-right: 1vmin solid #61798C;\r\n}\r\n\r\n.analysis-screen .item-container .item:hover {\r\n    background: aliceblue;\r\n}\r\n\r\n.analysis-screen .item-container .item .controls {\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin-right: 1.5vmax ;\r\n}\r\n\r\n.analysis-screen .item-container .item .controls button {\r\n    cursor: pointer;\r\n    opacity: 0.3;\r\n    background: transparent;\r\n    border: none;\r\n    height: 3vh;\r\n    width: 3vh;\r\n}\r\n\r\n.analysis-screen .item-container .item:hover .controls button {\r\n     opacity: .8;\r\n}\r\n\r\n.analysis-screen .item-container .item .controls button:hover {\r\n    /*background:  #61798C;*/\r\n    opacity: 1;\r\n }\r\n\r\n.analysis-screen .part:hover {\r\n    margin-bottom: -1px;\r\n    border-bottom: 1px solid red;\r\n}\r\n\r\n.analysis-screen .item-container .item .header {\r\n    font-weight: bold;\r\n}\r\n\r\n.analysis-screen .item-container .item .header-subtext {\r\n    font-size: 1.6vmin;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n}\r\n\r\n.analysis-screen .item-container .item .preview {\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    line-height: 2.5vmin;\r\n    max-height: 5vmin;\r\n    min-height: 5vmin;\r\n}\r\n\r\n"],sourceRoot:""}]);const s=a},1487:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(4015),i=n.n(r),o=n(3645),a=n.n(o)()(i());a.push([e.id,".texts-screen {\r\n    display: flex;\r\n    height: 80vh;\r\n    flex-direction: row;\r\n    width: 90vw;\r\n    font-size: 2vmin;\r\n}\r\n\r\n.selected-text-container {\r\n    position: relative;\r\n    max-height: 100vh;\r\n    width: 65%;\r\n}\r\n\r\n.texts-screen .selected-text {\r\n    height: 100%;\r\n    overflow: hidden;\r\n}\r\n\r\n.texts-screen .item-container {\r\n    display: flex;\r\n    max-height: 100vh;\r\n    width: 35%;\r\n    flex-direction: column;\r\n    overflow-y: scroll;\r\n}\r\n\r\n.texts-screen .item-container .item {\r\n    padding: 1vmin;\r\n    margin-bottom: 1vh;\r\n    cursor: pointer;\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.texts-screen .item-container .item.active {\r\n    background: aliceblue;\r\n    border-right: 1vmin solid #61798C;\r\n}\r\n\r\n.texts-screen .item-container .item:hover {\r\n    background: aliceblue;\r\n}\r\n\r\n.texts-screen .item-container .item .controls {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-right: 1.5vmax;\r\n}\r\n\r\n.texts-screen button {\r\n    margin-top: 2px;\r\n}\r\n\r\n.texts-screen .item-container .item .header {\r\n    font-weight: bold;\r\n    border-bottom: 1px solid #61798C;\r\n}\r\n\r\n.texts-screen .item-container .item .preview {\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    height: 3.5em;\r\n}\r\n\r\n.hr {\r\n    width: 100%;\r\n    border-bottom: 1px solid black;\r\n}\r\n\r\n.texts-screen .saved {\r\n    pointer-events: none;\r\n    position: absolute;\r\n    z-index: 100;\r\n    right: 0;\r\n    top: 0;\r\n    opacity: 0;\r\n}\r\n\r\n.texts-screen .editable-text {\r\n    padding-left: 2vmin;\r\n    padding-top: 2vmin;\r\n    padding-right: 2vmin;\r\n    resize: none;\r\n    position: relative;\r\n    min-height: 100%;\r\n    width: 100%;\r\n}\r\n.texts-screen .saved.visible {\r\n    animation: blink 3000ms;\r\n}\r\n\r\n@keyframes blink {\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    25% {\r\n        opacity: 1;\r\n    }\r\n    50% {\r\n        opacity: 1;\r\n    }\r\n    75% {\r\n        opacity: 1;\r\n    }\r\n    100% {\r\n        opacity: 0;\r\n    }\r\n}\r\n","",{version:3,sources:["webpack://./src/screens/texts/texts-screen.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,YAAY;IACZ,mBAAmB;IACnB,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,UAAU;AACd;;AAEA;IACI,YAAY;IACZ,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,UAAU;IACV,sBAAsB;IACtB,kBAAkB;AACtB;;AAEA;IACI,cAAc;IACd,kBAAkB;IAClB,eAAe;IACf,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,qBAAqB;IACrB,iCAAiC;AACrC;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,qBAAqB;AACzB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,iBAAiB;IACjB,gCAAgC;AACpC;;AAEA;IACI,gBAAgB;IAChB,uBAAuB;IACvB,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,8BAA8B;AAClC;;AAEA;IACI,oBAAoB;IACpB,kBAAkB;IAClB,YAAY;IACZ,QAAQ;IACR,MAAM;IACN,UAAU;AACd;;AAEA;IACI,mBAAmB;IACnB,kBAAkB;IAClB,oBAAoB;IACpB,YAAY;IACZ,kBAAkB;IAClB,gBAAgB;IAChB,WAAW;AACf;AACA;IACI,uBAAuB;AAC3B;;AAEA;IACI;QACI,UAAU;IACd;IACA;QACI,UAAU;IACd;IACA;QACI,UAAU;IACd;IACA;QACI,UAAU;IACd;IACA;QACI,UAAU;IACd;AACJ",sourcesContent:[".texts-screen {\r\n    display: flex;\r\n    height: 80vh;\r\n    flex-direction: row;\r\n    width: 90vw;\r\n    font-size: 2vmin;\r\n}\r\n\r\n.selected-text-container {\r\n    position: relative;\r\n    max-height: 100vh;\r\n    width: 65%;\r\n}\r\n\r\n.texts-screen .selected-text {\r\n    height: 100%;\r\n    overflow: hidden;\r\n}\r\n\r\n.texts-screen .item-container {\r\n    display: flex;\r\n    max-height: 100vh;\r\n    width: 35%;\r\n    flex-direction: column;\r\n    overflow-y: scroll;\r\n}\r\n\r\n.texts-screen .item-container .item {\r\n    padding: 1vmin;\r\n    margin-bottom: 1vh;\r\n    cursor: pointer;\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.texts-screen .item-container .item.active {\r\n    background: aliceblue;\r\n    border-right: 1vmin solid #61798C;\r\n}\r\n\r\n.texts-screen .item-container .item:hover {\r\n    background: aliceblue;\r\n}\r\n\r\n.texts-screen .item-container .item .controls {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-right: 1.5vmax;\r\n}\r\n\r\n.texts-screen button {\r\n    margin-top: 2px;\r\n}\r\n\r\n.texts-screen .item-container .item .header {\r\n    font-weight: bold;\r\n    border-bottom: 1px solid #61798C;\r\n}\r\n\r\n.texts-screen .item-container .item .preview {\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    height: 3.5em;\r\n}\r\n\r\n.hr {\r\n    width: 100%;\r\n    border-bottom: 1px solid black;\r\n}\r\n\r\n.texts-screen .saved {\r\n    pointer-events: none;\r\n    position: absolute;\r\n    z-index: 100;\r\n    right: 0;\r\n    top: 0;\r\n    opacity: 0;\r\n}\r\n\r\n.texts-screen .editable-text {\r\n    padding-left: 2vmin;\r\n    padding-top: 2vmin;\r\n    padding-right: 2vmin;\r\n    resize: none;\r\n    position: relative;\r\n    min-height: 100%;\r\n    width: 100%;\r\n}\r\n.texts-screen .saved.visible {\r\n    animation: blink 3000ms;\r\n}\r\n\r\n@keyframes blink {\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    25% {\r\n        opacity: 1;\r\n    }\r\n    50% {\r\n        opacity: 1;\r\n    }\r\n    75% {\r\n        opacity: 1;\r\n    }\r\n    100% {\r\n        opacity: 0;\r\n    }\r\n}\r\n"],sourceRoot:""}]);const s=a},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&i[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},4015:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,i=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],a=i[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),u="/*# ".concat(l," */"),c=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[o].concat(c).concat([u]).join("\n")}return[o].join("\n")}},8875:(e,t,n)=>{var r;!function(){"use strict";var i=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:i,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:i&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:i&&!!window.screen};void 0===(r=function(){return o}.call(t,n,t,e))||(e.exports=r)}()},583:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"ba2f6085fcedf0868219458d01982630.txt"},3029:(e,t,n)=>{"use strict";let r,i;n.r(t),n.d(t,{deleteDB:()=>y,openDB:()=>h,unwrap:()=>p,wrap:()=>d});const o=new WeakMap,a=new WeakMap,s=new WeakMap,l=new WeakMap,u=new WeakMap;let c={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return a.get(e);if("objectStoreNames"===t)return e.objectStoreNames||s.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return d(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function f(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(i||(i=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(p(this),e),d(o.get(this))}:function(...e){return d(t.apply(p(this),e))}:function(e,...n){const r=t.call(p(this),e,...n);return s.set(r,e.sort?e.sort():[e]),d(r)}:(e instanceof IDBTransaction&&function(e){if(a.has(e))return;const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",o),e.removeEventListener("abort",o)},i=()=>{t(),r()},o=()=>{n(e.error||new DOMException("AbortError","AbortError")),r()};e.addEventListener("complete",i),e.addEventListener("error",o),e.addEventListener("abort",o)}));a.set(e,t)}(e),n=e,(r||(r=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>n instanceof e))?new Proxy(e,c):e);var t,n}function d(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("success",i),e.removeEventListener("error",o)},i=()=>{t(d(e.result)),r()},o=()=>{n(e.error),r()};e.addEventListener("success",i),e.addEventListener("error",o)}));return t.then((t=>{t instanceof IDBCursor&&o.set(t,e)})).catch((()=>{})),u.set(t,e),t}(e);if(l.has(e))return l.get(e);const t=f(e);return t!==e&&(l.set(e,t),u.set(t,e)),t}const p=e=>u.get(e);function h(e,t,{blocked:n,upgrade:r,blocking:i,terminated:o}={}){const a=indexedDB.open(e,t),s=d(a);return r&&a.addEventListener("upgradeneeded",(e=>{r(d(a.result),e.oldVersion,e.newVersion,d(a.transaction))})),n&&a.addEventListener("blocked",(()=>n())),s.then((e=>{o&&e.addEventListener("close",(()=>o())),i&&e.addEventListener("versionchange",(()=>i()))})).catch((()=>{})),s}function y(e,{blocked:t}={}){const n=indexedDB.deleteDatabase(e);return t&&n.addEventListener("blocked",(()=>t())),d(n).then((()=>{}))}const m=["get","getKey","getAll","getAllKeys","count"],v=["put","add","delete","clear"],b=new Map;function g(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(b.get(t))return b.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,i=v.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!i&&!m.includes(n))return;const o=async function(e,...t){const o=this.transaction(e,i?"readwrite":"readonly");let a=o.store;return r&&(a=a.index(t.shift())),(await Promise.all([a[n](...t),i&&o.done]))[0]};return b.set(t,o),o}var _;_=c,c={..._,get:(e,t,n)=>g(e,t)||_.get(e,t,n),has:(e,t)=>!!g(e,t)||_.has(e,t)}},6486:function(e,t,n){var r;e=n.nmd(e),function(){var i,o="Expected a function",a="__lodash_hash_undefined__",s="__lodash_placeholder__",l=32,u=128,c=1/0,f=9007199254740991,d=NaN,p=4294967295,h=[["ary",u],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",l],["partialRight",64],["rearg",256]],y="[object Arguments]",m="[object Array]",v="[object Boolean]",b="[object Date]",g="[object Error]",_="[object Function]",w="[object GeneratorFunction]",k="[object Map]",x="[object Number]",C="[object Object]",E="[object Promise]",O="[object RegExp]",S="[object Set]",j="[object String]",A="[object Symbol]",P="[object WeakMap]",T="[object ArrayBuffer]",R="[object DataView]",L="[object Float32Array]",I="[object Float64Array]",N="[object Int8Array]",B="[object Int16Array]",D="[object Int32Array]",M="[object Uint8Array]",F="[object Uint8ClampedArray]",z="[object Uint16Array]",V="[object Uint32Array]",H=/\b__p \+= '';/g,U=/\b(__p \+=) '' \+/g,q=/(__e\(.*?\)|\b__t\)) \+\n'';/g,W=/&(?:amp|lt|gt|quot|#39);/g,$=/[&<>"']/g,G=RegExp(W.source),K=RegExp($.source),Q=/<%-([\s\S]+?)%>/g,J=/<%([\s\S]+?)%>/g,Y=/<%=([\s\S]+?)%>/g,Z=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,X=/^\w*$/,ee=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,te=/[\\^$.*+?()[\]{}|]/g,ne=RegExp(te.source),re=/^\s+/,ie=/\s/,oe=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ae=/\{\n\/\* \[wrapped with (.+)\] \*/,se=/,? & /,le=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ue=/[()=,{}\[\]\/\s]/,ce=/\\(\\)?/g,fe=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,de=/\w*$/,pe=/^[-+]0x[0-9a-f]+$/i,he=/^0b[01]+$/i,ye=/^\[object .+?Constructor\]$/,me=/^0o[0-7]+$/i,ve=/^(?:0|[1-9]\d*)$/,be=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,ge=/($^)/,_e=/['\n\r\u2028\u2029\\]/g,we="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",ke="a-z\\xdf-\\xf6\\xf8-\\xff",xe="A-Z\\xc0-\\xd6\\xd8-\\xde",Ce="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Ee="["+Ce+"]",Oe="["+we+"]",Se="\\d+",je="["+ke+"]",Ae="[^\\ud800-\\udfff"+Ce+Se+"\\u2700-\\u27bf"+ke+xe+"]",Pe="\\ud83c[\\udffb-\\udfff]",Te="[^\\ud800-\\udfff]",Re="(?:\\ud83c[\\udde6-\\uddff]){2}",Le="[\\ud800-\\udbff][\\udc00-\\udfff]",Ie="["+xe+"]",Ne="(?:"+je+"|"+Ae+")",Be="(?:"+Ie+"|"+Ae+")",De="(?:['’](?:d|ll|m|re|s|t|ve))?",Me="(?:['’](?:D|LL|M|RE|S|T|VE))?",Fe="(?:"+Oe+"|"+Pe+")?",ze="[\\ufe0e\\ufe0f]?",Ve=ze+Fe+"(?:\\u200d(?:"+[Te,Re,Le].join("|")+")"+ze+Fe+")*",He="(?:"+["[\\u2700-\\u27bf]",Re,Le].join("|")+")"+Ve,Ue="(?:"+[Te+Oe+"?",Oe,Re,Le,"[\\ud800-\\udfff]"].join("|")+")",qe=RegExp("['’]","g"),We=RegExp(Oe,"g"),$e=RegExp(Pe+"(?="+Pe+")|"+Ue+Ve,"g"),Ge=RegExp([Ie+"?"+je+"+"+De+"(?="+[Ee,Ie,"$"].join("|")+")",Be+"+"+Me+"(?="+[Ee,Ie+Ne,"$"].join("|")+")",Ie+"?"+Ne+"+"+De,Ie+"+"+Me,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Se,He].join("|"),"g"),Ke=RegExp("[\\u200d\\ud800-\\udfff"+we+"\\ufe0e\\ufe0f]"),Qe=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Je=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Ye=-1,Ze={};Ze[L]=Ze[I]=Ze[N]=Ze[B]=Ze[D]=Ze[M]=Ze[F]=Ze[z]=Ze[V]=!0,Ze[y]=Ze[m]=Ze[T]=Ze[v]=Ze[R]=Ze[b]=Ze[g]=Ze[_]=Ze[k]=Ze[x]=Ze[C]=Ze[O]=Ze[S]=Ze[j]=Ze[P]=!1;var Xe={};Xe[y]=Xe[m]=Xe[T]=Xe[R]=Xe[v]=Xe[b]=Xe[L]=Xe[I]=Xe[N]=Xe[B]=Xe[D]=Xe[k]=Xe[x]=Xe[C]=Xe[O]=Xe[S]=Xe[j]=Xe[A]=Xe[M]=Xe[F]=Xe[z]=Xe[V]=!0,Xe[g]=Xe[_]=Xe[P]=!1;var et={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},tt=parseFloat,nt=parseInt,rt="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,it="object"==typeof self&&self&&self.Object===Object&&self,ot=rt||it||Function("return this")(),at=t&&!t.nodeType&&t,st=at&&e&&!e.nodeType&&e,lt=st&&st.exports===at,ut=lt&&rt.process,ct=function(){try{return st&&st.require&&st.require("util").types||ut&&ut.binding&&ut.binding("util")}catch(e){}}(),ft=ct&&ct.isArrayBuffer,dt=ct&&ct.isDate,pt=ct&&ct.isMap,ht=ct&&ct.isRegExp,yt=ct&&ct.isSet,mt=ct&&ct.isTypedArray;function vt(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function bt(e,t,n,r){for(var i=-1,o=null==e?0:e.length;++i<o;){var a=e[i];t(r,a,n(a),e)}return r}function gt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function _t(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function wt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function kt(e,t){for(var n=-1,r=null==e?0:e.length,i=0,o=[];++n<r;){var a=e[n];t(a,n,e)&&(o[i++]=a)}return o}function xt(e,t){return!(null==e||!e.length)&&Lt(e,t,0)>-1}function Ct(e,t,n){for(var r=-1,i=null==e?0:e.length;++r<i;)if(n(t,e[r]))return!0;return!1}function Et(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i}function Ot(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}function St(e,t,n,r){var i=-1,o=null==e?0:e.length;for(r&&o&&(n=e[++i]);++i<o;)n=t(n,e[i],i,e);return n}function jt(e,t,n,r){var i=null==e?0:e.length;for(r&&i&&(n=e[--i]);i--;)n=t(n,e[i],i,e);return n}function At(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var Pt=Dt("length");function Tt(e,t,n){var r;return n(e,(function(e,n,i){if(t(e,n,i))return r=n,!1})),r}function Rt(e,t,n,r){for(var i=e.length,o=n+(r?1:-1);r?o--:++o<i;)if(t(e[o],o,e))return o;return-1}function Lt(e,t,n){return t==t?function(e,t,n){for(var r=n-1,i=e.length;++r<i;)if(e[r]===t)return r;return-1}(e,t,n):Rt(e,Nt,n)}function It(e,t,n,r){for(var i=n-1,o=e.length;++i<o;)if(r(e[i],t))return i;return-1}function Nt(e){return e!=e}function Bt(e,t){var n=null==e?0:e.length;return n?zt(e,t)/n:d}function Dt(e){return function(t){return null==t?i:t[e]}}function Mt(e){return function(t){return null==e?i:e[t]}}function Ft(e,t,n,r,i){return i(e,(function(e,i,o){n=r?(r=!1,e):t(n,e,i,o)})),n}function zt(e,t){for(var n,r=-1,o=e.length;++r<o;){var a=t(e[r]);a!==i&&(n=n===i?a:n+a)}return n}function Vt(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function Ht(e){return e?e.slice(0,sn(e)+1).replace(re,""):e}function Ut(e){return function(t){return e(t)}}function qt(e,t){return Et(t,(function(t){return e[t]}))}function Wt(e,t){return e.has(t)}function $t(e,t){for(var n=-1,r=e.length;++n<r&&Lt(t,e[n],0)>-1;);return n}function Gt(e,t){for(var n=e.length;n--&&Lt(t,e[n],0)>-1;);return n}function Kt(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}var Qt=Mt({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Jt=Mt({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Yt(e){return"\\"+et[e]}function Zt(e){return Ke.test(e)}function Xt(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function en(e,t){return function(n){return e(t(n))}}function tn(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var a=e[n];a!==t&&a!==s||(e[n]=s,o[i++]=n)}return o}function nn(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}function rn(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=[e,e]})),n}function on(e){return Zt(e)?function(e){for(var t=$e.lastIndex=0;$e.test(e);)++t;return t}(e):Pt(e)}function an(e){return Zt(e)?function(e){return e.match($e)||[]}(e):function(e){return e.split("")}(e)}function sn(e){for(var t=e.length;t--&&ie.test(e.charAt(t)););return t}var ln=Mt({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),un=function e(t){var n,r=(t=null==t?ot:un.defaults(ot.Object(),t,un.pick(ot,Je))).Array,ie=t.Date,we=t.Error,ke=t.Function,xe=t.Math,Ce=t.Object,Ee=t.RegExp,Oe=t.String,Se=t.TypeError,je=r.prototype,Ae=ke.prototype,Pe=Ce.prototype,Te=t["__core-js_shared__"],Re=Ae.toString,Le=Pe.hasOwnProperty,Ie=0,Ne=(n=/[^.]+$/.exec(Te&&Te.keys&&Te.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Be=Pe.toString,De=Re.call(Ce),Me=ot._,Fe=Ee("^"+Re.call(Le).replace(te,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ze=lt?t.Buffer:i,Ve=t.Symbol,He=t.Uint8Array,Ue=ze?ze.allocUnsafe:i,$e=en(Ce.getPrototypeOf,Ce),Ke=Ce.create,et=Pe.propertyIsEnumerable,rt=je.splice,it=Ve?Ve.isConcatSpreadable:i,at=Ve?Ve.iterator:i,st=Ve?Ve.toStringTag:i,ut=function(){try{var e=uo(Ce,"defineProperty");return e({},"",{}),e}catch(e){}}(),ct=t.clearTimeout!==ot.clearTimeout&&t.clearTimeout,Pt=ie&&ie.now!==ot.Date.now&&ie.now,Mt=t.setTimeout!==ot.setTimeout&&t.setTimeout,cn=xe.ceil,fn=xe.floor,dn=Ce.getOwnPropertySymbols,pn=ze?ze.isBuffer:i,hn=t.isFinite,yn=je.join,mn=en(Ce.keys,Ce),vn=xe.max,bn=xe.min,gn=ie.now,_n=t.parseInt,wn=xe.random,kn=je.reverse,xn=uo(t,"DataView"),Cn=uo(t,"Map"),En=uo(t,"Promise"),On=uo(t,"Set"),Sn=uo(t,"WeakMap"),jn=uo(Ce,"create"),An=Sn&&new Sn,Pn={},Tn=Fo(xn),Rn=Fo(Cn),Ln=Fo(En),In=Fo(On),Nn=Fo(Sn),Bn=Ve?Ve.prototype:i,Dn=Bn?Bn.valueOf:i,Mn=Bn?Bn.toString:i;function Fn(e){if(ns(e)&&!Wa(e)&&!(e instanceof Un)){if(e instanceof Hn)return e;if(Le.call(e,"__wrapped__"))return zo(e)}return new Hn(e)}var zn=function(){function e(){}return function(t){if(!ts(t))return{};if(Ke)return Ke(t);e.prototype=t;var n=new e;return e.prototype=i,n}}();function Vn(){}function Hn(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=i}function Un(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function qn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Wn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function $n(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Gn(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new $n;++t<n;)this.add(e[t])}function Kn(e){var t=this.__data__=new Wn(e);this.size=t.size}function Qn(e,t){var n=Wa(e),r=!n&&qa(e),i=!n&&!r&&Qa(e),o=!n&&!r&&!i&&cs(e),a=n||r||i||o,s=a?Vt(e.length,Oe):[],l=s.length;for(var u in e)!t&&!Le.call(e,u)||a&&("length"==u||i&&("offset"==u||"parent"==u)||o&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||vo(u,l))||s.push(u);return s}function Jn(e){var t=e.length;return t?e[$r(0,t-1)]:i}function Yn(e,t){return Io(Si(e),ar(t,0,e.length))}function Zn(e){return Io(Si(e))}function Xn(e,t,n){(n!==i&&!Va(e[t],n)||n===i&&!(t in e))&&ir(e,t,n)}function er(e,t,n){var r=e[t];Le.call(e,t)&&Va(r,n)&&(n!==i||t in e)||ir(e,t,n)}function tr(e,t){for(var n=e.length;n--;)if(Va(e[n][0],t))return n;return-1}function nr(e,t,n,r){return fr(e,(function(e,i,o){t(r,e,n(e),o)})),r}function rr(e,t){return e&&ji(t,Rs(t),e)}function ir(e,t,n){"__proto__"==t&&ut?ut(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function or(e,t){for(var n=-1,o=t.length,a=r(o),s=null==e;++n<o;)a[n]=s?i:Ss(e,t[n]);return a}function ar(e,t,n){return e==e&&(n!==i&&(e=e<=n?e:n),t!==i&&(e=e>=t?e:t)),e}function sr(e,t,n,r,o,a){var s,l=1&t,u=2&t,c=4&t;if(n&&(s=o?n(e,r,o,a):n(e)),s!==i)return s;if(!ts(e))return e;var f=Wa(e);if(f){if(s=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&Le.call(e,"index")&&(n.index=e.index,n.input=e.input),n}(e),!l)return Si(e,s)}else{var d=po(e),p=d==_||d==w;if(Qa(e))return wi(e,l);if(d==C||d==y||p&&!o){if(s=u||p?{}:yo(e),!l)return u?function(e,t){return ji(e,fo(e),t)}(e,function(e,t){return e&&ji(t,Ls(t),e)}(s,e)):function(e,t){return ji(e,co(e),t)}(e,rr(s,e))}else{if(!Xe[d])return o?e:{};s=function(e,t,n){var r,i=e.constructor;switch(t){case T:return ki(e);case v:case b:return new i(+e);case R:return function(e,t){var n=t?ki(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case L:case I:case N:case B:case D:case M:case F:case z:case V:return xi(e,n);case k:return new i;case x:case j:return new i(e);case O:return function(e){var t=new e.constructor(e.source,de.exec(e));return t.lastIndex=e.lastIndex,t}(e);case S:return new i;case A:return r=e,Dn?Ce(Dn.call(r)):{}}}(e,d,l)}}a||(a=new Kn);var h=a.get(e);if(h)return h;a.set(e,s),ss(e)?e.forEach((function(r){s.add(sr(r,t,n,r,e,a))})):rs(e)&&e.forEach((function(r,i){s.set(i,sr(r,t,n,i,e,a))}));var m=f?i:(c?u?no:to:u?Ls:Rs)(e);return gt(m||e,(function(r,i){m&&(r=e[i=r]),er(s,i,sr(r,t,n,i,e,a))})),s}function lr(e,t,n){var r=n.length;if(null==e)return!r;for(e=Ce(e);r--;){var o=n[r],a=t[o],s=e[o];if(s===i&&!(o in e)||!a(s))return!1}return!0}function ur(e,t,n){if("function"!=typeof e)throw new Se(o);return Po((function(){e.apply(i,n)}),t)}function cr(e,t,n,r){var i=-1,o=xt,a=!0,s=e.length,l=[],u=t.length;if(!s)return l;n&&(t=Et(t,Ut(n))),r?(o=Ct,a=!1):t.length>=200&&(o=Wt,a=!1,t=new Gn(t));e:for(;++i<s;){var c=e[i],f=null==n?c:n(c);if(c=r||0!==c?c:0,a&&f==f){for(var d=u;d--;)if(t[d]===f)continue e;l.push(c)}else o(t,f,r)||l.push(c)}return l}Fn.templateSettings={escape:Q,evaluate:J,interpolate:Y,variable:"",imports:{_:Fn}},Fn.prototype=Vn.prototype,Fn.prototype.constructor=Fn,Hn.prototype=zn(Vn.prototype),Hn.prototype.constructor=Hn,Un.prototype=zn(Vn.prototype),Un.prototype.constructor=Un,qn.prototype.clear=function(){this.__data__=jn?jn(null):{},this.size=0},qn.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},qn.prototype.get=function(e){var t=this.__data__;if(jn){var n=t[e];return n===a?i:n}return Le.call(t,e)?t[e]:i},qn.prototype.has=function(e){var t=this.__data__;return jn?t[e]!==i:Le.call(t,e)},qn.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=jn&&t===i?a:t,this},Wn.prototype.clear=function(){this.__data__=[],this.size=0},Wn.prototype.delete=function(e){var t=this.__data__,n=tr(t,e);return!(n<0||(n==t.length-1?t.pop():rt.call(t,n,1),--this.size,0))},Wn.prototype.get=function(e){var t=this.__data__,n=tr(t,e);return n<0?i:t[n][1]},Wn.prototype.has=function(e){return tr(this.__data__,e)>-1},Wn.prototype.set=function(e,t){var n=this.__data__,r=tr(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},$n.prototype.clear=function(){this.size=0,this.__data__={hash:new qn,map:new(Cn||Wn),string:new qn}},$n.prototype.delete=function(e){var t=so(this,e).delete(e);return this.size-=t?1:0,t},$n.prototype.get=function(e){return so(this,e).get(e)},$n.prototype.has=function(e){return so(this,e).has(e)},$n.prototype.set=function(e,t){var n=so(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},Gn.prototype.add=Gn.prototype.push=function(e){return this.__data__.set(e,a),this},Gn.prototype.has=function(e){return this.__data__.has(e)},Kn.prototype.clear=function(){this.__data__=new Wn,this.size=0},Kn.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Kn.prototype.get=function(e){return this.__data__.get(e)},Kn.prototype.has=function(e){return this.__data__.has(e)},Kn.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Wn){var r=n.__data__;if(!Cn||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new $n(r)}return n.set(e,t),this.size=n.size,this};var fr=Ti(gr),dr=Ti(_r,!0);function pr(e,t){var n=!0;return fr(e,(function(e,r,i){return n=!!t(e,r,i)})),n}function hr(e,t,n){for(var r=-1,o=e.length;++r<o;){var a=e[r],s=t(a);if(null!=s&&(l===i?s==s&&!us(s):n(s,l)))var l=s,u=a}return u}function yr(e,t){var n=[];return fr(e,(function(e,r,i){t(e,r,i)&&n.push(e)})),n}function mr(e,t,n,r,i){var o=-1,a=e.length;for(n||(n=mo),i||(i=[]);++o<a;){var s=e[o];t>0&&n(s)?t>1?mr(s,t-1,n,r,i):Ot(i,s):r||(i[i.length]=s)}return i}var vr=Ri(),br=Ri(!0);function gr(e,t){return e&&vr(e,t,Rs)}function _r(e,t){return e&&br(e,t,Rs)}function wr(e,t){return kt(t,(function(t){return Za(e[t])}))}function kr(e,t){for(var n=0,r=(t=vi(t,e)).length;null!=e&&n<r;)e=e[Mo(t[n++])];return n&&n==r?e:i}function xr(e,t,n){var r=t(e);return Wa(e)?r:Ot(r,n(e))}function Cr(e){return null==e?e===i?"[object Undefined]":"[object Null]":st&&st in Ce(e)?function(e){var t=Le.call(e,st),n=e[st];try{e[st]=i;var r=!0}catch(e){}var o=Be.call(e);return r&&(t?e[st]=n:delete e[st]),o}(e):function(e){return Be.call(e)}(e)}function Er(e,t){return e>t}function Or(e,t){return null!=e&&Le.call(e,t)}function Sr(e,t){return null!=e&&t in Ce(e)}function jr(e,t,n){for(var o=n?Ct:xt,a=e[0].length,s=e.length,l=s,u=r(s),c=1/0,f=[];l--;){var d=e[l];l&&t&&(d=Et(d,Ut(t))),c=bn(d.length,c),u[l]=!n&&(t||a>=120&&d.length>=120)?new Gn(l&&d):i}d=e[0];var p=-1,h=u[0];e:for(;++p<a&&f.length<c;){var y=d[p],m=t?t(y):y;if(y=n||0!==y?y:0,!(h?Wt(h,m):o(f,m,n))){for(l=s;--l;){var v=u[l];if(!(v?Wt(v,m):o(e[l],m,n)))continue e}h&&h.push(m),f.push(y)}}return f}function Ar(e,t,n){var r=null==(e=Oo(e,t=vi(t,e)))?e:e[Mo(Yo(t))];return null==r?i:vt(r,e,n)}function Pr(e){return ns(e)&&Cr(e)==y}function Tr(e,t,n,r,o){return e===t||(null==e||null==t||!ns(e)&&!ns(t)?e!=e&&t!=t:function(e,t,n,r,o,a){var s=Wa(e),l=Wa(t),u=s?m:po(e),c=l?m:po(t),f=(u=u==y?C:u)==C,d=(c=c==y?C:c)==C,p=u==c;if(p&&Qa(e)){if(!Qa(t))return!1;s=!0,f=!1}if(p&&!f)return a||(a=new Kn),s||cs(e)?Xi(e,t,n,r,o,a):function(e,t,n,r,i,o,a){switch(n){case R:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case T:return!(e.byteLength!=t.byteLength||!o(new He(e),new He(t)));case v:case b:case x:return Va(+e,+t);case g:return e.name==t.name&&e.message==t.message;case O:case j:return e==t+"";case k:var s=Xt;case S:var l=1&r;if(s||(s=nn),e.size!=t.size&&!l)return!1;var u=a.get(e);if(u)return u==t;r|=2,a.set(e,t);var c=Xi(s(e),s(t),r,i,o,a);return a.delete(e),c;case A:if(Dn)return Dn.call(e)==Dn.call(t)}return!1}(e,t,u,n,r,o,a);if(!(1&n)){var h=f&&Le.call(e,"__wrapped__"),_=d&&Le.call(t,"__wrapped__");if(h||_){var w=h?e.value():e,E=_?t.value():t;return a||(a=new Kn),o(w,E,n,r,a)}}return!!p&&(a||(a=new Kn),function(e,t,n,r,o,a){var s=1&n,l=to(e),u=l.length;if(u!=to(t).length&&!s)return!1;for(var c=u;c--;){var f=l[c];if(!(s?f in t:Le.call(t,f)))return!1}var d=a.get(e),p=a.get(t);if(d&&p)return d==t&&p==e;var h=!0;a.set(e,t),a.set(t,e);for(var y=s;++c<u;){var m=e[f=l[c]],v=t[f];if(r)var b=s?r(v,m,f,t,e,a):r(m,v,f,e,t,a);if(!(b===i?m===v||o(m,v,n,r,a):b)){h=!1;break}y||(y="constructor"==f)}if(h&&!y){var g=e.constructor,_=t.constructor;g==_||!("constructor"in e)||!("constructor"in t)||"function"==typeof g&&g instanceof g&&"function"==typeof _&&_ instanceof _||(h=!1)}return a.delete(e),a.delete(t),h}(e,t,n,r,o,a))}(e,t,n,r,Tr,o))}function Rr(e,t,n,r){var o=n.length,a=o,s=!r;if(null==e)return!a;for(e=Ce(e);o--;){var l=n[o];if(s&&l[2]?l[1]!==e[l[0]]:!(l[0]in e))return!1}for(;++o<a;){var u=(l=n[o])[0],c=e[u],f=l[1];if(s&&l[2]){if(c===i&&!(u in e))return!1}else{var d=new Kn;if(r)var p=r(c,f,u,e,t,d);if(!(p===i?Tr(f,c,3,r,d):p))return!1}}return!0}function Lr(e){return!(!ts(e)||(t=e,Ne&&Ne in t))&&(Za(e)?Fe:ye).test(Fo(e));var t}function Ir(e){return"function"==typeof e?e:null==e?il:"object"==typeof e?Wa(e)?Fr(e[0],e[1]):Mr(e):pl(e)}function Nr(e){if(!ko(e))return mn(e);var t=[];for(var n in Ce(e))Le.call(e,n)&&"constructor"!=n&&t.push(n);return t}function Br(e,t){return e<t}function Dr(e,t){var n=-1,i=Ga(e)?r(e.length):[];return fr(e,(function(e,r,o){i[++n]=t(e,r,o)})),i}function Mr(e){var t=lo(e);return 1==t.length&&t[0][2]?Co(t[0][0],t[0][1]):function(n){return n===e||Rr(n,e,t)}}function Fr(e,t){return go(e)&&xo(t)?Co(Mo(e),t):function(n){var r=Ss(n,e);return r===i&&r===t?js(n,e):Tr(t,r,3)}}function zr(e,t,n,r,o){e!==t&&vr(t,(function(a,s){if(o||(o=new Kn),ts(a))!function(e,t,n,r,o,a,s){var l=jo(e,n),u=jo(t,n),c=s.get(u);if(c)Xn(e,n,c);else{var f=a?a(l,u,n+"",e,t,s):i,d=f===i;if(d){var p=Wa(u),h=!p&&Qa(u),y=!p&&!h&&cs(u);f=u,p||h||y?Wa(l)?f=l:Ka(l)?f=Si(l):h?(d=!1,f=wi(u,!0)):y?(d=!1,f=xi(u,!0)):f=[]:os(u)||qa(u)?(f=l,qa(l)?f=bs(l):ts(l)&&!Za(l)||(f=yo(u))):d=!1}d&&(s.set(u,f),o(f,u,r,a,s),s.delete(u)),Xn(e,n,f)}}(e,t,s,n,zr,r,o);else{var l=r?r(jo(e,s),a,s+"",e,t,o):i;l===i&&(l=a),Xn(e,s,l)}}),Ls)}function Vr(e,t){var n=e.length;if(n)return vo(t+=t<0?n:0,n)?e[t]:i}function Hr(e,t,n){t=t.length?Et(t,(function(e){return Wa(e)?function(t){return kr(t,1===e.length?e[0]:e)}:e})):[il];var r=-1;return t=Et(t,Ut(ao())),function(e,t){var r=e.length;for(e.sort((function(e,t){return function(e,t,n){for(var r=-1,i=e.criteria,o=t.criteria,a=i.length,s=n.length;++r<a;){var l=Ci(i[r],o[r]);if(l)return r>=s?l:l*("desc"==n[r]?-1:1)}return e.index-t.index}(e,t,n)}));r--;)e[r]=e[r].value;return e}(Dr(e,(function(e,n,i){return{criteria:Et(t,(function(t){return t(e)})),index:++r,value:e}})))}function Ur(e,t,n){for(var r=-1,i=t.length,o={};++r<i;){var a=t[r],s=kr(e,a);n(s,a)&&Yr(o,vi(a,e),s)}return o}function qr(e,t,n,r){var i=r?It:Lt,o=-1,a=t.length,s=e;for(e===t&&(t=Si(t)),n&&(s=Et(e,Ut(n)));++o<a;)for(var l=0,u=t[o],c=n?n(u):u;(l=i(s,c,l,r))>-1;)s!==e&&rt.call(s,l,1),rt.call(e,l,1);return e}function Wr(e,t){for(var n=e?t.length:0,r=n-1;n--;){var i=t[n];if(n==r||i!==o){var o=i;vo(i)?rt.call(e,i,1):ui(e,i)}}return e}function $r(e,t){return e+fn(wn()*(t-e+1))}function Gr(e,t){var n="";if(!e||t<1||t>f)return n;do{t%2&&(n+=e),(t=fn(t/2))&&(e+=e)}while(t);return n}function Kr(e,t){return To(Eo(e,t,il),e+"")}function Qr(e){return Jn(Vs(e))}function Jr(e,t){var n=Vs(e);return Io(n,ar(t,0,n.length))}function Yr(e,t,n,r){if(!ts(e))return e;for(var o=-1,a=(t=vi(t,e)).length,s=a-1,l=e;null!=l&&++o<a;){var u=Mo(t[o]),c=n;if("__proto__"===u||"constructor"===u||"prototype"===u)return e;if(o!=s){var f=l[u];(c=r?r(f,u,l):i)===i&&(c=ts(f)?f:vo(t[o+1])?[]:{})}er(l,u,c),l=l[u]}return e}var Zr=An?function(e,t){return An.set(e,t),e}:il,Xr=ut?function(e,t){return ut(e,"toString",{configurable:!0,enumerable:!1,value:tl(t),writable:!0})}:il;function ei(e){return Io(Vs(e))}function ti(e,t,n){var i=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(n=n>o?o:n)<0&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var a=r(o);++i<o;)a[i]=e[i+t];return a}function ni(e,t){var n;return fr(e,(function(e,r,i){return!(n=t(e,r,i))})),!!n}function ri(e,t,n){var r=0,i=null==e?r:e.length;if("number"==typeof t&&t==t&&i<=2147483647){for(;r<i;){var o=r+i>>>1,a=e[o];null!==a&&!us(a)&&(n?a<=t:a<t)?r=o+1:i=o}return i}return ii(e,t,il,n)}function ii(e,t,n,r){var o=0,a=null==e?0:e.length;if(0===a)return 0;for(var s=(t=n(t))!=t,l=null===t,u=us(t),c=t===i;o<a;){var f=fn((o+a)/2),d=n(e[f]),p=d!==i,h=null===d,y=d==d,m=us(d);if(s)var v=r||y;else v=c?y&&(r||p):l?y&&p&&(r||!h):u?y&&p&&!h&&(r||!m):!h&&!m&&(r?d<=t:d<t);v?o=f+1:a=f}return bn(a,4294967294)}function oi(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var a=e[n],s=t?t(a):a;if(!n||!Va(s,l)){var l=s;o[i++]=0===a?0:a}}return o}function ai(e){return"number"==typeof e?e:us(e)?d:+e}function si(e){if("string"==typeof e)return e;if(Wa(e))return Et(e,si)+"";if(us(e))return Mn?Mn.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function li(e,t,n){var r=-1,i=xt,o=e.length,a=!0,s=[],l=s;if(n)a=!1,i=Ct;else if(o>=200){var u=t?null:Gi(e);if(u)return nn(u);a=!1,i=Wt,l=new Gn}else l=t?[]:s;e:for(;++r<o;){var c=e[r],f=t?t(c):c;if(c=n||0!==c?c:0,a&&f==f){for(var d=l.length;d--;)if(l[d]===f)continue e;t&&l.push(f),s.push(c)}else i(l,f,n)||(l!==s&&l.push(f),s.push(c))}return s}function ui(e,t){return null==(e=Oo(e,t=vi(t,e)))||delete e[Mo(Yo(t))]}function ci(e,t,n,r){return Yr(e,t,n(kr(e,t)),r)}function fi(e,t,n,r){for(var i=e.length,o=r?i:-1;(r?o--:++o<i)&&t(e[o],o,e););return n?ti(e,r?0:o,r?o+1:i):ti(e,r?o+1:0,r?i:o)}function di(e,t){var n=e;return n instanceof Un&&(n=n.value()),St(t,(function(e,t){return t.func.apply(t.thisArg,Ot([e],t.args))}),n)}function pi(e,t,n){var i=e.length;if(i<2)return i?li(e[0]):[];for(var o=-1,a=r(i);++o<i;)for(var s=e[o],l=-1;++l<i;)l!=o&&(a[o]=cr(a[o]||s,e[l],t,n));return li(mr(a,1),t,n)}function hi(e,t,n){for(var r=-1,o=e.length,a=t.length,s={};++r<o;){var l=r<a?t[r]:i;n(s,e[r],l)}return s}function yi(e){return Ka(e)?e:[]}function mi(e){return"function"==typeof e?e:il}function vi(e,t){return Wa(e)?e:go(e,t)?[e]:Do(gs(e))}var bi=Kr;function gi(e,t,n){var r=e.length;return n=n===i?r:n,!t&&n>=r?e:ti(e,t,n)}var _i=ct||function(e){return ot.clearTimeout(e)};function wi(e,t){if(t)return e.slice();var n=e.length,r=Ue?Ue(n):new e.constructor(n);return e.copy(r),r}function ki(e){var t=new e.constructor(e.byteLength);return new He(t).set(new He(e)),t}function xi(e,t){var n=t?ki(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function Ci(e,t){if(e!==t){var n=e!==i,r=null===e,o=e==e,a=us(e),s=t!==i,l=null===t,u=t==t,c=us(t);if(!l&&!c&&!a&&e>t||a&&s&&u&&!l&&!c||r&&s&&u||!n&&u||!o)return 1;if(!r&&!a&&!c&&e<t||c&&n&&o&&!r&&!a||l&&n&&o||!s&&o||!u)return-1}return 0}function Ei(e,t,n,i){for(var o=-1,a=e.length,s=n.length,l=-1,u=t.length,c=vn(a-s,0),f=r(u+c),d=!i;++l<u;)f[l]=t[l];for(;++o<s;)(d||o<a)&&(f[n[o]]=e[o]);for(;c--;)f[l++]=e[o++];return f}function Oi(e,t,n,i){for(var o=-1,a=e.length,s=-1,l=n.length,u=-1,c=t.length,f=vn(a-l,0),d=r(f+c),p=!i;++o<f;)d[o]=e[o];for(var h=o;++u<c;)d[h+u]=t[u];for(;++s<l;)(p||o<a)&&(d[h+n[s]]=e[o++]);return d}function Si(e,t){var n=-1,i=e.length;for(t||(t=r(i));++n<i;)t[n]=e[n];return t}function ji(e,t,n,r){var o=!n;n||(n={});for(var a=-1,s=t.length;++a<s;){var l=t[a],u=r?r(n[l],e[l],l,n,e):i;u===i&&(u=e[l]),o?ir(n,l,u):er(n,l,u)}return n}function Ai(e,t){return function(n,r){var i=Wa(n)?bt:nr,o=t?t():{};return i(n,e,ao(r,2),o)}}function Pi(e){return Kr((function(t,n){var r=-1,o=n.length,a=o>1?n[o-1]:i,s=o>2?n[2]:i;for(a=e.length>3&&"function"==typeof a?(o--,a):i,s&&bo(n[0],n[1],s)&&(a=o<3?i:a,o=1),t=Ce(t);++r<o;){var l=n[r];l&&e(t,l,r,a)}return t}))}function Ti(e,t){return function(n,r){if(null==n)return n;if(!Ga(n))return e(n,r);for(var i=n.length,o=t?i:-1,a=Ce(n);(t?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function Ri(e){return function(t,n,r){for(var i=-1,o=Ce(t),a=r(t),s=a.length;s--;){var l=a[e?s:++i];if(!1===n(o[l],l,o))break}return t}}function Li(e){return function(t){var n=Zt(t=gs(t))?an(t):i,r=n?n[0]:t.charAt(0),o=n?gi(n,1).join(""):t.slice(1);return r[e]()+o}}function Ii(e){return function(t){return St(Zs(qs(t).replace(qe,"")),e,"")}}function Ni(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=zn(e.prototype),r=e.apply(n,t);return ts(r)?r:n}}function Bi(e){return function(t,n,r){var o=Ce(t);if(!Ga(t)){var a=ao(n,3);t=Rs(t),n=function(e){return a(o[e],e,o)}}var s=e(t,n,r);return s>-1?o[a?t[s]:s]:i}}function Di(e){return eo((function(t){var n=t.length,r=n,a=Hn.prototype.thru;for(e&&t.reverse();r--;){var s=t[r];if("function"!=typeof s)throw new Se(o);if(a&&!l&&"wrapper"==io(s))var l=new Hn([],!0)}for(r=l?r:n;++r<n;){var u=io(s=t[r]),c="wrapper"==u?ro(s):i;l=c&&_o(c[0])&&424==c[1]&&!c[4].length&&1==c[9]?l[io(c[0])].apply(l,c[3]):1==s.length&&_o(s)?l[u]():l.thru(s)}return function(){var e=arguments,r=e[0];if(l&&1==e.length&&Wa(r))return l.plant(r).value();for(var i=0,o=n?t[i].apply(this,e):r;++i<n;)o=t[i].call(this,o);return o}}))}function Mi(e,t,n,o,a,s,l,c,f,d){var p=t&u,h=1&t,y=2&t,m=24&t,v=512&t,b=y?i:Ni(e);return function i(){for(var u=arguments.length,g=r(u),_=u;_--;)g[_]=arguments[_];if(m)var w=oo(i),k=Kt(g,w);if(o&&(g=Ei(g,o,a,m)),s&&(g=Oi(g,s,l,m)),u-=k,m&&u<d){var x=tn(g,w);return Wi(e,t,Mi,i.placeholder,n,g,x,c,f,d-u)}var C=h?n:this,E=y?C[e]:e;return u=g.length,c?g=So(g,c):v&&u>1&&g.reverse(),p&&f<u&&(g.length=f),this&&this!==ot&&this instanceof i&&(E=b||Ni(E)),E.apply(C,g)}}function Fi(e,t){return function(n,r){return function(e,t,n,r){return gr(e,(function(e,i,o){t(r,n(e),i,o)})),r}(n,e,t(r),{})}}function zi(e,t){return function(n,r){var o;if(n===i&&r===i)return t;if(n!==i&&(o=n),r!==i){if(o===i)return r;"string"==typeof n||"string"==typeof r?(n=si(n),r=si(r)):(n=ai(n),r=ai(r)),o=e(n,r)}return o}}function Vi(e){return eo((function(t){return t=Et(t,Ut(ao())),Kr((function(n){var r=this;return e(t,(function(e){return vt(e,r,n)}))}))}))}function Hi(e,t){var n=(t=t===i?" ":si(t)).length;if(n<2)return n?Gr(t,e):t;var r=Gr(t,cn(e/on(t)));return Zt(t)?gi(an(r),0,e).join(""):r.slice(0,e)}function Ui(e){return function(t,n,o){return o&&"number"!=typeof o&&bo(t,n,o)&&(n=o=i),t=hs(t),n===i?(n=t,t=0):n=hs(n),function(e,t,n,i){for(var o=-1,a=vn(cn((t-e)/(n||1)),0),s=r(a);a--;)s[i?a:++o]=e,e+=n;return s}(t,n,o=o===i?t<n?1:-1:hs(o),e)}}function qi(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=vs(t),n=vs(n)),e(t,n)}}function Wi(e,t,n,r,o,a,s,u,c,f){var d=8&t;t|=d?l:64,4&(t&=~(d?64:l))||(t&=-4);var p=[e,t,o,d?a:i,d?s:i,d?i:a,d?i:s,u,c,f],h=n.apply(i,p);return _o(e)&&Ao(h,p),h.placeholder=r,Ro(h,e,t)}function $i(e){var t=xe[e];return function(e,n){if(e=vs(e),(n=null==n?0:bn(ys(n),292))&&hn(e)){var r=(gs(e)+"e").split("e");return+((r=(gs(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var Gi=On&&1/nn(new On([,-0]))[1]==c?function(e){return new On(e)}:ul;function Ki(e){return function(t){var n=po(t);return n==k?Xt(t):n==S?rn(t):function(e,t){return Et(t,(function(t){return[t,e[t]]}))}(t,e(t))}}function Qi(e,t,n,a,c,f,d,p){var h=2&t;if(!h&&"function"!=typeof e)throw new Se(o);var y=a?a.length:0;if(y||(t&=-97,a=c=i),d=d===i?d:vn(ys(d),0),p=p===i?p:ys(p),y-=c?c.length:0,64&t){var m=a,v=c;a=c=i}var b=h?i:ro(e),g=[e,t,n,a,c,m,v,f,d,p];if(b&&function(e,t){var n=e[1],r=t[1],i=n|r,o=i<131,a=r==u&&8==n||r==u&&256==n&&e[7].length<=t[8]||384==r&&t[7].length<=t[8]&&8==n;if(!o&&!a)return e;1&r&&(e[2]=t[2],i|=1&n?0:4);var l=t[3];if(l){var c=e[3];e[3]=c?Ei(c,l,t[4]):l,e[4]=c?tn(e[3],s):t[4]}(l=t[5])&&(c=e[5],e[5]=c?Oi(c,l,t[6]):l,e[6]=c?tn(e[5],s):t[6]),(l=t[7])&&(e[7]=l),r&u&&(e[8]=null==e[8]?t[8]:bn(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=i}(g,b),e=g[0],t=g[1],n=g[2],a=g[3],c=g[4],!(p=g[9]=g[9]===i?h?0:e.length:vn(g[9]-y,0))&&24&t&&(t&=-25),t&&1!=t)_=8==t||16==t?function(e,t,n){var o=Ni(e);return function a(){for(var s=arguments.length,l=r(s),u=s,c=oo(a);u--;)l[u]=arguments[u];var f=s<3&&l[0]!==c&&l[s-1]!==c?[]:tn(l,c);return(s-=f.length)<n?Wi(e,t,Mi,a.placeholder,i,l,f,i,i,n-s):vt(this&&this!==ot&&this instanceof a?o:e,this,l)}}(e,t,p):t!=l&&33!=t||c.length?Mi.apply(i,g):function(e,t,n,i){var o=1&t,a=Ni(e);return function t(){for(var s=-1,l=arguments.length,u=-1,c=i.length,f=r(c+l),d=this&&this!==ot&&this instanceof t?a:e;++u<c;)f[u]=i[u];for(;l--;)f[u++]=arguments[++s];return vt(d,o?n:this,f)}}(e,t,n,a);else var _=function(e,t,n){var r=1&t,i=Ni(e);return function t(){return(this&&this!==ot&&this instanceof t?i:e).apply(r?n:this,arguments)}}(e,t,n);return Ro((b?Zr:Ao)(_,g),e,t)}function Ji(e,t,n,r){return e===i||Va(e,Pe[n])&&!Le.call(r,n)?t:e}function Yi(e,t,n,r,o,a){return ts(e)&&ts(t)&&(a.set(t,e),zr(e,t,i,Yi,a),a.delete(t)),e}function Zi(e){return os(e)?i:e}function Xi(e,t,n,r,o,a){var s=1&n,l=e.length,u=t.length;if(l!=u&&!(s&&u>l))return!1;var c=a.get(e),f=a.get(t);if(c&&f)return c==t&&f==e;var d=-1,p=!0,h=2&n?new Gn:i;for(a.set(e,t),a.set(t,e);++d<l;){var y=e[d],m=t[d];if(r)var v=s?r(m,y,d,t,e,a):r(y,m,d,e,t,a);if(v!==i){if(v)continue;p=!1;break}if(h){if(!At(t,(function(e,t){if(!Wt(h,t)&&(y===e||o(y,e,n,r,a)))return h.push(t)}))){p=!1;break}}else if(y!==m&&!o(y,m,n,r,a)){p=!1;break}}return a.delete(e),a.delete(t),p}function eo(e){return To(Eo(e,i,$o),e+"")}function to(e){return xr(e,Rs,co)}function no(e){return xr(e,Ls,fo)}var ro=An?function(e){return An.get(e)}:ul;function io(e){for(var t=e.name+"",n=Pn[t],r=Le.call(Pn,t)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==e)return i.name}return t}function oo(e){return(Le.call(Fn,"placeholder")?Fn:e).placeholder}function ao(){var e=Fn.iteratee||ol;return e=e===ol?Ir:e,arguments.length?e(arguments[0],arguments[1]):e}function so(e,t){var n=e.__data__;return function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}(t)?n["string"==typeof t?"string":"hash"]:n.map}function lo(e){for(var t=Rs(e),n=t.length;n--;){var r=t[n],i=e[r];t[n]=[r,i,xo(i)]}return t}function uo(e,t){var n=function(e,t){return null==e?i:e[t]}(e,t);return Lr(n)?n:i}var co=dn?function(e){return null==e?[]:(e=Ce(e),kt(dn(e),(function(t){return et.call(e,t)})))}:ml,fo=dn?function(e){for(var t=[];e;)Ot(t,co(e)),e=$e(e);return t}:ml,po=Cr;function ho(e,t,n){for(var r=-1,i=(t=vi(t,e)).length,o=!1;++r<i;){var a=Mo(t[r]);if(!(o=null!=e&&n(e,a)))break;e=e[a]}return o||++r!=i?o:!!(i=null==e?0:e.length)&&es(i)&&vo(a,i)&&(Wa(e)||qa(e))}function yo(e){return"function"!=typeof e.constructor||ko(e)?{}:zn($e(e))}function mo(e){return Wa(e)||qa(e)||!!(it&&e&&e[it])}function vo(e,t){var n=typeof e;return!!(t=null==t?f:t)&&("number"==n||"symbol"!=n&&ve.test(e))&&e>-1&&e%1==0&&e<t}function bo(e,t,n){if(!ts(n))return!1;var r=typeof t;return!!("number"==r?Ga(n)&&vo(t,n.length):"string"==r&&t in n)&&Va(n[t],e)}function go(e,t){if(Wa(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!us(e))||X.test(e)||!Z.test(e)||null!=t&&e in Ce(t)}function _o(e){var t=io(e),n=Fn[t];if("function"!=typeof n||!(t in Un.prototype))return!1;if(e===n)return!0;var r=ro(n);return!!r&&e===r[0]}(xn&&po(new xn(new ArrayBuffer(1)))!=R||Cn&&po(new Cn)!=k||En&&po(En.resolve())!=E||On&&po(new On)!=S||Sn&&po(new Sn)!=P)&&(po=function(e){var t=Cr(e),n=t==C?e.constructor:i,r=n?Fo(n):"";if(r)switch(r){case Tn:return R;case Rn:return k;case Ln:return E;case In:return S;case Nn:return P}return t});var wo=Te?Za:vl;function ko(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||Pe)}function xo(e){return e==e&&!ts(e)}function Co(e,t){return function(n){return null!=n&&n[e]===t&&(t!==i||e in Ce(n))}}function Eo(e,t,n){return t=vn(t===i?e.length-1:t,0),function(){for(var i=arguments,o=-1,a=vn(i.length-t,0),s=r(a);++o<a;)s[o]=i[t+o];o=-1;for(var l=r(t+1);++o<t;)l[o]=i[o];return l[t]=n(s),vt(e,this,l)}}function Oo(e,t){return t.length<2?e:kr(e,ti(t,0,-1))}function So(e,t){for(var n=e.length,r=bn(t.length,n),o=Si(e);r--;){var a=t[r];e[r]=vo(a,n)?o[a]:i}return e}function jo(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var Ao=Lo(Zr),Po=Mt||function(e,t){return ot.setTimeout(e,t)},To=Lo(Xr);function Ro(e,t,n){var r=t+"";return To(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(oe,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return gt(h,(function(n){var r="_."+n[0];t&n[1]&&!xt(e,r)&&e.push(r)})),e.sort()}(function(e){var t=e.match(ae);return t?t[1].split(se):[]}(r),n)))}function Lo(e){var t=0,n=0;return function(){var r=gn(),o=16-(r-n);if(n=r,o>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(i,arguments)}}function Io(e,t){var n=-1,r=e.length,o=r-1;for(t=t===i?r:t;++n<t;){var a=$r(n,o),s=e[a];e[a]=e[n],e[n]=s}return e.length=t,e}var No,Bo,Do=(No=Na((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(ee,(function(e,n,r,i){t.push(r?i.replace(ce,"$1"):n||e)})),t}),(function(e){return 500===Bo.size&&Bo.clear(),e})),Bo=No.cache,No);function Mo(e){if("string"==typeof e||us(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function Fo(e){if(null!=e){try{return Re.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function zo(e){if(e instanceof Un)return e.clone();var t=new Hn(e.__wrapped__,e.__chain__);return t.__actions__=Si(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var Vo=Kr((function(e,t){return Ka(e)?cr(e,mr(t,1,Ka,!0)):[]})),Ho=Kr((function(e,t){var n=Yo(t);return Ka(n)&&(n=i),Ka(e)?cr(e,mr(t,1,Ka,!0),ao(n,2)):[]})),Uo=Kr((function(e,t){var n=Yo(t);return Ka(n)&&(n=i),Ka(e)?cr(e,mr(t,1,Ka,!0),i,n):[]}));function qo(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:ys(n);return i<0&&(i=vn(r+i,0)),Rt(e,ao(t,3),i)}function Wo(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r-1;return n!==i&&(o=ys(n),o=n<0?vn(r+o,0):bn(o,r-1)),Rt(e,ao(t,3),o,!0)}function $o(e){return null!=e&&e.length?mr(e,1):[]}function Go(e){return e&&e.length?e[0]:i}var Ko=Kr((function(e){var t=Et(e,yi);return t.length&&t[0]===e[0]?jr(t):[]})),Qo=Kr((function(e){var t=Yo(e),n=Et(e,yi);return t===Yo(n)?t=i:n.pop(),n.length&&n[0]===e[0]?jr(n,ao(t,2)):[]})),Jo=Kr((function(e){var t=Yo(e),n=Et(e,yi);return(t="function"==typeof t?t:i)&&n.pop(),n.length&&n[0]===e[0]?jr(n,i,t):[]}));function Yo(e){var t=null==e?0:e.length;return t?e[t-1]:i}var Zo=Kr(Xo);function Xo(e,t){return e&&e.length&&t&&t.length?qr(e,t):e}var ea=eo((function(e,t){var n=null==e?0:e.length,r=or(e,t);return Wr(e,Et(t,(function(e){return vo(e,n)?+e:e})).sort(Ci)),r}));function ta(e){return null==e?e:kn.call(e)}var na=Kr((function(e){return li(mr(e,1,Ka,!0))})),ra=Kr((function(e){var t=Yo(e);return Ka(t)&&(t=i),li(mr(e,1,Ka,!0),ao(t,2))})),ia=Kr((function(e){var t=Yo(e);return t="function"==typeof t?t:i,li(mr(e,1,Ka,!0),i,t)}));function oa(e){if(!e||!e.length)return[];var t=0;return e=kt(e,(function(e){if(Ka(e))return t=vn(e.length,t),!0})),Vt(t,(function(t){return Et(e,Dt(t))}))}function aa(e,t){if(!e||!e.length)return[];var n=oa(e);return null==t?n:Et(n,(function(e){return vt(t,i,e)}))}var sa=Kr((function(e,t){return Ka(e)?cr(e,t):[]})),la=Kr((function(e){return pi(kt(e,Ka))})),ua=Kr((function(e){var t=Yo(e);return Ka(t)&&(t=i),pi(kt(e,Ka),ao(t,2))})),ca=Kr((function(e){var t=Yo(e);return t="function"==typeof t?t:i,pi(kt(e,Ka),i,t)})),fa=Kr(oa),da=Kr((function(e){var t=e.length,n=t>1?e[t-1]:i;return n="function"==typeof n?(e.pop(),n):i,aa(e,n)}));function pa(e){var t=Fn(e);return t.__chain__=!0,t}function ha(e,t){return t(e)}var ya=eo((function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,o=function(t){return or(t,e)};return!(t>1||this.__actions__.length)&&r instanceof Un&&vo(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:ha,args:[o],thisArg:i}),new Hn(r,this.__chain__).thru((function(e){return t&&!e.length&&e.push(i),e}))):this.thru(o)})),ma=Ai((function(e,t,n){Le.call(e,n)?++e[n]:ir(e,n,1)})),va=Bi(qo),ba=Bi(Wo);function ga(e,t){return(Wa(e)?gt:fr)(e,ao(t,3))}function _a(e,t){return(Wa(e)?_t:dr)(e,ao(t,3))}var wa=Ai((function(e,t,n){Le.call(e,n)?e[n].push(t):ir(e,n,[t])})),ka=Kr((function(e,t,n){var i=-1,o="function"==typeof t,a=Ga(e)?r(e.length):[];return fr(e,(function(e){a[++i]=o?vt(t,e,n):Ar(e,t,n)})),a})),xa=Ai((function(e,t,n){ir(e,n,t)}));function Ca(e,t){return(Wa(e)?Et:Dr)(e,ao(t,3))}var Ea=Ai((function(e,t,n){e[n?0:1].push(t)}),(function(){return[[],[]]})),Oa=Kr((function(e,t){if(null==e)return[];var n=t.length;return n>1&&bo(e,t[0],t[1])?t=[]:n>2&&bo(t[0],t[1],t[2])&&(t=[t[0]]),Hr(e,mr(t,1),[])})),Sa=Pt||function(){return ot.Date.now()};function ja(e,t,n){return t=n?i:t,t=e&&null==t?e.length:t,Qi(e,u,i,i,i,i,t)}function Aa(e,t){var n;if("function"!=typeof t)throw new Se(o);return e=ys(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=i),n}}var Pa=Kr((function(e,t,n){var r=1;if(n.length){var i=tn(n,oo(Pa));r|=l}return Qi(e,r,t,n,i)})),Ta=Kr((function(e,t,n){var r=3;if(n.length){var i=tn(n,oo(Ta));r|=l}return Qi(t,r,e,n,i)}));function Ra(e,t,n){var r,a,s,l,u,c,f=0,d=!1,p=!1,h=!0;if("function"!=typeof e)throw new Se(o);function y(t){var n=r,o=a;return r=a=i,f=t,l=e.apply(o,n)}function m(e){return f=e,u=Po(b,t),d?y(e):l}function v(e){var n=e-c;return c===i||n>=t||n<0||p&&e-f>=s}function b(){var e=Sa();if(v(e))return g(e);u=Po(b,function(e){var n=t-(e-c);return p?bn(n,s-(e-f)):n}(e))}function g(e){return u=i,h&&r?y(e):(r=a=i,l)}function _(){var e=Sa(),n=v(e);if(r=arguments,a=this,c=e,n){if(u===i)return m(c);if(p)return _i(u),u=Po(b,t),y(c)}return u===i&&(u=Po(b,t)),l}return t=vs(t)||0,ts(n)&&(d=!!n.leading,s=(p="maxWait"in n)?vn(vs(n.maxWait)||0,t):s,h="trailing"in n?!!n.trailing:h),_.cancel=function(){u!==i&&_i(u),f=0,r=c=a=u=i},_.flush=function(){return u===i?l:g(Sa())},_}var La=Kr((function(e,t){return ur(e,1,t)})),Ia=Kr((function(e,t,n){return ur(e,vs(t)||0,n)}));function Na(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new Se(o);var n=function(){var r=arguments,i=t?t.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=e.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(Na.Cache||$n),n}function Ba(e){if("function"!=typeof e)throw new Se(o);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}Na.Cache=$n;var Da=bi((function(e,t){var n=(t=1==t.length&&Wa(t[0])?Et(t[0],Ut(ao())):Et(mr(t,1),Ut(ao()))).length;return Kr((function(r){for(var i=-1,o=bn(r.length,n);++i<o;)r[i]=t[i].call(this,r[i]);return vt(e,this,r)}))})),Ma=Kr((function(e,t){var n=tn(t,oo(Ma));return Qi(e,l,i,t,n)})),Fa=Kr((function(e,t){var n=tn(t,oo(Fa));return Qi(e,64,i,t,n)})),za=eo((function(e,t){return Qi(e,256,i,i,i,t)}));function Va(e,t){return e===t||e!=e&&t!=t}var Ha=qi(Er),Ua=qi((function(e,t){return e>=t})),qa=Pr(function(){return arguments}())?Pr:function(e){return ns(e)&&Le.call(e,"callee")&&!et.call(e,"callee")},Wa=r.isArray,$a=ft?Ut(ft):function(e){return ns(e)&&Cr(e)==T};function Ga(e){return null!=e&&es(e.length)&&!Za(e)}function Ka(e){return ns(e)&&Ga(e)}var Qa=pn||vl,Ja=dt?Ut(dt):function(e){return ns(e)&&Cr(e)==b};function Ya(e){if(!ns(e))return!1;var t=Cr(e);return t==g||"[object DOMException]"==t||"string"==typeof e.message&&"string"==typeof e.name&&!os(e)}function Za(e){if(!ts(e))return!1;var t=Cr(e);return t==_||t==w||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Xa(e){return"number"==typeof e&&e==ys(e)}function es(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=f}function ts(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function ns(e){return null!=e&&"object"==typeof e}var rs=pt?Ut(pt):function(e){return ns(e)&&po(e)==k};function is(e){return"number"==typeof e||ns(e)&&Cr(e)==x}function os(e){if(!ns(e)||Cr(e)!=C)return!1;var t=$e(e);if(null===t)return!0;var n=Le.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&Re.call(n)==De}var as=ht?Ut(ht):function(e){return ns(e)&&Cr(e)==O},ss=yt?Ut(yt):function(e){return ns(e)&&po(e)==S};function ls(e){return"string"==typeof e||!Wa(e)&&ns(e)&&Cr(e)==j}function us(e){return"symbol"==typeof e||ns(e)&&Cr(e)==A}var cs=mt?Ut(mt):function(e){return ns(e)&&es(e.length)&&!!Ze[Cr(e)]},fs=qi(Br),ds=qi((function(e,t){return e<=t}));function ps(e){if(!e)return[];if(Ga(e))return ls(e)?an(e):Si(e);if(at&&e[at])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[at]());var t=po(e);return(t==k?Xt:t==S?nn:Vs)(e)}function hs(e){return e?(e=vs(e))===c||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function ys(e){var t=hs(e),n=t%1;return t==t?n?t-n:t:0}function ms(e){return e?ar(ys(e),0,p):0}function vs(e){if("number"==typeof e)return e;if(us(e))return d;if(ts(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=ts(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=Ht(e);var n=he.test(e);return n||me.test(e)?nt(e.slice(2),n?2:8):pe.test(e)?d:+e}function bs(e){return ji(e,Ls(e))}function gs(e){return null==e?"":si(e)}var _s=Pi((function(e,t){if(ko(t)||Ga(t))ji(t,Rs(t),e);else for(var n in t)Le.call(t,n)&&er(e,n,t[n])})),ws=Pi((function(e,t){ji(t,Ls(t),e)})),ks=Pi((function(e,t,n,r){ji(t,Ls(t),e,r)})),xs=Pi((function(e,t,n,r){ji(t,Rs(t),e,r)})),Cs=eo(or),Es=Kr((function(e,t){e=Ce(e);var n=-1,r=t.length,o=r>2?t[2]:i;for(o&&bo(t[0],t[1],o)&&(r=1);++n<r;)for(var a=t[n],s=Ls(a),l=-1,u=s.length;++l<u;){var c=s[l],f=e[c];(f===i||Va(f,Pe[c])&&!Le.call(e,c))&&(e[c]=a[c])}return e})),Os=Kr((function(e){return e.push(i,Yi),vt(Ns,i,e)}));function Ss(e,t,n){var r=null==e?i:kr(e,t);return r===i?n:r}function js(e,t){return null!=e&&ho(e,t,Sr)}var As=Fi((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Be.call(t)),e[t]=n}),tl(il)),Ps=Fi((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Be.call(t)),Le.call(e,t)?e[t].push(n):e[t]=[n]}),ao),Ts=Kr(Ar);function Rs(e){return Ga(e)?Qn(e):Nr(e)}function Ls(e){return Ga(e)?Qn(e,!0):function(e){if(!ts(e))return function(e){var t=[];if(null!=e)for(var n in Ce(e))t.push(n);return t}(e);var t=ko(e),n=[];for(var r in e)("constructor"!=r||!t&&Le.call(e,r))&&n.push(r);return n}(e)}var Is=Pi((function(e,t,n){zr(e,t,n)})),Ns=Pi((function(e,t,n,r){zr(e,t,n,r)})),Bs=eo((function(e,t){var n={};if(null==e)return n;var r=!1;t=Et(t,(function(t){return t=vi(t,e),r||(r=t.length>1),t})),ji(e,no(e),n),r&&(n=sr(n,7,Zi));for(var i=t.length;i--;)ui(n,t[i]);return n})),Ds=eo((function(e,t){return null==e?{}:function(e,t){return Ur(e,t,(function(t,n){return js(e,n)}))}(e,t)}));function Ms(e,t){if(null==e)return{};var n=Et(no(e),(function(e){return[e]}));return t=ao(t),Ur(e,n,(function(e,n){return t(e,n[0])}))}var Fs=Ki(Rs),zs=Ki(Ls);function Vs(e){return null==e?[]:qt(e,Rs(e))}var Hs=Ii((function(e,t,n){return t=t.toLowerCase(),e+(n?Us(t):t)}));function Us(e){return Ys(gs(e).toLowerCase())}function qs(e){return(e=gs(e))&&e.replace(be,Qt).replace(We,"")}var Ws=Ii((function(e,t,n){return e+(n?"-":"")+t.toLowerCase()})),$s=Ii((function(e,t,n){return e+(n?" ":"")+t.toLowerCase()})),Gs=Li("toLowerCase"),Ks=Ii((function(e,t,n){return e+(n?"_":"")+t.toLowerCase()})),Qs=Ii((function(e,t,n){return e+(n?" ":"")+Ys(t)})),Js=Ii((function(e,t,n){return e+(n?" ":"")+t.toUpperCase()})),Ys=Li("toUpperCase");function Zs(e,t,n){return e=gs(e),(t=n?i:t)===i?function(e){return Qe.test(e)}(e)?function(e){return e.match(Ge)||[]}(e):function(e){return e.match(le)||[]}(e):e.match(t)||[]}var Xs=Kr((function(e,t){try{return vt(e,i,t)}catch(e){return Ya(e)?e:new we(e)}})),el=eo((function(e,t){return gt(t,(function(t){t=Mo(t),ir(e,t,Pa(e[t],e))})),e}));function tl(e){return function(){return e}}var nl=Di(),rl=Di(!0);function il(e){return e}function ol(e){return Ir("function"==typeof e?e:sr(e,1))}var al=Kr((function(e,t){return function(n){return Ar(n,e,t)}})),sl=Kr((function(e,t){return function(n){return Ar(e,n,t)}}));function ll(e,t,n){var r=Rs(t),i=wr(t,r);null!=n||ts(t)&&(i.length||!r.length)||(n=t,t=e,e=this,i=wr(t,Rs(t)));var o=!(ts(n)&&"chain"in n&&!n.chain),a=Za(e);return gt(i,(function(n){var r=t[n];e[n]=r,a&&(e.prototype[n]=function(){var t=this.__chain__;if(o||t){var n=e(this.__wrapped__),i=n.__actions__=Si(this.__actions__);return i.push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,Ot([this.value()],arguments))})})),e}function ul(){}var cl=Vi(Et),fl=Vi(wt),dl=Vi(At);function pl(e){return go(e)?Dt(Mo(e)):function(e){return function(t){return kr(t,e)}}(e)}var hl=Ui(),yl=Ui(!0);function ml(){return[]}function vl(){return!1}var bl,gl=zi((function(e,t){return e+t}),0),_l=$i("ceil"),wl=zi((function(e,t){return e/t}),1),kl=$i("floor"),xl=zi((function(e,t){return e*t}),1),Cl=$i("round"),El=zi((function(e,t){return e-t}),0);return Fn.after=function(e,t){if("function"!=typeof t)throw new Se(o);return e=ys(e),function(){if(--e<1)return t.apply(this,arguments)}},Fn.ary=ja,Fn.assign=_s,Fn.assignIn=ws,Fn.assignInWith=ks,Fn.assignWith=xs,Fn.at=Cs,Fn.before=Aa,Fn.bind=Pa,Fn.bindAll=el,Fn.bindKey=Ta,Fn.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return Wa(e)?e:[e]},Fn.chain=pa,Fn.chunk=function(e,t,n){t=(n?bo(e,t,n):t===i)?1:vn(ys(t),0);var o=null==e?0:e.length;if(!o||t<1)return[];for(var a=0,s=0,l=r(cn(o/t));a<o;)l[s++]=ti(e,a,a+=t);return l},Fn.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,i=[];++t<n;){var o=e[t];o&&(i[r++]=o)}return i},Fn.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],i=e;i--;)t[i-1]=arguments[i];return Ot(Wa(n)?Si(n):[n],mr(t,1))},Fn.cond=function(e){var t=null==e?0:e.length,n=ao();return e=t?Et(e,(function(e){if("function"!=typeof e[1])throw new Se(o);return[n(e[0]),e[1]]})):[],Kr((function(n){for(var r=-1;++r<t;){var i=e[r];if(vt(i[0],this,n))return vt(i[1],this,n)}}))},Fn.conforms=function(e){return function(e){var t=Rs(e);return function(n){return lr(n,e,t)}}(sr(e,1))},Fn.constant=tl,Fn.countBy=ma,Fn.create=function(e,t){var n=zn(e);return null==t?n:rr(n,t)},Fn.curry=function e(t,n,r){var o=Qi(t,8,i,i,i,i,i,n=r?i:n);return o.placeholder=e.placeholder,o},Fn.curryRight=function e(t,n,r){var o=Qi(t,16,i,i,i,i,i,n=r?i:n);return o.placeholder=e.placeholder,o},Fn.debounce=Ra,Fn.defaults=Es,Fn.defaultsDeep=Os,Fn.defer=La,Fn.delay=Ia,Fn.difference=Vo,Fn.differenceBy=Ho,Fn.differenceWith=Uo,Fn.drop=function(e,t,n){var r=null==e?0:e.length;return r?ti(e,(t=n||t===i?1:ys(t))<0?0:t,r):[]},Fn.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?ti(e,0,(t=r-(t=n||t===i?1:ys(t)))<0?0:t):[]},Fn.dropRightWhile=function(e,t){return e&&e.length?fi(e,ao(t,3),!0,!0):[]},Fn.dropWhile=function(e,t){return e&&e.length?fi(e,ao(t,3),!0):[]},Fn.fill=function(e,t,n,r){var o=null==e?0:e.length;return o?(n&&"number"!=typeof n&&bo(e,t,n)&&(n=0,r=o),function(e,t,n,r){var o=e.length;for((n=ys(n))<0&&(n=-n>o?0:o+n),(r=r===i||r>o?o:ys(r))<0&&(r+=o),r=n>r?0:ms(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},Fn.filter=function(e,t){return(Wa(e)?kt:yr)(e,ao(t,3))},Fn.flatMap=function(e,t){return mr(Ca(e,t),1)},Fn.flatMapDeep=function(e,t){return mr(Ca(e,t),c)},Fn.flatMapDepth=function(e,t,n){return n=n===i?1:ys(n),mr(Ca(e,t),n)},Fn.flatten=$o,Fn.flattenDeep=function(e){return null!=e&&e.length?mr(e,c):[]},Fn.flattenDepth=function(e,t){return null!=e&&e.length?mr(e,t=t===i?1:ys(t)):[]},Fn.flip=function(e){return Qi(e,512)},Fn.flow=nl,Fn.flowRight=rl,Fn.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var i=e[t];r[i[0]]=i[1]}return r},Fn.functions=function(e){return null==e?[]:wr(e,Rs(e))},Fn.functionsIn=function(e){return null==e?[]:wr(e,Ls(e))},Fn.groupBy=wa,Fn.initial=function(e){return null!=e&&e.length?ti(e,0,-1):[]},Fn.intersection=Ko,Fn.intersectionBy=Qo,Fn.intersectionWith=Jo,Fn.invert=As,Fn.invertBy=Ps,Fn.invokeMap=ka,Fn.iteratee=ol,Fn.keyBy=xa,Fn.keys=Rs,Fn.keysIn=Ls,Fn.map=Ca,Fn.mapKeys=function(e,t){var n={};return t=ao(t,3),gr(e,(function(e,r,i){ir(n,t(e,r,i),e)})),n},Fn.mapValues=function(e,t){var n={};return t=ao(t,3),gr(e,(function(e,r,i){ir(n,r,t(e,r,i))})),n},Fn.matches=function(e){return Mr(sr(e,1))},Fn.matchesProperty=function(e,t){return Fr(e,sr(t,1))},Fn.memoize=Na,Fn.merge=Is,Fn.mergeWith=Ns,Fn.method=al,Fn.methodOf=sl,Fn.mixin=ll,Fn.negate=Ba,Fn.nthArg=function(e){return e=ys(e),Kr((function(t){return Vr(t,e)}))},Fn.omit=Bs,Fn.omitBy=function(e,t){return Ms(e,Ba(ao(t)))},Fn.once=function(e){return Aa(2,e)},Fn.orderBy=function(e,t,n,r){return null==e?[]:(Wa(t)||(t=null==t?[]:[t]),Wa(n=r?i:n)||(n=null==n?[]:[n]),Hr(e,t,n))},Fn.over=cl,Fn.overArgs=Da,Fn.overEvery=fl,Fn.overSome=dl,Fn.partial=Ma,Fn.partialRight=Fa,Fn.partition=Ea,Fn.pick=Ds,Fn.pickBy=Ms,Fn.property=pl,Fn.propertyOf=function(e){return function(t){return null==e?i:kr(e,t)}},Fn.pull=Zo,Fn.pullAll=Xo,Fn.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?qr(e,t,ao(n,2)):e},Fn.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?qr(e,t,i,n):e},Fn.pullAt=ea,Fn.range=hl,Fn.rangeRight=yl,Fn.rearg=za,Fn.reject=function(e,t){return(Wa(e)?kt:yr)(e,Ba(ao(t,3)))},Fn.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,i=[],o=e.length;for(t=ao(t,3);++r<o;){var a=e[r];t(a,r,e)&&(n.push(a),i.push(r))}return Wr(e,i),n},Fn.rest=function(e,t){if("function"!=typeof e)throw new Se(o);return Kr(e,t=t===i?t:ys(t))},Fn.reverse=ta,Fn.sampleSize=function(e,t,n){return t=(n?bo(e,t,n):t===i)?1:ys(t),(Wa(e)?Yn:Jr)(e,t)},Fn.set=function(e,t,n){return null==e?e:Yr(e,t,n)},Fn.setWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:Yr(e,t,n,r)},Fn.shuffle=function(e){return(Wa(e)?Zn:ei)(e)},Fn.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&bo(e,t,n)?(t=0,n=r):(t=null==t?0:ys(t),n=n===i?r:ys(n)),ti(e,t,n)):[]},Fn.sortBy=Oa,Fn.sortedUniq=function(e){return e&&e.length?oi(e):[]},Fn.sortedUniqBy=function(e,t){return e&&e.length?oi(e,ao(t,2)):[]},Fn.split=function(e,t,n){return n&&"number"!=typeof n&&bo(e,t,n)&&(t=n=i),(n=n===i?p:n>>>0)?(e=gs(e))&&("string"==typeof t||null!=t&&!as(t))&&!(t=si(t))&&Zt(e)?gi(an(e),0,n):e.split(t,n):[]},Fn.spread=function(e,t){if("function"!=typeof e)throw new Se(o);return t=null==t?0:vn(ys(t),0),Kr((function(n){var r=n[t],i=gi(n,0,t);return r&&Ot(i,r),vt(e,this,i)}))},Fn.tail=function(e){var t=null==e?0:e.length;return t?ti(e,1,t):[]},Fn.take=function(e,t,n){return e&&e.length?ti(e,0,(t=n||t===i?1:ys(t))<0?0:t):[]},Fn.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?ti(e,(t=r-(t=n||t===i?1:ys(t)))<0?0:t,r):[]},Fn.takeRightWhile=function(e,t){return e&&e.length?fi(e,ao(t,3),!1,!0):[]},Fn.takeWhile=function(e,t){return e&&e.length?fi(e,ao(t,3)):[]},Fn.tap=function(e,t){return t(e),e},Fn.throttle=function(e,t,n){var r=!0,i=!0;if("function"!=typeof e)throw new Se(o);return ts(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),Ra(e,t,{leading:r,maxWait:t,trailing:i})},Fn.thru=ha,Fn.toArray=ps,Fn.toPairs=Fs,Fn.toPairsIn=zs,Fn.toPath=function(e){return Wa(e)?Et(e,Mo):us(e)?[e]:Si(Do(gs(e)))},Fn.toPlainObject=bs,Fn.transform=function(e,t,n){var r=Wa(e),i=r||Qa(e)||cs(e);if(t=ao(t,4),null==n){var o=e&&e.constructor;n=i?r?new o:[]:ts(e)&&Za(o)?zn($e(e)):{}}return(i?gt:gr)(e,(function(e,r,i){return t(n,e,r,i)})),n},Fn.unary=function(e){return ja(e,1)},Fn.union=na,Fn.unionBy=ra,Fn.unionWith=ia,Fn.uniq=function(e){return e&&e.length?li(e):[]},Fn.uniqBy=function(e,t){return e&&e.length?li(e,ao(t,2)):[]},Fn.uniqWith=function(e,t){return t="function"==typeof t?t:i,e&&e.length?li(e,i,t):[]},Fn.unset=function(e,t){return null==e||ui(e,t)},Fn.unzip=oa,Fn.unzipWith=aa,Fn.update=function(e,t,n){return null==e?e:ci(e,t,mi(n))},Fn.updateWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:ci(e,t,mi(n),r)},Fn.values=Vs,Fn.valuesIn=function(e){return null==e?[]:qt(e,Ls(e))},Fn.without=sa,Fn.words=Zs,Fn.wrap=function(e,t){return Ma(mi(t),e)},Fn.xor=la,Fn.xorBy=ua,Fn.xorWith=ca,Fn.zip=fa,Fn.zipObject=function(e,t){return hi(e||[],t||[],er)},Fn.zipObjectDeep=function(e,t){return hi(e||[],t||[],Yr)},Fn.zipWith=da,Fn.entries=Fs,Fn.entriesIn=zs,Fn.extend=ws,Fn.extendWith=ks,ll(Fn,Fn),Fn.add=gl,Fn.attempt=Xs,Fn.camelCase=Hs,Fn.capitalize=Us,Fn.ceil=_l,Fn.clamp=function(e,t,n){return n===i&&(n=t,t=i),n!==i&&(n=(n=vs(n))==n?n:0),t!==i&&(t=(t=vs(t))==t?t:0),ar(vs(e),t,n)},Fn.clone=function(e){return sr(e,4)},Fn.cloneDeep=function(e){return sr(e,5)},Fn.cloneDeepWith=function(e,t){return sr(e,5,t="function"==typeof t?t:i)},Fn.cloneWith=function(e,t){return sr(e,4,t="function"==typeof t?t:i)},Fn.conformsTo=function(e,t){return null==t||lr(e,t,Rs(t))},Fn.deburr=qs,Fn.defaultTo=function(e,t){return null==e||e!=e?t:e},Fn.divide=wl,Fn.endsWith=function(e,t,n){e=gs(e),t=si(t);var r=e.length,o=n=n===i?r:ar(ys(n),0,r);return(n-=t.length)>=0&&e.slice(n,o)==t},Fn.eq=Va,Fn.escape=function(e){return(e=gs(e))&&K.test(e)?e.replace($,Jt):e},Fn.escapeRegExp=function(e){return(e=gs(e))&&ne.test(e)?e.replace(te,"\\$&"):e},Fn.every=function(e,t,n){var r=Wa(e)?wt:pr;return n&&bo(e,t,n)&&(t=i),r(e,ao(t,3))},Fn.find=va,Fn.findIndex=qo,Fn.findKey=function(e,t){return Tt(e,ao(t,3),gr)},Fn.findLast=ba,Fn.findLastIndex=Wo,Fn.findLastKey=function(e,t){return Tt(e,ao(t,3),_r)},Fn.floor=kl,Fn.forEach=ga,Fn.forEachRight=_a,Fn.forIn=function(e,t){return null==e?e:vr(e,ao(t,3),Ls)},Fn.forInRight=function(e,t){return null==e?e:br(e,ao(t,3),Ls)},Fn.forOwn=function(e,t){return e&&gr(e,ao(t,3))},Fn.forOwnRight=function(e,t){return e&&_r(e,ao(t,3))},Fn.get=Ss,Fn.gt=Ha,Fn.gte=Ua,Fn.has=function(e,t){return null!=e&&ho(e,t,Or)},Fn.hasIn=js,Fn.head=Go,Fn.identity=il,Fn.includes=function(e,t,n,r){e=Ga(e)?e:Vs(e),n=n&&!r?ys(n):0;var i=e.length;return n<0&&(n=vn(i+n,0)),ls(e)?n<=i&&e.indexOf(t,n)>-1:!!i&&Lt(e,t,n)>-1},Fn.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:ys(n);return i<0&&(i=vn(r+i,0)),Lt(e,t,i)},Fn.inRange=function(e,t,n){return t=hs(t),n===i?(n=t,t=0):n=hs(n),function(e,t,n){return e>=bn(t,n)&&e<vn(t,n)}(e=vs(e),t,n)},Fn.invoke=Ts,Fn.isArguments=qa,Fn.isArray=Wa,Fn.isArrayBuffer=$a,Fn.isArrayLike=Ga,Fn.isArrayLikeObject=Ka,Fn.isBoolean=function(e){return!0===e||!1===e||ns(e)&&Cr(e)==v},Fn.isBuffer=Qa,Fn.isDate=Ja,Fn.isElement=function(e){return ns(e)&&1===e.nodeType&&!os(e)},Fn.isEmpty=function(e){if(null==e)return!0;if(Ga(e)&&(Wa(e)||"string"==typeof e||"function"==typeof e.splice||Qa(e)||cs(e)||qa(e)))return!e.length;var t=po(e);if(t==k||t==S)return!e.size;if(ko(e))return!Nr(e).length;for(var n in e)if(Le.call(e,n))return!1;return!0},Fn.isEqual=function(e,t){return Tr(e,t)},Fn.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:i)?n(e,t):i;return r===i?Tr(e,t,i,n):!!r},Fn.isError=Ya,Fn.isFinite=function(e){return"number"==typeof e&&hn(e)},Fn.isFunction=Za,Fn.isInteger=Xa,Fn.isLength=es,Fn.isMap=rs,Fn.isMatch=function(e,t){return e===t||Rr(e,t,lo(t))},Fn.isMatchWith=function(e,t,n){return n="function"==typeof n?n:i,Rr(e,t,lo(t),n)},Fn.isNaN=function(e){return is(e)&&e!=+e},Fn.isNative=function(e){if(wo(e))throw new we("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Lr(e)},Fn.isNil=function(e){return null==e},Fn.isNull=function(e){return null===e},Fn.isNumber=is,Fn.isObject=ts,Fn.isObjectLike=ns,Fn.isPlainObject=os,Fn.isRegExp=as,Fn.isSafeInteger=function(e){return Xa(e)&&e>=-9007199254740991&&e<=f},Fn.isSet=ss,Fn.isString=ls,Fn.isSymbol=us,Fn.isTypedArray=cs,Fn.isUndefined=function(e){return e===i},Fn.isWeakMap=function(e){return ns(e)&&po(e)==P},Fn.isWeakSet=function(e){return ns(e)&&"[object WeakSet]"==Cr(e)},Fn.join=function(e,t){return null==e?"":yn.call(e,t)},Fn.kebabCase=Ws,Fn.last=Yo,Fn.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r;return n!==i&&(o=(o=ys(n))<0?vn(r+o,0):bn(o,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,o):Rt(e,Nt,o,!0)},Fn.lowerCase=$s,Fn.lowerFirst=Gs,Fn.lt=fs,Fn.lte=ds,Fn.max=function(e){return e&&e.length?hr(e,il,Er):i},Fn.maxBy=function(e,t){return e&&e.length?hr(e,ao(t,2),Er):i},Fn.mean=function(e){return Bt(e,il)},Fn.meanBy=function(e,t){return Bt(e,ao(t,2))},Fn.min=function(e){return e&&e.length?hr(e,il,Br):i},Fn.minBy=function(e,t){return e&&e.length?hr(e,ao(t,2),Br):i},Fn.stubArray=ml,Fn.stubFalse=vl,Fn.stubObject=function(){return{}},Fn.stubString=function(){return""},Fn.stubTrue=function(){return!0},Fn.multiply=xl,Fn.nth=function(e,t){return e&&e.length?Vr(e,ys(t)):i},Fn.noConflict=function(){return ot._===this&&(ot._=Me),this},Fn.noop=ul,Fn.now=Sa,Fn.pad=function(e,t,n){e=gs(e);var r=(t=ys(t))?on(e):0;if(!t||r>=t)return e;var i=(t-r)/2;return Hi(fn(i),n)+e+Hi(cn(i),n)},Fn.padEnd=function(e,t,n){e=gs(e);var r=(t=ys(t))?on(e):0;return t&&r<t?e+Hi(t-r,n):e},Fn.padStart=function(e,t,n){e=gs(e);var r=(t=ys(t))?on(e):0;return t&&r<t?Hi(t-r,n)+e:e},Fn.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),_n(gs(e).replace(re,""),t||0)},Fn.random=function(e,t,n){if(n&&"boolean"!=typeof n&&bo(e,t,n)&&(t=n=i),n===i&&("boolean"==typeof t?(n=t,t=i):"boolean"==typeof e&&(n=e,e=i)),e===i&&t===i?(e=0,t=1):(e=hs(e),t===i?(t=e,e=0):t=hs(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var o=wn();return bn(e+o*(t-e+tt("1e-"+((o+"").length-1))),t)}return $r(e,t)},Fn.reduce=function(e,t,n){var r=Wa(e)?St:Ft,i=arguments.length<3;return r(e,ao(t,4),n,i,fr)},Fn.reduceRight=function(e,t,n){var r=Wa(e)?jt:Ft,i=arguments.length<3;return r(e,ao(t,4),n,i,dr)},Fn.repeat=function(e,t,n){return t=(n?bo(e,t,n):t===i)?1:ys(t),Gr(gs(e),t)},Fn.replace=function(){var e=arguments,t=gs(e[0]);return e.length<3?t:t.replace(e[1],e[2])},Fn.result=function(e,t,n){var r=-1,o=(t=vi(t,e)).length;for(o||(o=1,e=i);++r<o;){var a=null==e?i:e[Mo(t[r])];a===i&&(r=o,a=n),e=Za(a)?a.call(e):a}return e},Fn.round=Cl,Fn.runInContext=e,Fn.sample=function(e){return(Wa(e)?Jn:Qr)(e)},Fn.size=function(e){if(null==e)return 0;if(Ga(e))return ls(e)?on(e):e.length;var t=po(e);return t==k||t==S?e.size:Nr(e).length},Fn.snakeCase=Ks,Fn.some=function(e,t,n){var r=Wa(e)?At:ni;return n&&bo(e,t,n)&&(t=i),r(e,ao(t,3))},Fn.sortedIndex=function(e,t){return ri(e,t)},Fn.sortedIndexBy=function(e,t,n){return ii(e,t,ao(n,2))},Fn.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=ri(e,t);if(r<n&&Va(e[r],t))return r}return-1},Fn.sortedLastIndex=function(e,t){return ri(e,t,!0)},Fn.sortedLastIndexBy=function(e,t,n){return ii(e,t,ao(n,2),!0)},Fn.sortedLastIndexOf=function(e,t){if(null!=e&&e.length){var n=ri(e,t,!0)-1;if(Va(e[n],t))return n}return-1},Fn.startCase=Qs,Fn.startsWith=function(e,t,n){return e=gs(e),n=null==n?0:ar(ys(n),0,e.length),t=si(t),e.slice(n,n+t.length)==t},Fn.subtract=El,Fn.sum=function(e){return e&&e.length?zt(e,il):0},Fn.sumBy=function(e,t){return e&&e.length?zt(e,ao(t,2)):0},Fn.template=function(e,t,n){var r=Fn.templateSettings;n&&bo(e,t,n)&&(t=i),e=gs(e),t=ks({},t,r,Ji);var o,a,s=ks({},t.imports,r.imports,Ji),l=Rs(s),u=qt(s,l),c=0,f=t.interpolate||ge,d="__p += '",p=Ee((t.escape||ge).source+"|"+f.source+"|"+(f===Y?fe:ge).source+"|"+(t.evaluate||ge).source+"|$","g"),h="//# sourceURL="+(Le.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Ye+"]")+"\n";e.replace(p,(function(t,n,r,i,s,l){return r||(r=i),d+=e.slice(c,l).replace(_e,Yt),n&&(o=!0,d+="' +\n__e("+n+") +\n'"),s&&(a=!0,d+="';\n"+s+";\n__p += '"),r&&(d+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=l+t.length,t})),d+="';\n";var y=Le.call(t,"variable")&&t.variable;if(y){if(ue.test(y))throw new we("Invalid `variable` option passed into `_.template`")}else d="with (obj) {\n"+d+"\n}\n";d=(a?d.replace(H,""):d).replace(U,"$1").replace(q,"$1;"),d="function("+(y||"obj")+") {\n"+(y?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var m=Xs((function(){return ke(l,h+"return "+d).apply(i,u)}));if(m.source=d,Ya(m))throw m;return m},Fn.times=function(e,t){if((e=ys(e))<1||e>f)return[];var n=p,r=bn(e,p);t=ao(t),e-=p;for(var i=Vt(r,t);++n<e;)t(n);return i},Fn.toFinite=hs,Fn.toInteger=ys,Fn.toLength=ms,Fn.toLower=function(e){return gs(e).toLowerCase()},Fn.toNumber=vs,Fn.toSafeInteger=function(e){return e?ar(ys(e),-9007199254740991,f):0===e?e:0},Fn.toString=gs,Fn.toUpper=function(e){return gs(e).toUpperCase()},Fn.trim=function(e,t,n){if((e=gs(e))&&(n||t===i))return Ht(e);if(!e||!(t=si(t)))return e;var r=an(e),o=an(t);return gi(r,$t(r,o),Gt(r,o)+1).join("")},Fn.trimEnd=function(e,t,n){if((e=gs(e))&&(n||t===i))return e.slice(0,sn(e)+1);if(!e||!(t=si(t)))return e;var r=an(e);return gi(r,0,Gt(r,an(t))+1).join("")},Fn.trimStart=function(e,t,n){if((e=gs(e))&&(n||t===i))return e.replace(re,"");if(!e||!(t=si(t)))return e;var r=an(e);return gi(r,$t(r,an(t))).join("")},Fn.truncate=function(e,t){var n=30,r="...";if(ts(t)){var o="separator"in t?t.separator:o;n="length"in t?ys(t.length):n,r="omission"in t?si(t.omission):r}var a=(e=gs(e)).length;if(Zt(e)){var s=an(e);a=s.length}if(n>=a)return e;var l=n-on(r);if(l<1)return r;var u=s?gi(s,0,l).join(""):e.slice(0,l);if(o===i)return u+r;if(s&&(l+=u.length-l),as(o)){if(e.slice(l).search(o)){var c,f=u;for(o.global||(o=Ee(o.source,gs(de.exec(o))+"g")),o.lastIndex=0;c=o.exec(f);)var d=c.index;u=u.slice(0,d===i?l:d)}}else if(e.indexOf(si(o),l)!=l){var p=u.lastIndexOf(o);p>-1&&(u=u.slice(0,p))}return u+r},Fn.unescape=function(e){return(e=gs(e))&&G.test(e)?e.replace(W,ln):e},Fn.uniqueId=function(e){var t=++Ie;return gs(e)+t},Fn.upperCase=Js,Fn.upperFirst=Ys,Fn.each=ga,Fn.eachRight=_a,Fn.first=Go,ll(Fn,(bl={},gr(Fn,(function(e,t){Le.call(Fn.prototype,t)||(bl[t]=e)})),bl),{chain:!1}),Fn.VERSION="4.17.21",gt(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){Fn[e].placeholder=Fn})),gt(["drop","take"],(function(e,t){Un.prototype[e]=function(n){n=n===i?1:vn(ys(n),0);var r=this.__filtered__&&!t?new Un(this):this.clone();return r.__filtered__?r.__takeCount__=bn(n,r.__takeCount__):r.__views__.push({size:bn(n,p),type:e+(r.__dir__<0?"Right":"")}),r},Un.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}})),gt(["filter","map","takeWhile"],(function(e,t){var n=t+1,r=1==n||3==n;Un.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:ao(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}})),gt(["head","last"],(function(e,t){var n="take"+(t?"Right":"");Un.prototype[e]=function(){return this[n](1).value()[0]}})),gt(["initial","tail"],(function(e,t){var n="drop"+(t?"":"Right");Un.prototype[e]=function(){return this.__filtered__?new Un(this):this[n](1)}})),Un.prototype.compact=function(){return this.filter(il)},Un.prototype.find=function(e){return this.filter(e).head()},Un.prototype.findLast=function(e){return this.reverse().find(e)},Un.prototype.invokeMap=Kr((function(e,t){return"function"==typeof e?new Un(this):this.map((function(n){return Ar(n,e,t)}))})),Un.prototype.reject=function(e){return this.filter(Ba(ao(e)))},Un.prototype.slice=function(e,t){e=ys(e);var n=this;return n.__filtered__&&(e>0||t<0)?new Un(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==i&&(n=(t=ys(t))<0?n.dropRight(-t):n.take(t-e)),n)},Un.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},Un.prototype.toArray=function(){return this.take(p)},gr(Un.prototype,(function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),o=Fn[r?"take"+("last"==t?"Right":""):t],a=r||/^find/.test(t);o&&(Fn.prototype[t]=function(){var t=this.__wrapped__,s=r?[1]:arguments,l=t instanceof Un,u=s[0],c=l||Wa(t),f=function(e){var t=o.apply(Fn,Ot([e],s));return r&&d?t[0]:t};c&&n&&"function"==typeof u&&1!=u.length&&(l=c=!1);var d=this.__chain__,p=!!this.__actions__.length,h=a&&!d,y=l&&!p;if(!a&&c){t=y?t:new Un(this);var m=e.apply(t,s);return m.__actions__.push({func:ha,args:[f],thisArg:i}),new Hn(m,d)}return h&&y?e.apply(this,s):(m=this.thru(f),h?r?m.value()[0]:m.value():m)})})),gt(["pop","push","shift","sort","splice","unshift"],(function(e){var t=je[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);Fn.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var i=this.value();return t.apply(Wa(i)?i:[],e)}return this[n]((function(n){return t.apply(Wa(n)?n:[],e)}))}})),gr(Un.prototype,(function(e,t){var n=Fn[t];if(n){var r=n.name+"";Le.call(Pn,r)||(Pn[r]=[]),Pn[r].push({name:t,func:n})}})),Pn[Mi(i,2).name]=[{name:"wrapper",func:i}],Un.prototype.clone=function(){var e=new Un(this.__wrapped__);return e.__actions__=Si(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=Si(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=Si(this.__views__),e},Un.prototype.reverse=function(){if(this.__filtered__){var e=new Un(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},Un.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=Wa(e),r=t<0,i=n?e.length:0,o=function(e,t,n){for(var r=-1,i=n.length;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":e+=a;break;case"dropRight":t-=a;break;case"take":t=bn(t,e+a);break;case"takeRight":e=vn(e,t-a)}}return{start:e,end:t}}(0,i,this.__views__),a=o.start,s=o.end,l=s-a,u=r?s:a-1,c=this.__iteratees__,f=c.length,d=0,p=bn(l,this.__takeCount__);if(!n||!r&&i==l&&p==l)return di(e,this.__actions__);var h=[];e:for(;l--&&d<p;){for(var y=-1,m=e[u+=t];++y<f;){var v=c[y],b=v.iteratee,g=v.type,_=b(m);if(2==g)m=_;else if(!_){if(1==g)continue e;break e}}h[d++]=m}return h},Fn.prototype.at=ya,Fn.prototype.chain=function(){return pa(this)},Fn.prototype.commit=function(){return new Hn(this.value(),this.__chain__)},Fn.prototype.next=function(){this.__values__===i&&(this.__values__=ps(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?i:this.__values__[this.__index__++]}},Fn.prototype.plant=function(e){for(var t,n=this;n instanceof Vn;){var r=zo(n);r.__index__=0,r.__values__=i,t?o.__wrapped__=r:t=r;var o=r;n=n.__wrapped__}return o.__wrapped__=e,t},Fn.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof Un){var t=e;return this.__actions__.length&&(t=new Un(this)),(t=t.reverse()).__actions__.push({func:ha,args:[ta],thisArg:i}),new Hn(t,this.__chain__)}return this.thru(ta)},Fn.prototype.toJSON=Fn.prototype.valueOf=Fn.prototype.value=function(){return di(this.__wrapped__,this.__actions__)},Fn.prototype.first=Fn.prototype.head,at&&(Fn.prototype[at]=function(){return this}),Fn}();ot._=un,(r=function(){return un}.call(t,n,t,e))===i||(e.exports=r)}.call(this)},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var a,s,l=i(e),u=1;u<arguments.length;u++){for(var c in a=Object(arguments[u]))n.call(a,c)&&(l[c]=a[c]);if(t){s=t(a);for(var f=0;f<s.length;f++)r.call(a,s[f])&&(l[s[f]]=a[s[f]])}}return l}},2703:(e,t,n)=>{"use strict";var r=n(414);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},8240:(e,t,n)=>{"use strict";function r(e,t){if(void 0===t&&(t=e,e=0),"number"!=typeof e||"number"!=typeof t)throw new TypeError("Expected all arguments to be numbers");return Math.floor(Math.random()*(t-e+1)+e)}n.r(t),n.d(t,{default:()=>r})},1512:function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},a=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&a(t,e,n);return s(t,e),t},u=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var f=l(n(7294)),d=c(n(1937)),p=l(n(5697));function h(e){return e&&e.replace(/&nbsp;|\u202F|\u00A0/g," ")}var y=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.lastHtml=t.props.html,t.el="function"==typeof t.props.innerRef?{current:null}:f.createRef(),t.getEl=function(){return(t.props.innerRef&&"function"!=typeof t.props.innerRef?t.props.innerRef:t.el).current},t.emitChange=function(e){var n=t.getEl();if(n){var r=n.innerHTML;if(t.props.onChange&&r!==t.lastHtml){var i=Object.assign({},e,{target:{value:r}});t.props.onChange(i)}t.lastHtml=r}},t}return i(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.tagName,r=t.html,i=t.innerRef,a=u(t,["tagName","html","innerRef"]);return f.createElement(n||"div",o(o({},a),{ref:"function"==typeof i?function(t){i(t),e.el.current=t}:i||this.el,onInput:this.emitChange,onBlur:this.props.onBlur||this.emitChange,onKeyUp:this.props.onKeyUp||this.emitChange,onKeyDown:this.props.onKeyDown||this.emitChange,contentEditable:!this.props.disabled,dangerouslySetInnerHTML:{__html:r}}),this.props.children)},t.prototype.shouldComponentUpdate=function(e){var t=this.props,n=this.getEl();return!n||h(e.html)!==h(n.innerHTML)||t.disabled!==e.disabled||t.tagName!==e.tagName||t.className!==e.className||t.innerRef!==e.innerRef||!d.default(t.style,e.style)},t.prototype.componentDidUpdate=function(){var e=this.getEl();e&&(this.props.html!==e.innerHTML&&(e.innerHTML=this.props.html),this.lastHtml=this.props.html,function(e){var t=document.createTextNode("");e.appendChild(t);var n=document.activeElement===e;if(null!==t&&null!==t.nodeValue&&n){var r=window.getSelection();if(null!==r){var i=document.createRange();i.setStart(t,t.nodeValue.length),i.collapse(!0),r.removeAllRanges(),r.addRange(i)}e instanceof HTMLElement&&e.focus()}}(e))},t.propTypes={html:p.string.isRequired,onChange:p.func,disabled:p.bool,tagName:p.string,className:p.string,style:p.object,innerRef:p.oneOfType([p.object,p.func])},t}(f.Component);t.default=y},1937:e=>{"use strict";var t=Array.isArray,n=Object.keys,r=Object.prototype.hasOwnProperty;e.exports=function e(i,o){if(i===o)return!0;if(i&&o&&"object"==typeof i&&"object"==typeof o){var a,s,l,u=t(i),c=t(o);if(u&&c){if((s=i.length)!=o.length)return!1;for(a=s;0!=a--;)if(!e(i[a],o[a]))return!1;return!0}if(u!=c)return!1;var f=i instanceof Date,d=o instanceof Date;if(f!=d)return!1;if(f&&d)return i.getTime()==o.getTime();var p=i instanceof RegExp,h=o instanceof RegExp;if(p!=h)return!1;if(p&&h)return i.toString()==o.toString();var y=n(i);if((s=y.length)!==n(o).length)return!1;for(a=s;0!=a--;)if(!r.call(o,y[a]))return!1;for(a=s;0!=a--;)if(!e(i[l=y[a]],o[l]))return!1;return!0}return i!=i&&o!=o}},4448:(e,t,n)=>{"use strict";var r=n(7294),i=n(7418),o=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)s.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},y={};function m(e,t,n,r,i,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=a}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var b=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function _(e,t,n,r){var i=v.hasOwnProperty(t)?v[t]:null;(null!==i?0===i.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!p.call(y,e)||!p.call(h,e)&&(d.test(e)?y[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(b,g);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(b,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(b,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=60103,x=60106,C=60107,E=60108,O=60114,S=60109,j=60110,A=60112,P=60113,T=60120,R=60115,L=60116,I=60121,N=60128,B=60129,D=60130,M=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;k=F("react.element"),x=F("react.portal"),C=F("react.fragment"),E=F("react.strict_mode"),O=F("react.profiler"),S=F("react.provider"),j=F("react.context"),A=F("react.forward_ref"),P=F("react.suspense"),T=F("react.suspense_list"),R=F("react.memo"),L=F("react.lazy"),I=F("react.block"),F("react.scope"),N=F("react.opaque.id"),B=F("react.debug_trace_mode"),D=F("react.offscreen"),M=F("react.legacy_hidden")}var z,V="function"==typeof Symbol&&Symbol.iterator;function H(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=V&&e[V]||e["@@iterator"])?e:null}function U(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var q=!1;function W(e,t){if(!e||q)return"";q=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var i=e.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s])return"\n"+i[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{q=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?U(e):""}function $(e){switch(e.tag){case 5:return U(e.type);case 16:return U("Lazy");case 13:return U("Suspense");case 19:return U("SuspenseList");case 0:case 2:case 15:return W(e.type,!1);case 11:return W(e.type.render,!1);case 22:return W(e.type._render,!1);case 1:return W(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case C:return"Fragment";case x:return"Portal";case O:return"Profiler";case E:return"StrictMode";case P:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case j:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case A:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case R:return G(e.type);case I:return G(e._render);case L:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function K(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function J(e){e._valueTracker||(e._valueTracker=function(e){var t=Q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Y(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function X(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&_(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ie(e,t.type,n):t.hasOwnProperty("defaultValue")&&ie(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ie(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function oe(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function ue(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,ye,me=(ye=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ye(e,t)}))}:ye);function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var be={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ge=["Webkit","ms","Moz","O"];function _e(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||be.hasOwnProperty(e)&&be[e]?(""+t).trim():t+"px"}function we(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=_e(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(be).forEach((function(e){ge.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),be[t]=be[e]}))}));var ke=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function xe(e,t){if(t){if(ke[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Ce(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ee(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Oe=null,Se=null,je=null;function Ae(e){if(e=Xr(e)){if("function"!=typeof Oe)throw Error(a(280));var t=e.stateNode;t&&(t=ti(t),Oe(e.stateNode,e.type,t))}}function Pe(e){Se?je?je.push(e):je=[e]:Se=e}function Te(){if(Se){var e=Se,t=je;if(je=Se=null,Ae(e),t)for(e=0;e<t.length;e++)Ae(t[e])}}function Re(e,t){return e(t)}function Le(e,t,n,r,i){return e(t,n,r,i)}function Ie(){}var Ne=Re,Be=!1,De=!1;function Me(){null===Se&&null===je||(Ie(),Te())}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var r=ti(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var ze=!1;if(f)try{var Ve={};Object.defineProperty(Ve,"passive",{get:function(){ze=!0}}),window.addEventListener("test",Ve,Ve),window.removeEventListener("test",Ve,Ve)}catch(ye){ze=!1}function He(e,t,n,r,i,o,a,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Ue=!1,qe=null,We=!1,$e=null,Ge={onError:function(e){Ue=!0,qe=e}};function Ke(e,t,n,r,i,o,a,s,l){Ue=!1,qe=null,He.apply(Ge,arguments)}function Qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Je(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ye(e){if(Qe(e)!==e)throw Error(a(188))}function Ze(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Qe(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return Ye(i),e;if(o===r)return Ye(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s){for(l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Xe(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,it=!1,ot=[],at=null,st=null,lt=null,ut=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,i){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:i,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function yt(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e=pt(t,n,r,i,o),null!==t&&null!==(t=Xr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function mt(e){var t=Zr(e.target);if(null!==t){var n=Qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Je(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){o.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Xr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function bt(e,t,n){vt(e)&&n.delete(t)}function gt(){for(it=!1;0<ot.length;){var e=ot[0];if(null!==e.blockedOn){null!==(e=Xr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&ot.shift()}null!==at&&vt(at)&&(at=null),null!==st&&vt(st)&&(st=null),null!==lt&&vt(lt)&&(lt=null),ut.forEach(bt),ct.forEach(bt)}function _t(e,t){e.blockedOn===t&&(e.blockedOn=null,it||(it=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,gt)))}function wt(e){function t(t){return _t(t,e)}if(0<ot.length){_t(ot[0],e);for(var n=1;n<ot.length;n++){var r=ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&_t(at,e),null!==st&&_t(st,e),null!==lt&&_t(lt,e),ut.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)mt(n),null===n.blockedOn&&ft.shift()}function kt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xt={animationend:kt("Animation","AnimationEnd"),animationiteration:kt("Animation","AnimationIteration"),animationstart:kt("Animation","AnimationStart"),transitionend:kt("Transition","TransitionEnd")},Ct={},Et={};function Ot(e){if(Ct[e])return Ct[e];if(!xt[e])return e;var t,n=xt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Et)return Ct[e]=n[t];return e}f&&(Et=document.createElement("div").style,"AnimationEvent"in window||(delete xt.animationend.animation,delete xt.animationiteration.animation,delete xt.animationstart.animation),"TransitionEvent"in window||delete xt.transitionend.transition);var St=Ot("animationend"),jt=Ot("animationiteration"),At=Ot("animationstart"),Pt=Ot("transitionend"),Tt=new Map,Rt=new Map,Lt=["abort","abort",St,"animationEnd",jt,"animationIteration",At,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Pt,"transitionEnd","waiting","waiting"];function It(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1];i="on"+(i[0].toUpperCase()+i.slice(1)),Rt.set(r,t),Tt.set(r,i),u(i,[r])}}(0,o.unstable_now)();var Nt=8;function Bt(e){if(0!=(1&e))return Nt=15,1;if(0!=(2&e))return Nt=14,2;if(0!=(4&e))return Nt=13,4;var t=24&e;return 0!==t?(Nt=12,t):0!=(32&e)?(Nt=11,32):0!=(t=192&e)?(Nt=10,t):0!=(256&e)?(Nt=9,256):0!=(t=3584&e)?(Nt=8,t):0!=(4096&e)?(Nt=7,4096):0!=(t=4186112&e)?(Nt=6,t):0!=(t=62914560&e)?(Nt=5,t):67108864&e?(Nt=4,67108864):0!=(134217728&e)?(Nt=3,134217728):0!=(t=805306368&e)?(Nt=2,t):0!=(1073741824&e)?(Nt=1,1073741824):(Nt=8,e)}function Dt(e,t){var n=e.pendingLanes;if(0===n)return Nt=0;var r=0,i=0,o=e.expiredLanes,a=e.suspendedLanes,s=e.pingedLanes;if(0!==o)r=o,i=Nt=15;else if(0!=(o=134217727&n)){var l=o&~a;0!==l?(r=Bt(l),i=Nt):0!=(s&=o)&&(r=Bt(s),i=Nt)}else 0!=(o=n&~a)?(r=Bt(o),i=Nt):0!==s&&(r=Bt(s),i=Nt);if(0===r)return 0;if(r=n&((0>(r=31-Ut(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(Bt(t),i<=Nt)return t;Nt=i}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-Ut(t)),r|=e[n],t&=~i;return r}function Mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ft(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=zt(24&~t))?Ft(10,t):e;case 10:return 0===(e=zt(192&~t))?Ft(8,t):e;case 8:return 0===(e=zt(3584&~t))&&0===(e=zt(4186112&~t))&&(e=512),e;case 2:return 0===(t=zt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function zt(e){return e&-e}function Vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ht(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Ut(t)]=n}var Ut=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(qt(e)/Wt|0)|0},qt=Math.log,Wt=Math.LN2,$t=o.unstable_UserBlockingPriority,Gt=o.unstable_runWithPriority,Kt=!0;function Qt(e,t,n,r){Be||Ie();var i=Yt,o=Be;Be=!0;try{Le(i,e,t,n,r)}finally{(Be=o)||Me()}}function Jt(e,t,n,r){Gt($t,Yt.bind(null,e,t,n,r))}function Yt(e,t,n,r){var i;if(Kt)if((i=0==(4&t))&&0<ot.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),ot.push(e);else{var o=Zt(e,t,n,r);if(null===o)i&&ht(e,r);else{if(i){if(-1<dt.indexOf(e))return e=pt(o,e,t,n,r),void ot.push(e);if(function(e,t,n,r,i){switch(t){case"focusin":return at=yt(at,e,t,n,r,i),!0;case"dragenter":return st=yt(st,e,t,n,r,i),!0;case"mouseover":return lt=yt(lt,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return ut.set(o,yt(ut.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,ct.set(o,yt(ct.get(o)||null,e,t,n,r,i)),!0}return!1}(o,e,t,n,r))return;ht(e,r)}Tr(e,t,r,null,n)}}}function Zt(e,t,n,r){var i=Ee(r);if(null!==(i=Zr(i))){var o=Qe(i);if(null===o)i=null;else{var a=o.tag;if(13===a){if(null!==(i=Je(o)))return i;i=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;i=null}else o!==i&&(i=null)}}return Tr(e,t,r,i,n),null}var Xt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,i="value"in Xt?Xt.value:Xt.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return tn=i.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function sn(e){function t(t,n,r,i,o){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?on:an,this.isPropagationStopped=an,this}return i(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,un,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=sn(fn),pn=i({},fn,{view:0,detail:0}),hn=sn(pn),yn=i({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:On,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(ln=e.screenX-cn.screenX,un=e.screenY-cn.screenY):un=ln=0,cn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:un}}),mn=sn(yn),vn=sn(i({},yn,{dataTransfer:0})),bn=sn(i({},pn,{relatedTarget:0})),gn=sn(i({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),_n=sn(i({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),wn=sn(i({},fn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function On(){return En}var Sn=sn(i({},pn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:On,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),jn=sn(i({},yn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),An=sn(i({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:On})),Pn=sn(i({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=sn(i({},yn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Rn=[9,13,27,32],Ln=f&&"CompositionEvent"in window,In=null;f&&"documentMode"in document&&(In=document.documentMode);var Nn=f&&"TextEvent"in window&&!In,Bn=f&&(!Ln||In&&8<In&&11>=In),Dn=String.fromCharCode(32),Mn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function zn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Vn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function qn(e,t,n,r){Pe(r),0<(t=Lr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Wn=null,$n=null;function Gn(e){Er(e,0)}function Kn(e){if(Y(ei(e)))return e}function Qn(e,t){if("change"===e)return t}var Jn=!1;if(f){var Yn;if(f){var Zn="oninput"in document;if(!Zn){var Xn=document.createElement("div");Xn.setAttribute("oninput","return;"),Zn="function"==typeof Xn.oninput}Yn=Zn}else Yn=!1;Jn=Yn&&(!document.documentMode||9<document.documentMode)}function er(){Wn&&(Wn.detachEvent("onpropertychange",tr),$n=Wn=null)}function tr(e){if("value"===e.propertyName&&Kn($n)){var t=[];if(qn(t,$n,e,Ee(e)),e=Gn,Be)e(t);else{Be=!0;try{Re(e,t)}finally{Be=!1,Me()}}}}function nr(e,t,n){"focusin"===e?(er(),$n=n,(Wn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn($n)}function ir(e,t){if("click"===e)return Kn(t)}function or(e,t){if("input"===e||"change"===e)return Kn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},sr=Object.prototype.hasOwnProperty;function lr(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!sr.call(t,n[r])||!ar(e[n[r]],t[n[r]]))return!1;return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hr=f&&"documentMode"in document&&11>=document.documentMode,yr=null,mr=null,vr=null,br=!1;function gr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==yr||yr!==Z(r)||(r="selectionStart"in(r=yr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&lr(vr,r)||(vr=r,0<(r=Lr(mr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}It("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),It("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),It(Lt,2);for(var _r="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),wr=0;wr<_r.length;wr++)Rt.set(_r[wr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var kr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),xr=new Set("cancel close invalid load scroll toggle".split(" ").concat(kr));function Cr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,i,o,s,l,u){if(Ke.apply(this,arguments),Ue){if(!Ue)throw Error(a(198));var c=qe;Ue=!1,qe=null,We||(We=!0,$e=c)}}(r,t,void 0,e),e.currentTarget=null}function Er(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==o&&i.isPropagationStopped())break e;Cr(i,s,u),o=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,u=s.currentTarget,s=s.listener,l!==o&&i.isPropagationStopped())break e;Cr(i,s,u),o=l}}}if(We)throw e=$e,We=!1,$e=null,e}function Or(e,t){var n=ni(t),r=e+"__bubble";n.has(r)||(Pr(t,e,2,!1),n.add(r))}var Sr="_reactListening"+Math.random().toString(36).slice(2);function jr(e){e[Sr]||(e[Sr]=!0,s.forEach((function(t){xr.has(t)||Ar(t,!1,e,null),Ar(t,!0,e,null)})))}function Ar(e,t,n,r){var i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===e&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!t&&xr.has(e)){if("scroll"!==e)return;i|=2,o=r}var a=ni(o),s=e+"__"+(t?"capture":"bubble");a.has(s)||(t&&(i|=4),Pr(o,e,i,t),a.add(s))}function Pr(e,t,n,r){var i=Rt.get(t);switch(void 0===i?2:i){case 0:i=Qt;break;case 1:i=Jt;break;default:i=Yt}n=i.bind(null,t,n,e),i=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Tr(e,t,n,r,i){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;a=a.return}for(;null!==s;){if(null===(a=Zr(s)))return;if(5===(l=a.tag)||6===l){r=o=a;continue e}s=s.parentNode}}r=r.return}!function(e,t,n){if(De)return e();De=!0;try{Ne(e,t,n)}finally{De=!1,Me()}}((function(){var r=o,i=Ee(n),a=[];e:{var s=Tt.get(e);if(void 0!==s){var l=dn,u=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=Sn;break;case"focusin":u="focus",l=bn;break;case"focusout":u="blur",l=bn;break;case"beforeblur":case"afterblur":l=bn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=An;break;case St:case jt:case At:l=gn;break;case Pt:l=Pn;break;case"scroll":l=hn;break;case"wheel":l=Tn;break;case"copy":case"cut":case"paste":l=_n;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=jn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==s?s+"Capture":null:s;c=[];for(var p,h=r;null!==h;){var y=(p=h).stateNode;if(5===p.tag&&null!==y&&(p=y,null!==d&&null!=(y=Fe(h,d))&&c.push(Rr(h,y,p))),f)break;h=h.return}0<c.length&&(s=new l(s,u,null,n,i),a.push({event:s,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!Zr(u)&&!u[Jr])&&(l||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?Zr(u):null)&&(u!==(f=Qe(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=mn,y="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=jn,y="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?s:ei(l),p=null==u?s:ei(u),(s=new c(y,h+"leave",l,n,i)).target=f,s.relatedTarget=p,y=null,Zr(i)===r&&((c=new c(d,h+"enter",u,n,i)).target=p,c.relatedTarget=f,y=c),f=y,l&&u)e:{for(d=u,h=0,p=c=l;p;p=Ir(p))h++;for(p=0,y=d;y;y=Ir(y))p++;for(;0<h-p;)c=Ir(c),h--;for(;0<p-h;)d=Ir(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Ir(c),d=Ir(d)}c=null}else c=null;null!==l&&Nr(a,s,l,c,!1),null!==u&&null!==f&&Nr(a,f,u,c,!0)}if("select"===(l=(s=r?ei(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=Qn;else if(Un(s))if(Jn)m=or;else{m=rr;var v=nr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=ir);switch(m&&(m=m(e,r))?qn(a,m,n,i):(v&&v(e,s,r),"focusout"===e&&(v=s._wrapperState)&&v.controlled&&"number"===s.type&&ie(s,"number",s.value)),v=r?ei(r):window,e){case"focusin":(Un(v)||"true"===v.contentEditable)&&(yr=v,mr=r,vr=null);break;case"focusout":vr=mr=yr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,gr(a,n,i);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":gr(a,n,i)}var b;if(Ln)e:{switch(e){case"compositionstart":var g="onCompositionStart";break e;case"compositionend":g="onCompositionEnd";break e;case"compositionupdate":g="onCompositionUpdate";break e}g=void 0}else Vn?Fn(e,n)&&(g="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(g="onCompositionStart");g&&(Bn&&"ko"!==n.locale&&(Vn||"onCompositionStart"!==g?"onCompositionEnd"===g&&Vn&&(b=nn()):(en="value"in(Xt=i)?Xt.value:Xt.textContent,Vn=!0)),0<(v=Lr(r,g)).length&&(g=new wn(g,e,null,n,i),a.push({event:g,listeners:v}),(b||null!==(b=zn(n)))&&(g.data=b))),(b=Nn?function(e,t){switch(e){case"compositionend":return zn(t);case"keypress":return 32!==t.which?null:(Mn=!0,Dn);case"textInput":return(e=t.data)===Dn&&Mn?null:e;default:return null}}(e,n):function(e,t){if(Vn)return"compositionend"===e||!Ln&&Fn(e,t)?(e=nn(),tn=en=Xt=null,Vn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Bn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Lr(r,"onBeforeInput")).length&&(i=new wn("onBeforeInput","beforeinput",null,n,i),a.push({event:i,listeners:r}),i.data=b)}Er(a,t)}))}function Rr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Lr(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=Fe(e,n))&&r.unshift(Rr(e,o,i)),null!=(o=Fe(e,t))&&r.push(Rr(e,o,i))),e=e.return}return r}function Ir(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Nr(e,t,n,r,i){for(var o=t._reactName,a=[];null!==n&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==u&&(s=u,i?null!=(l=Fe(n,o))&&a.unshift(Rr(n,l,s)):i||null!=(l=Fe(n,o))&&a.push(Rr(n,l,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Br(){}var Dr=null,Mr=null;function Fr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function zr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Vr="function"==typeof setTimeout?setTimeout:void 0,Hr="function"==typeof clearTimeout?clearTimeout:void 0;function Ur(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function qr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Wr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var $r=0,Gr=Math.random().toString(36).slice(2),Kr="__reactFiber$"+Gr,Qr="__reactProps$"+Gr,Jr="__reactContainer$"+Gr,Yr="__reactEvents$"+Gr;function Zr(e){var t=e[Kr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Jr]||n[Kr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Wr(e);null!==e;){if(n=e[Kr])return n;e=Wr(e)}return t}n=(e=n).parentNode}return null}function Xr(e){return!(e=e[Kr]||e[Jr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ei(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function ti(e){return e[Qr]||null}function ni(e){var t=e[Yr];return void 0===t&&(t=e[Yr]=new Set),t}var ri=[],ii=-1;function oi(e){return{current:e}}function ai(e){0>ii||(e.current=ri[ii],ri[ii]=null,ii--)}function si(e,t){ii++,ri[ii]=e.current,e.current=t}var li={},ui=oi(li),ci=oi(!1),fi=li;function di(e,t){var n=e.type.contextTypes;if(!n)return li;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function pi(e){return null!=e.childContextTypes}function hi(){ai(ci),ai(ui)}function yi(e,t,n){if(ui.current!==li)throw Error(a(168));si(ui,t),si(ci,n)}function mi(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(a(108,G(t)||"Unknown",o));return i({},n,r)}function vi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||li,fi=ui.current,si(ui,e),si(ci,ci.current),!0}function bi(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=mi(e,t,fi),r.__reactInternalMemoizedMergedChildContext=e,ai(ci),ai(ui),si(ui,e)):ai(ci),si(ci,n)}var gi=null,_i=null,wi=o.unstable_runWithPriority,ki=o.unstable_scheduleCallback,xi=o.unstable_cancelCallback,Ci=o.unstable_shouldYield,Ei=o.unstable_requestPaint,Oi=o.unstable_now,Si=o.unstable_getCurrentPriorityLevel,ji=o.unstable_ImmediatePriority,Ai=o.unstable_UserBlockingPriority,Pi=o.unstable_NormalPriority,Ti=o.unstable_LowPriority,Ri=o.unstable_IdlePriority,Li={},Ii=void 0!==Ei?Ei:function(){},Ni=null,Bi=null,Di=!1,Mi=Oi(),Fi=1e4>Mi?Oi:function(){return Oi()-Mi};function zi(){switch(Si()){case ji:return 99;case Ai:return 98;case Pi:return 97;case Ti:return 96;case Ri:return 95;default:throw Error(a(332))}}function Vi(e){switch(e){case 99:return ji;case 98:return Ai;case 97:return Pi;case 96:return Ti;case 95:return Ri;default:throw Error(a(332))}}function Hi(e,t){return e=Vi(e),wi(e,t)}function Ui(e,t,n){return e=Vi(e),ki(e,t,n)}function qi(){if(null!==Bi){var e=Bi;Bi=null,xi(e)}Wi()}function Wi(){if(!Di&&null!==Ni){Di=!0;var e=0;try{var t=Ni;Hi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ni=null}catch(t){throw null!==Ni&&(Ni=Ni.slice(e+1)),ki(ji,qi),t}finally{Di=!1}}}var $i=w.ReactCurrentBatchConfig;function Gi(e,t){if(e&&e.defaultProps){for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ki=oi(null),Qi=null,Ji=null,Yi=null;function Zi(){Yi=Ji=Qi=null}function Xi(e){var t=Ki.current;ai(Ki),e.type._context._currentValue=t}function eo(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function to(e,t){Qi=e,Yi=Ji=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(La=!0),e.firstContext=null)}function no(e,t){if(Yi!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Yi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ji){if(null===Qi)throw Error(a(308));Ji=t,Qi.dependencies={lanes:0,firstContext:t,responders:null}}else Ji=Ji.next=t;return e._currentValue}var ro=!1;function io(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function oo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ao(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function so(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function lo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?i=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?i=o=t:o=o.next=t}else i=o=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function uo(e,t,n,r){var o=e.updateQueue;ro=!1;var a=o.firstBaseUpdate,s=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,c=u.next;u.next=null,null===s?a=c:s.next=c,s=u;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==s&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=u)}}if(null!==a){for(d=o.baseState,s=0,f=c=u=null;;){l=a.lane;var p=a.eventTime;if((r&l)===l){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,y=a;switch(l=t,p=n,y.tag){case 1:if("function"==typeof(h=y.payload)){d=h.call(p,d,l);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=y.payload)?h.call(p,d,l):h))break e;d=i({},d,l);break e;case 2:ro=!0}}null!==a.callback&&(e.flags|=32,null===(l=o.effects)?o.effects=[a]:l.push(a))}else p={eventTime:p,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(c=f=p,u=d):f=f.next=p,s|=l;if(null===(a=a.next)){if(null===(l=o.shared.pending))break;a=l.next,l.next=null,o.lastBaseUpdate=l,o.shared.pending=null}}null===f&&(u=d),o.baseState=u,o.firstBaseUpdate=c,o.lastBaseUpdate=f,Ns|=s,e.lanes=s,e.memoizedState=d}}function co(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(a(191,i));i.call(r)}}}var fo=(new r.Component).refs;function po(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ho={isMounted:function(e){return!!(e=e._reactInternals)&&Qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=al(),i=sl(e),o=ao(r,i);o.payload=t,null!=n&&(o.callback=n),so(e,o),ll(e,i,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=al(),i=sl(e),o=ao(r,i);o.tag=1,o.payload=t,null!=n&&(o.callback=n),so(e,o),ll(e,i,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=al(),r=sl(e),i=ao(n,r);i.tag=2,null!=t&&(i.callback=t),so(e,i),ll(e,r,n)}};function yo(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(i,o))}function mo(e,t,n){var r=!1,i=li,o=t.contextType;return"object"==typeof o&&null!==o?o=no(o):(i=pi(t)?fi:ui.current,o=(r=null!=(r=t.contextTypes))?di(e,i):li),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ho,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function vo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ho.enqueueReplaceState(t,t.state,null)}function bo(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=fo,io(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=no(o):(o=pi(t)?fi:ui.current,i.context=di(e,o)),uo(e,n,i,r),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(po(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&ho.enqueueReplaceState(i,i.state,null),uo(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4)}var go=Array.isArray;function _o(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===fo&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function wo(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function ko(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=zl(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=ql(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=_o(e,t,n),r.return=e,r):((r=Vl(n.type,n.key,n.props,null,e.mode,r)).ref=_o(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Wl(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Hl(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=ql(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Vl(t.type,t.key,t.props,null,e.mode,n)).ref=_o(e,null,t),n.return=e,n;case x:return(t=Wl(t,e.mode,n)).return=e,t}if(go(t)||H(t))return(t=Hl(t,e.mode,n,null)).return=e,t;wo(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===i?n.type===C?f(e,t,n.props.children,r,i):u(e,t,n,r):null;case x:return n.key===i?c(e,t,n,r):null}if(go(n)||H(n))return null!==i?null:f(e,t,n,r,null);wo(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return e=e.get(null===r.key?n:r.key)||null,r.type===C?f(t,e,r.props.children,i,r.key):u(t,e,r,i);case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(go(r)||H(r))return f(t,e=e.get(n)||null,r,i,null);wo(t,r)}return null}function y(i,a,s,l){for(var u=null,c=null,f=a,y=a=0,m=null;null!==f&&y<s.length;y++){f.index>y?(m=f,f=null):m=f.sibling;var v=p(i,f,s[y],l);if(null===v){null===f&&(f=m);break}e&&f&&null===v.alternate&&t(i,f),a=o(v,a,y),null===c?u=v:c.sibling=v,c=v,f=m}if(y===s.length)return n(i,f),u;if(null===f){for(;y<s.length;y++)null!==(f=d(i,s[y],l))&&(a=o(f,a,y),null===c?u=f:c.sibling=f,c=f);return u}for(f=r(i,f);y<s.length;y++)null!==(m=h(f,i,y,s[y],l))&&(e&&null!==m.alternate&&f.delete(null===m.key?y:m.key),a=o(m,a,y),null===c?u=m:c.sibling=m,c=m);return e&&f.forEach((function(e){return t(i,e)})),u}function m(i,s,l,u){var c=H(l);if("function"!=typeof c)throw Error(a(150));if(null==(l=c.call(l)))throw Error(a(151));for(var f=c=null,y=s,m=s=0,v=null,b=l.next();null!==y&&!b.done;m++,b=l.next()){y.index>m?(v=y,y=null):v=y.sibling;var g=p(i,y,b.value,u);if(null===g){null===y&&(y=v);break}e&&y&&null===g.alternate&&t(i,y),s=o(g,s,m),null===f?c=g:f.sibling=g,f=g,y=v}if(b.done)return n(i,y),c;if(null===y){for(;!b.done;m++,b=l.next())null!==(b=d(i,b.value,u))&&(s=o(b,s,m),null===f?c=b:f.sibling=b,f=b);return c}for(y=r(i,y);!b.done;m++,b=l.next())null!==(b=h(y,i,m,b.value,u))&&(e&&null!==b.alternate&&y.delete(null===b.key?m:b.key),s=o(b,s,m),null===f?c=b:f.sibling=b,f=b);return e&&y.forEach((function(e){return t(i,e)})),c}return function(e,r,o,l){var u="object"==typeof o&&null!==o&&o.type===C&&null===o.key;u&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case k:e:{for(c=o.key,u=r;null!==u;){if(u.key===c){switch(u.tag){case 7:if(o.type===C){n(e,u.sibling),(r=i(u,o.props.children)).return=e,e=r;break e}break;default:if(u.elementType===o.type){n(e,u.sibling),(r=i(u,o.props)).ref=_o(e,u,o),r.return=e,e=r;break e}}n(e,u);break}t(e,u),u=u.sibling}o.type===C?((r=Hl(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=Vl(o.type,o.key,o.props,null,e.mode,l)).ref=_o(e,r,o),l.return=e,e=l)}return s(e);case x:e:{for(u=o.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Wl(o,e.mode,l)).return=e,e=r}return s(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=ql(o,e.mode,l)).return=e,e=r),s(e);if(go(o))return y(e,r,o,l);if(H(o))return m(e,r,o,l);if(c&&wo(e,o),void 0===o&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,G(e.type)||"Component"))}return n(e,r)}}var xo=ko(!0),Co=ko(!1),Eo={},Oo=oi(Eo),So=oi(Eo),jo=oi(Eo);function Ao(e){if(e===Eo)throw Error(a(174));return e}function Po(e,t){switch(si(jo,t),si(So,e),si(Oo,Eo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ai(Oo),si(Oo,t)}function To(){ai(Oo),ai(So),ai(jo)}function Ro(e){Ao(jo.current);var t=Ao(Oo.current),n=pe(t,e.type);t!==n&&(si(So,e),si(Oo,n))}function Lo(e){So.current===e&&(ai(Oo),ai(So))}var Io=oi(0);function No(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Bo=null,Do=null,Mo=!1;function Fo(e,t){var n=Ml(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function zo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Vo(e){if(Mo){var t=Do;if(t){var n=t;if(!zo(e,t)){if(!(t=qr(n.nextSibling))||!zo(e,t))return e.flags=-1025&e.flags|2,Mo=!1,void(Bo=e);Fo(Bo,n)}Bo=e,Do=qr(t.firstChild)}else e.flags=-1025&e.flags|2,Mo=!1,Bo=e}}function Ho(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Bo=e}function Uo(e){if(e!==Bo)return!1;if(!Mo)return Ho(e),Mo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!zr(t,e.memoizedProps))for(t=Do;t;)Fo(e,t),t=qr(t.nextSibling);if(Ho(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Do=qr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Do=null}}else Do=Bo?qr(e.stateNode.nextSibling):null;return!0}function qo(){Do=Bo=null,Mo=!1}var Wo=[];function $o(){for(var e=0;e<Wo.length;e++)Wo[e]._workInProgressVersionPrimary=null;Wo.length=0}var Go=w.ReactCurrentDispatcher,Ko=w.ReactCurrentBatchConfig,Qo=0,Jo=null,Yo=null,Zo=null,Xo=!1,ea=!1;function ta(){throw Error(a(321))}function na(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function ra(e,t,n,r,i,o){if(Qo=o,Jo=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Go.current=null===e||null===e.memoizedState?Aa:Pa,e=n(r,i),ea){o=0;do{if(ea=!1,!(25>o))throw Error(a(301));o+=1,Zo=Yo=null,t.updateQueue=null,Go.current=Ta,e=n(r,i)}while(ea)}if(Go.current=ja,t=null!==Yo&&null!==Yo.next,Qo=0,Zo=Yo=Jo=null,Xo=!1,t)throw Error(a(300));return e}function ia(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Zo?Jo.memoizedState=Zo=e:Zo=Zo.next=e,Zo}function oa(){if(null===Yo){var e=Jo.alternate;e=null!==e?e.memoizedState:null}else e=Yo.next;var t=null===Zo?Jo.memoizedState:Zo.next;if(null!==t)Zo=t,Yo=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Yo=e).memoizedState,baseState:Yo.baseState,baseQueue:Yo.baseQueue,queue:Yo.queue,next:null},null===Zo?Jo.memoizedState=Zo=e:Zo=Zo.next=e}return Zo}function aa(e,t){return"function"==typeof t?t(e):t}function sa(e){var t=oa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Yo,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var s=i.next;i.next=o.next,o.next=s}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=s=o=null,u=i;do{var c=u.lane;if((Qo&c)===c)null!==l&&(l=l.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var f={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===l?(s=l=f,o=r):l=l.next=f,Jo.lanes|=c,Ns|=c}u=u.next}while(null!==u&&u!==i);null===l?o=r:l.next=s,ar(r,t.memoizedState)||(La=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function la(e){var t=oa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{o=e(o,s.action),s=s.next}while(s!==i);ar(o,t.memoizedState)||(La=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function ua(e,t,n){var r=t._getVersion;r=r(t._source);var i=t._workInProgressVersionPrimary;if(null!==i?e=i===r:(e=e.mutableReadLanes,(e=(Qo&e)===e)&&(t._workInProgressVersionPrimary=r,Wo.push(t))),e)return n(t._source);throw Wo.push(t),Error(a(350))}function ca(e,t,n,r){var i=Ss;if(null===i)throw Error(a(349));var o=t._getVersion,s=o(t._source),l=Go.current,u=l.useState((function(){return ua(i,t,n)})),c=u[1],f=u[0];u=Zo;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,y=d.source;d=d.subscribe;var m=Jo;return e.memoizedState={refs:p,source:t,subscribe:r},l.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=o(t._source);if(!ar(s,e)){e=n(t._source),ar(f,e)||(c(e),e=sl(m),i.mutableReadLanes|=e&i.pendingLanes),e=i.mutableReadLanes,i.entangledLanes|=e;for(var r=i.entanglements,a=e;0<a;){var l=31-Ut(a),u=1<<l;r[l]|=e,a&=~u}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=sl(m);i.mutableReadLanes|=r&i.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ar(h,n)&&ar(y,t)&&ar(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:f}).dispatch=c=Sa.bind(null,Jo,e),u.queue=e,u.baseQueue=null,f=ua(i,t,n),u.memoizedState=u.baseState=f),f}function fa(e,t,n){return ca(oa(),e,t,n)}function da(e){var t=ia();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:e}).dispatch=Sa.bind(null,Jo,e),[t.memoizedState,e]}function pa(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Jo.updateQueue)?(t={lastEffect:null},Jo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ha(e){return e={current:e},ia().memoizedState=e}function ya(){return oa().memoizedState}function ma(e,t,n,r){var i=ia();Jo.flags|=e,i.memoizedState=pa(1|t,n,void 0,void 0===r?null:r)}function va(e,t,n,r){var i=oa();r=void 0===r?null:r;var o=void 0;if(null!==Yo){var a=Yo.memoizedState;if(o=a.destroy,null!==r&&na(r,a.deps))return void pa(t,n,o,r)}Jo.flags|=e,i.memoizedState=pa(1|t,n,o,r)}function ba(e,t){return ma(516,4,e,t)}function ga(e,t){return va(516,4,e,t)}function _a(e,t){return va(4,2,e,t)}function wa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ka(e,t,n){return n=null!=n?n.concat([e]):null,va(4,2,wa.bind(null,t,e),n)}function xa(){}function Ca(e,t){var n=oa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ea(e,t){var n=oa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Oa(e,t){var n=zi();Hi(98>n?98:n,(function(){e(!0)})),Hi(97<n?97:n,(function(){var n=Ko.transition;Ko.transition=1;try{e(!1),t()}finally{Ko.transition=n}}))}function Sa(e,t,n){var r=al(),i=sl(e),o={lane:i,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),t.pending=o,a=e.alternate,e===Jo||null!==a&&a===Jo)ea=Xo=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var s=t.lastRenderedState,l=a(s,n);if(o.eagerReducer=a,o.eagerState=l,ar(l,s))return}catch(e){}ll(e,i,r)}}var ja={readContext:no,useCallback:ta,useContext:ta,useEffect:ta,useImperativeHandle:ta,useLayoutEffect:ta,useMemo:ta,useReducer:ta,useRef:ta,useState:ta,useDebugValue:ta,useDeferredValue:ta,useTransition:ta,useMutableSource:ta,useOpaqueIdentifier:ta,unstable_isNewReconciler:!1},Aa={readContext:no,useCallback:function(e,t){return ia().memoizedState=[e,void 0===t?null:t],e},useContext:no,useEffect:ba,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ma(4,2,wa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ma(4,2,e,t)},useMemo:function(e,t){var n=ia();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ia();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Sa.bind(null,Jo,e),[r.memoizedState,e]},useRef:ha,useState:da,useDebugValue:xa,useDeferredValue:function(e){var t=da(e),n=t[0],r=t[1];return ba((function(){var t=Ko.transition;Ko.transition=1;try{r(e)}finally{Ko.transition=t}}),[e]),n},useTransition:function(){var e=da(!1),t=e[0];return ha(e=Oa.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ia();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ca(r,e,t,n)},useOpaqueIdentifier:function(){if(Mo){var e=!1,t=function(e){return{$$typeof:N,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+($r++).toString(36))),Error(a(355))})),n=da(t)[1];return 0==(2&Jo.mode)&&(Jo.flags|=516,pa(5,(function(){n("r:"+($r++).toString(36))}),void 0,null)),t}return da(t="r:"+($r++).toString(36)),t},unstable_isNewReconciler:!1},Pa={readContext:no,useCallback:Ca,useContext:no,useEffect:ga,useImperativeHandle:ka,useLayoutEffect:_a,useMemo:Ea,useReducer:sa,useRef:ya,useState:function(){return sa(aa)},useDebugValue:xa,useDeferredValue:function(e){var t=sa(aa),n=t[0],r=t[1];return ga((function(){var t=Ko.transition;Ko.transition=1;try{r(e)}finally{Ko.transition=t}}),[e]),n},useTransition:function(){var e=sa(aa)[0];return[ya().current,e]},useMutableSource:fa,useOpaqueIdentifier:function(){return sa(aa)[0]},unstable_isNewReconciler:!1},Ta={readContext:no,useCallback:Ca,useContext:no,useEffect:ga,useImperativeHandle:ka,useLayoutEffect:_a,useMemo:Ea,useReducer:la,useRef:ya,useState:function(){return la(aa)},useDebugValue:xa,useDeferredValue:function(e){var t=la(aa),n=t[0],r=t[1];return ga((function(){var t=Ko.transition;Ko.transition=1;try{r(e)}finally{Ko.transition=t}}),[e]),n},useTransition:function(){var e=la(aa)[0];return[ya().current,e]},useMutableSource:fa,useOpaqueIdentifier:function(){return la(aa)[0]},unstable_isNewReconciler:!1},Ra=w.ReactCurrentOwner,La=!1;function Ia(e,t,n,r){t.child=null===e?Co(t,null,n,r):xo(t,e.child,n,r)}function Na(e,t,n,r,i){n=n.render;var o=t.ref;return to(t,i),r=ra(e,t,n,r,o,i),null===e||La?(t.flags|=1,Ia(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,Xa(e,t,i))}function Ba(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||Fl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Vl(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Da(e,t,a,r,i,o))}return a=e.child,0==(i&o)&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:lr)(i,r)&&e.ref===t.ref)?Xa(e,t,o):(t.flags|=1,(e=zl(a,r)).ref=t.ref,e.return=t,t.child=e)}function Da(e,t,n,r,i,o){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(La=!1,0==(o&i))return t.lanes=e.lanes,Xa(e,t,o);0!=(16384&e.flags)&&(La=!0)}return za(e,t,n,r,o)}function Ma(e,t,n){var r=t.pendingProps,i=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},ml(0,n);else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},ml(0,e),null;t.memoizedState={baseLanes:0},ml(0,null!==o?o.baseLanes:n)}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,ml(0,r);return Ia(e,t,i,n),t.child}function Fa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function za(e,t,n,r,i){var o=pi(n)?fi:ui.current;return o=di(t,o),to(t,i),n=ra(e,t,n,r,o,i),null===e||La?(t.flags|=1,Ia(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,Xa(e,t,i))}function Va(e,t,n,r,i){if(pi(n)){var o=!0;vi(t)}else o=!1;if(to(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),mo(t,n,r),bo(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,u=n.contextType;u="object"==typeof u&&null!==u?no(u):di(t,u=pi(n)?fi:ui.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==u)&&vo(t,a,r,u),ro=!1;var d=t.memoizedState;a.state=d,uo(t,r,a,i),l=t.memoizedState,s!==r||d!==l||ci.current||ro?("function"==typeof c&&(po(t,n,c,r),l=t.memoizedState),(s=ro||yo(t,n,s,r,d,l,u))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=u,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,oo(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:Gi(t.type,s),a.props=u,f=t.pendingProps,d=a.context,l="object"==typeof(l=n.contextType)&&null!==l?no(l):di(t,l=pi(n)?fi:ui.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==f||d!==l)&&vo(t,a,r,l),ro=!1,d=t.memoizedState,a.state=d,uo(t,r,a,i);var h=t.memoizedState;s!==f||d!==h||ci.current||ro?("function"==typeof p&&(po(t,n,p,r),h=t.memoizedState),(u=ro||yo(t,n,u,r,d,h,l))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,r=u):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Ha(e,t,n,r,o,i)}function Ha(e,t,n,r,i,o){Fa(e,t);var a=0!=(64&t.flags);if(!r&&!a)return i&&bi(t,n,!1),Xa(e,t,o);r=t.stateNode,Ra.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=xo(t,e.child,null,o),t.child=xo(t,null,s,o)):Ia(e,t,s,o),t.memoizedState=r.state,i&&bi(t,n,!0),t.child}function Ua(e){var t=e.stateNode;t.pendingContext?yi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&yi(0,t.context,!1),Po(e,t.containerInfo)}var qa,Wa,$a,Ga={dehydrated:null,retryLane:0};function Ka(e,t,n){var r,i=t.pendingProps,o=Io.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(o|=1),si(Io,1&o),null===e?(void 0!==i.fallback&&Vo(t),e=i.children,o=i.fallback,a?(e=Qa(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ga,e):"number"==typeof i.unstable_expectedLoadTime?(e=Qa(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ga,t.lanes=33554432,e):((n=Ul({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(i=function(e,t,n,r,i){var o=t.mode,a=e.child;e=a.sibling;var s={mode:"hidden",children:n};return 0==(2&o)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=zl(a,s),null!==e?r=zl(e,r):(r=Hl(r,o,i,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,i.children,i.fallback,n),a=t.child,o=e.child.memoizedState,a.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Ga,i):(n=function(e,t,n,r){var i=e.child;return e=i.sibling,n=zl(i,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,i.children,n),t.memoizedState=null,n))}function Qa(e,t,n,r){var i=e.mode,o=e.child;return t={mode:"hidden",children:t},0==(2&i)&&null!==o?(o.childLanes=0,o.pendingProps=t):o=Ul(t,i,0,null),n=Hl(n,i,r,null),o.return=e,n.return=e,o.sibling=n,e.child=o,n}function Ja(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),eo(e.return,t)}function Ya(e,t,n,r,i,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=i,a.lastEffect=o)}function Za(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(Ia(e,t,r.children,n),0!=(2&(r=Io.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ja(e,n);else if(19===e.tag)Ja(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(si(Io,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===No(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Ya(t,!1,i,n,o,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===No(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Ya(t,!0,n,null,o,t.lastEffect);break;case"together":Ya(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Xa(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ns|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=zl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=zl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function es(e,t){if(!Mo)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ts(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return pi(t.type)&&hi(),null;case 3:return To(),ai(ci),ai(ui),$o(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Uo(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Lo(t);var o=Ao(jo.current);if(n=t.type,null!==e&&null!=t.stateNode)Wa(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ao(Oo.current),Uo(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[Kr]=t,r[Qr]=s,n){case"dialog":Or("cancel",r),Or("close",r);break;case"iframe":case"object":case"embed":Or("load",r);break;case"video":case"audio":for(e=0;e<kr.length;e++)Or(kr[e],r);break;case"source":Or("error",r);break;case"img":case"image":case"link":Or("error",r),Or("load",r);break;case"details":Or("toggle",r);break;case"input":ee(r,s),Or("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Or("invalid",r);break;case"textarea":le(r,s),Or("invalid",r)}for(var u in xe(n,s),e=null,s)s.hasOwnProperty(u)&&(o=s[u],"children"===u?"string"==typeof o?r.textContent!==o&&(e=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(e=["children",""+o]):l.hasOwnProperty(u)&&null!=o&&"onScroll"===u&&Or("scroll",r));switch(n){case"input":J(r),re(r,s,!0);break;case"textarea":J(r),ce(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Br)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===o.nodeType?o:o.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Kr]=t,e[Qr]=r,qa(e,t),t.stateNode=e,u=Ce(n,r),n){case"dialog":Or("cancel",e),Or("close",e),o=r;break;case"iframe":case"object":case"embed":Or("load",e),o=r;break;case"video":case"audio":for(o=0;o<kr.length;o++)Or(kr[o],e);o=r;break;case"source":Or("error",e),o=r;break;case"img":case"image":case"link":Or("error",e),Or("load",e),o=r;break;case"details":Or("toggle",e),o=r;break;case"input":ee(e,r),o=X(e,r),Or("invalid",e);break;case"option":o=oe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=i({},r,{value:void 0}),Or("invalid",e);break;case"textarea":le(e,r),o=se(e,r),Or("invalid",e);break;default:o=r}xe(n,o);var c=o;for(s in c)if(c.hasOwnProperty(s)){var f=c[s];"style"===s?we(e,f):"dangerouslySetInnerHTML"===s?null!=(f=f?f.__html:void 0)&&me(e,f):"children"===s?"string"==typeof f?("textarea"!==n||""!==f)&&ve(e,f):"number"==typeof f&&ve(e,""+f):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=f&&"onScroll"===s&&Or("scroll",e):null!=f&&_(e,s,f,u))}switch(n){case"input":J(e),re(e,r,!1);break;case"textarea":J(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?ae(e,!!r.multiple,s,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Br)}Fr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)$a(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ao(jo.current),Ao(Oo.current),Uo(t)?(r=t.stateNode,n=t.memoizedProps,r[Kr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Kr]=t,t.stateNode=r)}return null;case 13:return ai(Io),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Uo(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Io.current)?0===Rs&&(Rs=3):(0!==Rs&&3!==Rs||(Rs=4),null===Ss||0==(134217727&Ns)&&0==(134217727&Bs)||dl(Ss,As))),(r||n)&&(t.flags|=4),null);case 4:return To(),null===e&&jr(t.stateNode.containerInfo),null;case 10:return Xi(t),null;case 17:return pi(t.type)&&hi(),null;case 19:if(ai(Io),null===(r=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(u=r.rendering))if(s)es(r,!1);else{if(0!==Rs||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=No(e))){for(t.flags|=64,es(r,!1),null!==(s=u.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(u=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=u.childLanes,s.lanes=u.lanes,s.child=u.child,s.memoizedProps=u.memoizedProps,s.memoizedState=u.memoizedState,s.updateQueue=u.updateQueue,s.type=u.type,e=u.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return si(Io,1&Io.current|2),t.child}e=e.sibling}null!==r.tail&&Fi()>zs&&(t.flags|=64,s=!0,es(r,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=No(u))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),es(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!Mo)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Fi()-r.renderingStartTime>zs&&1073741824!==n&&(t.flags|=64,s=!0,es(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Fi(),n.sibling=null,t=Io.current,si(Io,s?1&t|2:1&t),n):null;case 23:case 24:return vl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function ns(e){switch(e.tag){case 1:pi(e.type)&&hi();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(To(),ai(ci),ai(ui),$o(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Lo(e),null;case 13:return ai(Io),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ai(Io),null;case 4:return To(),null;case 10:return Xi(e),null;case 23:case 24:return vl(),null;default:return null}}function rs(e,t){try{var n="",r=t;do{n+=$(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i}}function is(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}qa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Wa=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Ao(Oo.current);var a,s=null;switch(n){case"input":o=X(e,o),r=X(e,r),s=[];break;case"option":o=oe(e,o),r=oe(e,r),s=[];break;case"select":o=i({},o,{value:void 0}),r=i({},r,{value:void 0}),s=[];break;case"textarea":o=se(e,o),r=se(e,r),s=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Br)}for(f in xe(n,r),n=null,o)if(!r.hasOwnProperty(f)&&o.hasOwnProperty(f)&&null!=o[f])if("style"===f){var u=o[f];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(l.hasOwnProperty(f)?s||(s=[]):(s=s||[]).push(f,null));for(f in r){var c=r[f];if(u=null!=o?o[f]:void 0,r.hasOwnProperty(f)&&c!==u&&(null!=c||null!=u))if("style"===f)if(u){for(a in u)!u.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&u[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(s||(s=[]),s.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(s=s||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(l.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Or("scroll",e),s||u===c||(s=[])):"object"==typeof c&&null!==c&&c.$$typeof===N?c.toString():(s=s||[]).push(f,c))}n&&(s=s||[]).push("style",n);var f=s;(t.updateQueue=f)&&(t.flags|=4)}},$a=function(e,t,n,r){n!==r&&(t.flags|=4)};var os="function"==typeof WeakMap?WeakMap:Map;function as(e,t,n){(n=ao(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){qs||(qs=!0,Ws=r),is(0,t)},n}function ss(e,t,n){(n=ao(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return is(0,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===$s?$s=new Set([this]):$s.add(this),is(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ls="function"==typeof WeakSet?WeakSet:Set;function us(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Il(e,t)}else t.current=null}function cs(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Gi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Ur(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function fs(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var i=e;r=i.next,0!=(4&(i=i.tag))&&0!=(1&i)&&(Tl(n,e),Pl(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Gi(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&co(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}co(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Fr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&wt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function ds(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var i=n.memoizedProps.style;i=null!=i&&i.hasOwnProperty("display")?i.display:null,r.style.display=_e("display",i)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function ps(e,t){if(_i&&"function"==typeof _i.onCommitFiberUnmount)try{_i.onCommitFiberUnmount(gi,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,i=r.destroy;if(r=r.tag,void 0!==i)if(0!=(4&r))Tl(t,n);else{r=t;try{i()}catch(e){Il(r,e)}}n=n.next}while(n!==e)}break;case 1:if(us(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Il(t,e)}break;case 5:us(t);break;case 4:gs(e,t)}}function hs(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function ys(e){return 5===e.tag||3===e.tag||4===e.tag}function ms(e){e:{for(var t=e.return;null!==t;){if(ys(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ys(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?vs(e,n,t):bs(e,n,t)}function vs(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Br));else if(4!==r&&null!==(e=e.child))for(vs(e,t,n),e=e.sibling;null!==e;)vs(e,t,n),e=e.sibling}function bs(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(bs(e,t,n),e=e.sibling;null!==e;)bs(e,t,n),e=e.sibling}function gs(e,t){for(var n,r,i=t,o=!1;;){if(!o){o=i.return;e:for(;;){if(null===o)throw Error(a(160));switch(n=o.stateNode,o.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}o=o.return}o=!0}if(5===i.tag||6===i.tag){e:for(var s=e,l=i,u=l;;)if(ps(s,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===l)break e;for(;null===u.sibling;){if(null===u.return||u.return===l)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(s=n,l=i.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){n=i.stateNode.containerInfo,r=!0,i.child.return=i,i=i.child;continue}}else if(ps(e,i),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(o=!1)}i.sibling.return=i.return,i=i.sibling}}function _s(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Qr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ce(e,i),t=Ce(e,r),i=0;i<o.length;i+=2){var s=o[i],l=o[i+1];"style"===s?we(n,l):"dangerouslySetInnerHTML"===s?me(n,l):"children"===s?ve(n,l):_(n,s,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(o=r.value)?ae(n,!!r.multiple,o,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,wt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Fs=Fi(),ds(t.child,!0)),void ws(t);case 19:return void ws(t);case 17:return;case 23:case 24:return void ds(t,null!==t.memoizedState)}throw Error(a(163))}function ws(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ls),t.forEach((function(t){var r=Bl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ks(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var xs=Math.ceil,Cs=w.ReactCurrentDispatcher,Es=w.ReactCurrentOwner,Os=0,Ss=null,js=null,As=0,Ps=0,Ts=oi(0),Rs=0,Ls=null,Is=0,Ns=0,Bs=0,Ds=0,Ms=null,Fs=0,zs=1/0;function Vs(){zs=Fi()+500}var Hs,Us=null,qs=!1,Ws=null,$s=null,Gs=!1,Ks=null,Qs=90,Js=[],Ys=[],Zs=null,Xs=0,el=null,tl=-1,nl=0,rl=0,il=null,ol=!1;function al(){return 0!=(48&Os)?Fi():-1!==tl?tl:tl=Fi()}function sl(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===zi()?1:2;if(0===nl&&(nl=Is),0!==$i.transition){0!==rl&&(rl=null!==Ms?Ms.pendingLanes:0),e=nl;var t=4186112&~rl;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=zi(),e=Ft(0!=(4&Os)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),nl)}function ll(e,t,n){if(50<Xs)throw Xs=0,el=null,Error(a(185));if(null===(e=ul(e,t)))return null;Ht(e,t,n),e===Ss&&(Bs|=t,4===Rs&&dl(e,As));var r=zi();1===t?0!=(8&Os)&&0==(48&Os)?pl(e):(cl(e,n),0===Os&&(Vs(),qi())):(0==(4&Os)||98!==r&&99!==r||(null===Zs?Zs=new Set([e]):Zs.add(e)),cl(e,n)),Ms=e}function ul(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,i=e.pingedLanes,o=e.expirationTimes,s=e.pendingLanes;0<s;){var l=31-Ut(s),u=1<<l,c=o[l];if(-1===c){if(0==(u&r)||0!=(u&i)){c=t,Bt(u);var f=Nt;o[l]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);s&=~u}if(r=Dt(e,e===Ss?As:0),t=Nt,0===r)null!==n&&(n!==Li&&xi(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Li&&xi(n)}15===t?(n=pl.bind(null,e),null===Ni?(Ni=[n],Bi=ki(ji,Wi)):Ni.push(n),n=Li):n=14===t?Ui(99,pl.bind(null,e)):Ui(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),fl.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function fl(e){if(tl=-1,rl=nl=0,0!=(48&Os))throw Error(a(327));var t=e.callbackNode;if(Al()&&e.callbackNode!==t)return null;var n=Dt(e,e===Ss?As:0);if(0===n)return null;var r=n,i=Os;Os|=16;var o=_l();for(Ss===e&&As===r||(Vs(),bl(e,r));;)try{xl();break}catch(t){gl(e,t)}if(Zi(),Cs.current=o,Os=i,null!==js?r=0:(Ss=null,As=0,r=Rs),0!=(Is&Bs))bl(e,0);else if(0!==r){if(2===r&&(Os|=64,e.hydrate&&(e.hydrate=!1,Ur(e.containerInfo)),0!==(n=Mt(e))&&(r=wl(e,n))),1===r)throw t=Ls,bl(e,0),dl(e,n),cl(e,Fi()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:Ol(e);break;case 3:if(dl(e,n),(62914560&n)===n&&10<(r=Fs+500-Fi())){if(0!==Dt(e,0))break;if(((i=e.suspendedLanes)&n)!==n){al(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=Vr(Ol.bind(null,e),r);break}Ol(e);break;case 4:if(dl(e,n),(4186112&n)===n)break;for(r=e.eventTimes,i=-1;0<n;){var s=31-Ut(n);o=1<<s,(s=r[s])>i&&(i=s),n&=~o}if(n=i,10<(n=(120>(n=Fi()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*xs(n/1960))-n)){e.timeoutHandle=Vr(Ol.bind(null,e),n);break}Ol(e);break;case 5:Ol(e);break;default:throw Error(a(329))}}return cl(e,Fi()),e.callbackNode===t?fl.bind(null,e):null}function dl(e,t){for(t&=~Ds,t&=~Bs,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ut(t),r=1<<n;e[n]=-1,t&=~r}}function pl(e){if(0!=(48&Os))throw Error(a(327));if(Al(),e===Ss&&0!=(e.expiredLanes&As)){var t=As,n=wl(e,t);0!=(Is&Bs)&&(n=wl(e,t=Dt(e,t)))}else n=wl(e,t=Dt(e,0));if(0!==e.tag&&2===n&&(Os|=64,e.hydrate&&(e.hydrate=!1,Ur(e.containerInfo)),0!==(t=Mt(e))&&(n=wl(e,t))),1===n)throw n=Ls,bl(e,0),dl(e,t),cl(e,Fi()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ol(e),cl(e,Fi()),null}function hl(e,t){var n=Os;Os|=1;try{return e(t)}finally{0===(Os=n)&&(Vs(),qi())}}function yl(e,t){var n=Os;Os&=-2,Os|=8;try{return e(t)}finally{0===(Os=n)&&(Vs(),qi())}}function ml(e,t){si(Ts,Ps),Ps|=t,Is|=t}function vl(){Ps=Ts.current,ai(Ts)}function bl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Hr(n)),null!==js)for(n=js.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&hi();break;case 3:To(),ai(ci),ai(ui),$o();break;case 5:Lo(r);break;case 4:To();break;case 13:case 19:ai(Io);break;case 10:Xi(r);break;case 23:case 24:vl()}n=n.return}Ss=e,js=zl(e.current,null),As=Ps=Is=t,Rs=0,Ls=null,Ds=Bs=Ns=0}function gl(e,t){for(;;){var n=js;try{if(Zi(),Go.current=ja,Xo){for(var r=Jo.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}Xo=!1}if(Qo=0,Zo=Yo=Jo=null,ea=!1,Es.current=null,null===n||null===n.return){Rs=1,Ls=t,js=null;break}e:{var o=e,a=n.return,s=n,l=t;if(t=As,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&s.mode)){var c=s.alternate;c?(s.updateQueue=c.updateQueue,s.memoizedState=c.memoizedState,s.lanes=c.lanes):(s.updateQueue=null,s.memoizedState=null)}var f=0!=(1&Io.current),d=a;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var y=d.memoizedProps;p=void 0!==y.fallback&&(!0!==y.unstable_avoidThisFallback||!f)}}if(p){var m=d.updateQueue;if(null===m){var v=new Set;v.add(u),d.updateQueue=v}else m.add(u);if(0==(2&d.mode)){if(d.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var b=ao(-1,1);b.tag=2,so(s,b)}s.lanes|=1;break e}l=void 0,s=t;var g=o.pingCache;if(null===g?(g=o.pingCache=new os,l=new Set,g.set(u,l)):void 0===(l=g.get(u))&&(l=new Set,g.set(u,l)),!l.has(s)){l.add(s);var _=Nl.bind(null,o,u,s);u.then(_,_)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);l=Error((G(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Rs&&(Rs=2),l=rs(l,s),d=a;do{switch(d.tag){case 3:o=l,d.flags|=4096,t&=-t,d.lanes|=t,lo(d,as(0,o,t));break e;case 1:o=l;var w=d.type,k=d.stateNode;if(0==(64&d.flags)&&("function"==typeof w.getDerivedStateFromError||null!==k&&"function"==typeof k.componentDidCatch&&(null===$s||!$s.has(k)))){d.flags|=4096,t&=-t,d.lanes|=t,lo(d,ss(d,o,t));break e}}d=d.return}while(null!==d)}El(n)}catch(e){t=e,js===n&&null!==n&&(js=n=n.return);continue}break}}function _l(){var e=Cs.current;return Cs.current=ja,null===e?ja:e}function wl(e,t){var n=Os;Os|=16;var r=_l();for(Ss===e&&As===t||bl(e,t);;)try{kl();break}catch(t){gl(e,t)}if(Zi(),Os=n,Cs.current=r,null!==js)throw Error(a(261));return Ss=null,As=0,Rs}function kl(){for(;null!==js;)Cl(js)}function xl(){for(;null!==js&&!Ci();)Cl(js)}function Cl(e){var t=Hs(e.alternate,e,Ps);e.memoizedProps=e.pendingProps,null===t?El(e):js=t,Es.current=null}function El(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ts(n,t,Ps)))return void(js=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ps)||0==(4&n.mode)){for(var r=0,i=n.child;null!==i;)r|=i.lanes|i.childLanes,i=i.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=ns(t)))return n.flags&=2047,void(js=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(js=t);js=t=e}while(null!==t);0===Rs&&(Rs=5)}function Ol(e){var t=zi();return Hi(99,Sl.bind(null,e,t)),null}function Sl(e,t){do{Al()}while(null!==Ks);if(0!=(48&Os))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,i=r,o=e.pendingLanes&~i;e.pendingLanes=i,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=i,e.mutableReadLanes&=i,e.entangledLanes&=i,i=e.entanglements;for(var s=e.eventTimes,l=e.expirationTimes;0<o;){var u=31-Ut(o),c=1<<u;i[u]=0,s[u]=-1,l[u]=-1,o&=~c}if(null!==Zs&&0==(24&r)&&Zs.has(e)&&Zs.delete(e),e===Ss&&(js=Ss=null,As=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(i=Os,Os|=32,Es.current=null,Dr=Kt,pr(s=dr())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else e:if(l=(l=s.ownerDocument)&&l.defaultView||window,(c=l.getSelection&&l.getSelection())&&0!==c.rangeCount){l=c.anchorNode,o=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{l.nodeType,u.nodeType}catch(e){l=null;break e}var f=0,d=-1,p=-1,h=0,y=0,m=s,v=null;t:for(;;){for(var b;m!==l||0!==o&&3!==m.nodeType||(d=f+o),m!==u||0!==c&&3!==m.nodeType||(p=f+c),3===m.nodeType&&(f+=m.nodeValue.length),null!==(b=m.firstChild);)v=m,m=b;for(;;){if(m===s)break t;if(v===l&&++h===o&&(d=f),v===u&&++y===c&&(p=f),null!==(b=m.nextSibling))break;v=(m=v).parentNode}m=b}l=-1===d||-1===p?null:{start:d,end:p}}else l=null;l=l||{start:0,end:0}}else l=null;Mr={focusedElem:s,selectionRange:l},Kt=!1,il=null,ol=!1,Us=r;do{try{jl()}catch(e){if(null===Us)throw Error(a(330));Il(Us,e),Us=Us.nextEffect}}while(null!==Us);il=null,Us=r;do{try{for(s=e;null!==Us;){var g=Us.flags;if(16&g&&ve(Us.stateNode,""),128&g){var _=Us.alternate;if(null!==_){var w=_.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&g){case 2:ms(Us),Us.flags&=-3;break;case 6:ms(Us),Us.flags&=-3,_s(Us.alternate,Us);break;case 1024:Us.flags&=-1025;break;case 1028:Us.flags&=-1025,_s(Us.alternate,Us);break;case 4:_s(Us.alternate,Us);break;case 8:gs(s,l=Us);var k=l.alternate;hs(l),null!==k&&hs(k)}Us=Us.nextEffect}}catch(e){if(null===Us)throw Error(a(330));Il(Us,e),Us=Us.nextEffect}}while(null!==Us);if(w=Mr,_=dr(),g=w.focusedElem,s=w.selectionRange,_!==g&&g&&g.ownerDocument&&fr(g.ownerDocument.documentElement,g)){null!==s&&pr(g)&&(_=s.start,void 0===(w=s.end)&&(w=_),"selectionStart"in g?(g.selectionStart=_,g.selectionEnd=Math.min(w,g.value.length)):(w=(_=g.ownerDocument||document)&&_.defaultView||window).getSelection&&(w=w.getSelection(),l=g.textContent.length,k=Math.min(s.start,l),s=void 0===s.end?k:Math.min(s.end,l),!w.extend&&k>s&&(l=s,s=k,k=l),l=cr(g,k),o=cr(g,s),l&&o&&(1!==w.rangeCount||w.anchorNode!==l.node||w.anchorOffset!==l.offset||w.focusNode!==o.node||w.focusOffset!==o.offset)&&((_=_.createRange()).setStart(l.node,l.offset),w.removeAllRanges(),k>s?(w.addRange(_),w.extend(o.node,o.offset)):(_.setEnd(o.node,o.offset),w.addRange(_))))),_=[];for(w=g;w=w.parentNode;)1===w.nodeType&&_.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof g.focus&&g.focus(),g=0;g<_.length;g++)(w=_[g]).element.scrollLeft=w.left,w.element.scrollTop=w.top}Kt=!!Dr,Mr=Dr=null,e.current=n,Us=r;do{try{for(g=e;null!==Us;){var x=Us.flags;if(36&x&&fs(g,Us.alternate,Us),128&x){_=void 0;var C=Us.ref;if(null!==C){var E=Us.stateNode;switch(Us.tag){case 5:_=E;break;default:_=E}"function"==typeof C?C(_):C.current=_}}Us=Us.nextEffect}}catch(e){if(null===Us)throw Error(a(330));Il(Us,e),Us=Us.nextEffect}}while(null!==Us);Us=null,Ii(),Os=i}else e.current=n;if(Gs)Gs=!1,Ks=e,Qs=t;else for(Us=r;null!==Us;)t=Us.nextEffect,Us.nextEffect=null,8&Us.flags&&((x=Us).sibling=null,x.stateNode=null),Us=t;if(0===(r=e.pendingLanes)&&($s=null),1===r?e===el?Xs++:(Xs=0,el=e):Xs=0,n=n.stateNode,_i&&"function"==typeof _i.onCommitFiberRoot)try{_i.onCommitFiberRoot(gi,n,void 0,64==(64&n.current.flags))}catch(e){}if(cl(e,Fi()),qs)throw qs=!1,e=Ws,Ws=null,e;return 0!=(8&Os)||qi(),null}function jl(){for(;null!==Us;){var e=Us.alternate;ol||null===il||(0!=(8&Us.flags)?Xe(Us,il)&&(ol=!0):13===Us.tag&&ks(e,Us)&&Xe(Us,il)&&(ol=!0));var t=Us.flags;0!=(256&t)&&cs(e,Us),0==(512&t)||Gs||(Gs=!0,Ui(97,(function(){return Al(),null}))),Us=Us.nextEffect}}function Al(){if(90!==Qs){var e=97<Qs?97:Qs;return Qs=90,Hi(e,Rl)}return!1}function Pl(e,t){Js.push(t,e),Gs||(Gs=!0,Ui(97,(function(){return Al(),null})))}function Tl(e,t){Ys.push(t,e),Gs||(Gs=!0,Ui(97,(function(){return Al(),null})))}function Rl(){if(null===Ks)return!1;var e=Ks;if(Ks=null,0!=(48&Os))throw Error(a(331));var t=Os;Os|=32;var n=Ys;Ys=[];for(var r=0;r<n.length;r+=2){var i=n[r],o=n[r+1],s=i.destroy;if(i.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===o)throw Error(a(330));Il(o,e)}}for(n=Js,Js=[],r=0;r<n.length;r+=2){i=n[r],o=n[r+1];try{var l=i.create;i.destroy=l()}catch(e){if(null===o)throw Error(a(330));Il(o,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Os=t,qi(),!0}function Ll(e,t,n){so(e,t=as(0,t=rs(n,t),1)),t=al(),null!==(e=ul(e,1))&&(Ht(e,1,t),cl(e,t))}function Il(e,t){if(3===e.tag)Ll(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ll(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===$s||!$s.has(r))){var i=ss(n,e=rs(t,e),1);if(so(n,i),i=al(),null!==(n=ul(n,1)))Ht(n,1,i),cl(n,i);else if("function"==typeof r.componentDidCatch&&(null===$s||!$s.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Nl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=al(),e.pingedLanes|=e.suspendedLanes&n,Ss===e&&(As&n)===n&&(4===Rs||3===Rs&&(62914560&As)===As&&500>Fi()-Fs?bl(e,0):Ds|=n),cl(e,t)}function Bl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===zi()?1:2:(0===nl&&(nl=Is),0===(t=zt(62914560&~nl))&&(t=4194304))),n=al(),null!==(e=ul(e,t))&&(Ht(e,t,n),cl(e,n))}function Dl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Ml(e,t,n,r){return new Dl(e,t,n,r)}function Fl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zl(e,t){var n=e.alternate;return null===n?((n=Ml(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Vl(e,t,n,r,i,o){var s=2;if(r=e,"function"==typeof e)Fl(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case C:return Hl(n.children,i,o,t);case B:s=8,i|=16;break;case E:s=8,i|=1;break;case O:return(e=Ml(12,n,t,8|i)).elementType=O,e.type=O,e.lanes=o,e;case P:return(e=Ml(13,n,t,i)).type=P,e.elementType=P,e.lanes=o,e;case T:return(e=Ml(19,n,t,i)).elementType=T,e.lanes=o,e;case D:return Ul(n,i,o,t);case M:return(e=Ml(24,n,t,i)).elementType=M,e.lanes=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:s=10;break e;case j:s=9;break e;case A:s=11;break e;case R:s=14;break e;case L:s=16,r=null;break e;case I:s=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Ml(s,n,t,i)).elementType=e,t.type=r,t.lanes=o,t}function Hl(e,t,n,r){return(e=Ml(7,e,r,t)).lanes=n,e}function Ul(e,t,n,r){return(e=Ml(23,e,r,t)).elementType=D,e.lanes=n,e}function ql(e,t,n){return(e=Ml(6,e,null,t)).lanes=n,e}function Wl(e,t,n){return(t=Ml(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function $l(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Vt(0),this.expirationTimes=Vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Vt(0),this.mutableSourceEagerHydrationData=null}function Gl(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Kl(e,t,n,r){var i=t.current,o=al(),s=sl(i);e:if(n){t:{if(Qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(pi(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var u=n.type;if(pi(u)){n=mi(n,u,l);break e}}n=l}else n=li;return null===t.context?t.context=n:t.pendingContext=n,(t=ao(o,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),so(i,t),ll(i,s,o),s}function Ql(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Jl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Yl(e,t){Jl(e,t),(e=e.alternate)&&Jl(e,t)}function Zl(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new $l(e,t,null!=n&&!0===n.hydrate),t=Ml(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,io(t),e[Jr]=n.current,jr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var i=(t=r[e])._getVersion;i=i(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,i]:n.mutableSourceEagerHydrationData.push(t,i)}this._internalRoot=n}function Xl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function eu(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var s=i;i=function(){var e=Ql(a);s.call(e)}}Kl(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Zl(e,0,t?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var l=i;i=function(){var e=Ql(a);l.call(e)}}yl((function(){Kl(t,a,e,i)}))}return Ql(a)}function tu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xl(t))throw Error(a(200));return Gl(e,t,null,n)}Hs=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ci.current)La=!0;else{if(0==(n&r)){switch(La=!1,t.tag){case 3:Ua(t),qo();break;case 5:Ro(t);break;case 1:pi(t.type)&&vi(t);break;case 4:Po(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var i=t.type._context;si(Ki,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ka(e,t,n):(si(Io,1&Io.current),null!==(t=Xa(e,t,n))?t.sibling:null);si(Io,1&Io.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Za(e,t,n);t.flags|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),si(Io,Io.current),r)break;return null;case 23:case 24:return t.lanes=0,Ma(e,t,n)}return Xa(e,t,n)}La=0!=(16384&e.flags)}else La=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=di(t,ui.current),to(t,n),i=ra(null,t,r,e,i,n),t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,pi(r)){var o=!0;vi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,io(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&po(t,r,s,e),i.updater=ho,t.stateNode=i,i._reactInternals=t,bo(t,r,e,n),t=Ha(null,t,r,!0,o,n)}else t.tag=0,Ia(null,t,i,n),t=t.child;return t;case 16:i=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=(o=i._init)(i._payload),t.type=i,o=t.tag=function(e){if("function"==typeof e)return Fl(e)?1:0;if(null!=e){if((e=e.$$typeof)===A)return 11;if(e===R)return 14}return 2}(i),e=Gi(i,e),o){case 0:t=za(null,t,i,e,n);break e;case 1:t=Va(null,t,i,e,n);break e;case 11:t=Na(null,t,i,e,n);break e;case 14:t=Ba(null,t,i,Gi(i.type,e),r,n);break e}throw Error(a(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,za(e,t,r,i=t.elementType===r?i:Gi(r,i),n);case 1:return r=t.type,i=t.pendingProps,Va(e,t,r,i=t.elementType===r?i:Gi(r,i),n);case 3:if(Ua(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,oo(e,t),uo(t,r,null,n),(r=t.memoizedState.element)===i)qo(),t=Xa(e,t,n);else{if((o=(i=t.stateNode).hydrate)&&(Do=qr(t.stateNode.containerInfo.firstChild),Bo=t,o=Mo=!0),o){if(null!=(e=i.mutableSourceEagerHydrationData))for(i=0;i<e.length;i+=2)(o=e[i])._workInProgressVersionPrimary=e[i+1],Wo.push(o);for(n=Co(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ia(e,t,r,n),qo();t=t.child}return t;case 5:return Ro(t),null===e&&Vo(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,s=i.children,zr(r,i)?s=null:null!==o&&zr(r,o)&&(t.flags|=16),Fa(e,t),Ia(e,t,s,n),t.child;case 6:return null===e&&Vo(t),null;case 13:return Ka(e,t,n);case 4:return Po(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=xo(t,null,r,n):Ia(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Na(e,t,r,i=t.elementType===r?i:Gi(r,i),n);case 7:return Ia(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ia(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,s=t.memoizedProps,o=i.value;var l=t.type._context;if(si(Ki,l._currentValue),l._currentValue=o,null!==s)if(l=s.value,0==(o=ar(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(s.children===i.children&&!ci.current){t=Xa(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){s=l.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===l.tag&&((c=ao(-1,n&-n)).tag=2,so(l,c)),l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),eo(l.return,n),u.lanes|=n;break}c=c.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}Ia(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,to(t,n),r=r(i=no(i,o.unstable_observedBits)),t.flags|=1,Ia(e,t,r,n),t.child;case 14:return o=Gi(i=t.type,t.pendingProps),Ba(e,t,i,o=Gi(i.type,o),r,n);case 15:return Da(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Gi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,pi(r)?(e=!0,vi(t)):e=!1,to(t,n),mo(t,r,i),bo(t,r,i,n),Ha(null,t,r,!0,e,n);case 19:return Za(e,t,n);case 23:case 24:return Ma(e,t,n)}throw Error(a(156,t.tag))},Zl.prototype.render=function(e){Kl(e,this._internalRoot,null,null)},Zl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Kl(null,e,null,(function(){t[Jr]=null}))},et=function(e){13===e.tag&&(ll(e,4,al()),Yl(e,4))},tt=function(e){13===e.tag&&(ll(e,67108864,al()),Yl(e,67108864))},nt=function(e){if(13===e.tag){var t=al(),n=sl(e);ll(e,n,t),Yl(e,n)}},rt=function(e,t){return t()},Oe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=ti(r);if(!i)throw Error(a(90));Y(r),ne(r,i)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Re=hl,Le=function(e,t,n,r,i){var o=Os;Os|=4;try{return Hi(98,e.bind(null,t,n,r,i))}finally{0===(Os=o)&&(Vs(),qi())}},Ie=function(){0==(49&Os)&&(function(){if(null!==Zs){var e=Zs;Zs=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cl(e,Fi())}))}qi()}(),Al())},Ne=function(e,t){var n=Os;Os|=2;try{return e(t)}finally{0===(Os=n)&&(Vs(),qi())}};var nu={Events:[Xr,ei,ti,Pe,Te,Al,{current:!1}]},ru={findFiberByHostInstance:Zr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},iu={bundleType:ru.bundleType,version:ru.version,rendererPackageName:ru.rendererPackageName,rendererConfig:ru.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:ru.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ou=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ou.isDisabled&&ou.supportsFiber)try{gi=ou.inject(iu),_i=ou}catch(ye){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nu,t.createPortal=tu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Ze(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Os;if(0!=(48&n))return e(t);Os|=1;try{if(e)return Hi(99,e.bind(null,t))}finally{Os=n,qi()}},t.hydrate=function(e,t,n){if(!Xl(t))throw Error(a(200));return eu(null,e,t,!0,n)},t.render=function(e,t,n){if(!Xl(t))throw Error(a(200));return eu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xl(e))throw Error(a(40));return!!e._reactRootContainer&&(yl((function(){eu(null,null,e,!1,(function(){e._reactRootContainer=null,e[Jr]=null}))})),!0)},t.unstable_batchedUpdates=hl,t.unstable_createPortal=function(e,t){return tu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xl(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return eu(e,t,n,!1,r)},t.version="17.0.2"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},6871:(e,t,n)=>{"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function i(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!=n?n:null}.bind(this))}function o(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function a(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,a=null,s=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?a="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(a="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?s="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(s="UNSAFE_componentWillUpdate"),null!==n||null!==a||null!==s){var l=e.displayName||e.name,u="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+l+" uses "+u+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==a?"\n  "+a:"")+(null!==s?"\n  "+s:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=r,t.componentWillReceiveProps=i),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=o;var c=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;c.call(this,e,t,r)}}return e}n.r(t),n.d(t,{polyfill:()=>a}),r.__suppressDeprecationWarning=!0,i.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0},9983:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bodyOpenClassName=t.portalClassName=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(7294),a=h(o),s=h(n(3935)),l=h(n(5697)),u=h(n(8747)),c=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(7149)),f=n(1112),d=h(f),p=n(6871);function h(e){return e&&e.__esModule?e:{default:e}}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function m(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=t.portalClassName="ReactModalPortal",b=t.bodyOpenClassName="ReactModal__Body--open",g=f.canUseDOM&&void 0!==s.default.createPortal,_=function(){return g?s.default.createPortal:s.default.unstable_renderSubtreeIntoContainer};function w(e){return e()}var k=function(e){function t(){var e,n,i;y(this,t);for(var o=arguments.length,l=Array(o),c=0;c<o;c++)l[c]=arguments[c];return n=i=m(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(l))),i.removePortal=function(){!g&&s.default.unmountComponentAtNode(i.node);var e=w(i.props.parentSelector);e&&e.contains(i.node)?e.removeChild(i.node):console.warn('React-Modal: "parentSelector" prop did not returned any DOM element. Make sure that the parent element is unmounted to avoid any memory leaks.')},i.portalRef=function(e){i.portal=e},i.renderPortal=function(e){var n=_()(i,a.default.createElement(u.default,r({defaultStyles:t.defaultStyles},e)),i.node);i.portalRef(n)},m(i,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"componentDidMount",value:function(){f.canUseDOM&&(g||(this.node=document.createElement("div")),this.node.className=this.props.portalClassName,w(this.props.parentSelector).appendChild(this.node),!g&&this.renderPortal(this.props))}},{key:"getSnapshotBeforeUpdate",value:function(e){return{prevParent:w(e.parentSelector),nextParent:w(this.props.parentSelector)}}},{key:"componentDidUpdate",value:function(e,t,n){if(f.canUseDOM){var r=this.props,i=r.isOpen,o=r.portalClassName;e.portalClassName!==o&&(this.node.className=o);var a=n.prevParent,s=n.nextParent;s!==a&&(a.removeChild(this.node),s.appendChild(this.node)),(e.isOpen||i)&&!g&&this.renderPortal(this.props)}}},{key:"componentWillUnmount",value:function(){if(f.canUseDOM&&this.node&&this.portal){var e=this.portal.state,t=Date.now(),n=e.isOpen&&this.props.closeTimeoutMS&&(e.closesAt||t+this.props.closeTimeoutMS);n?(e.beforeClose||this.portal.closeWithTimeout(),setTimeout(this.removePortal,n-t)):this.removePortal()}}},{key:"render",value:function(){return f.canUseDOM&&g?(!this.node&&g&&(this.node=document.createElement("div")),_()(a.default.createElement(u.default,r({ref:this.portalRef,defaultStyles:t.defaultStyles},this.props)),this.node)):null}}],[{key:"setAppElement",value:function(e){c.setElement(e)}}]),t}(o.Component);k.propTypes={isOpen:l.default.bool.isRequired,style:l.default.shape({content:l.default.object,overlay:l.default.object}),portalClassName:l.default.string,bodyOpenClassName:l.default.string,htmlOpenClassName:l.default.string,className:l.default.oneOfType([l.default.string,l.default.shape({base:l.default.string.isRequired,afterOpen:l.default.string.isRequired,beforeClose:l.default.string.isRequired})]),overlayClassName:l.default.oneOfType([l.default.string,l.default.shape({base:l.default.string.isRequired,afterOpen:l.default.string.isRequired,beforeClose:l.default.string.isRequired})]),appElement:l.default.oneOfType([l.default.instanceOf(d.default),l.default.instanceOf(f.SafeHTMLCollection),l.default.instanceOf(f.SafeNodeList),l.default.arrayOf(l.default.instanceOf(d.default))]),onAfterOpen:l.default.func,onRequestClose:l.default.func,closeTimeoutMS:l.default.number,ariaHideApp:l.default.bool,shouldFocusAfterRender:l.default.bool,shouldCloseOnOverlayClick:l.default.bool,shouldReturnFocusAfterClose:l.default.bool,preventScroll:l.default.bool,parentSelector:l.default.func,aria:l.default.object,data:l.default.object,role:l.default.string,contentLabel:l.default.string,shouldCloseOnEsc:l.default.bool,overlayRef:l.default.func,contentRef:l.default.func,id:l.default.string,overlayElement:l.default.func,contentElement:l.default.func},k.defaultProps={isOpen:!1,portalClassName:v,bodyOpenClassName:b,role:"dialog",ariaHideApp:!0,closeTimeoutMS:0,shouldFocusAfterRender:!0,shouldCloseOnEsc:!0,shouldCloseOnOverlayClick:!0,shouldReturnFocusAfterClose:!0,preventScroll:!1,parentSelector:function(){return document.body},overlayElement:function(e,t){return a.default.createElement("div",e,t)},contentElement:function(e,t){return a.default.createElement("div",e,t)}},k.defaultStyles={overlay:{position:"fixed",top:0,left:0,right:0,bottom:0,backgroundColor:"rgba(255, 255, 255, 0.75)"},content:{position:"absolute",top:"40px",left:"40px",right:"40px",bottom:"40px",border:"1px solid #ccc",background:"#fff",overflow:"auto",WebkitOverflowScrolling:"touch",borderRadius:"4px",outline:"none",padding:"20px"}},(0,p.polyfill)(k),t.default=k},8747:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(7294),s=m(n(5697)),l=y(n(9685)),u=m(n(8338)),c=y(n(7149)),f=y(n(2409)),d=n(1112),p=m(d),h=m(n(9623));function y(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function m(e){return e&&e.__esModule?e:{default:e}}n(5063);var v={overlay:"ReactModal__Overlay",content:"ReactModal__Content"},b=0,g=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.setOverlayRef=function(e){n.overlay=e,n.props.overlayRef&&n.props.overlayRef(e)},n.setContentRef=function(e){n.content=e,n.props.contentRef&&n.props.contentRef(e)},n.afterClose=function(){var e=n.props,t=e.appElement,r=e.ariaHideApp,i=e.htmlOpenClassName,o=e.bodyOpenClassName;o&&f.remove(document.body,o),i&&f.remove(document.getElementsByTagName("html")[0],i),r&&b>0&&0==(b-=1)&&c.show(t),n.props.shouldFocusAfterRender&&(n.props.shouldReturnFocusAfterClose?(l.returnFocus(n.props.preventScroll),l.teardownScopedFocus()):l.popWithoutFocus()),n.props.onAfterClose&&n.props.onAfterClose(),h.default.deregister(n)},n.open=function(){n.beforeOpen(),n.state.afterOpen&&n.state.beforeClose?(clearTimeout(n.closeTimer),n.setState({beforeClose:!1})):(n.props.shouldFocusAfterRender&&(l.setupScopedFocus(n.node),l.markForFocusLater()),n.setState({isOpen:!0},(function(){n.setState({afterOpen:!0}),n.props.isOpen&&n.props.onAfterOpen&&n.props.onAfterOpen({overlayEl:n.overlay,contentEl:n.content})})))},n.close=function(){n.props.closeTimeoutMS>0?n.closeWithTimeout():n.closeWithoutTimeout()},n.focusContent=function(){return n.content&&!n.contentHasFocus()&&n.content.focus({preventScroll:!0})},n.closeWithTimeout=function(){var e=Date.now()+n.props.closeTimeoutMS;n.setState({beforeClose:!0,closesAt:e},(function(){n.closeTimer=setTimeout(n.closeWithoutTimeout,n.state.closesAt-Date.now())}))},n.closeWithoutTimeout=function(){n.setState({beforeClose:!1,isOpen:!1,afterOpen:!1,closesAt:null},n.afterClose)},n.handleKeyDown=function(e){9===e.keyCode&&(0,u.default)(n.content,e),n.props.shouldCloseOnEsc&&27===e.keyCode&&(e.stopPropagation(),n.requestClose(e))},n.handleOverlayOnClick=function(e){null===n.shouldClose&&(n.shouldClose=!0),n.shouldClose&&n.props.shouldCloseOnOverlayClick&&(n.ownerHandlesClose()?n.requestClose(e):n.focusContent()),n.shouldClose=null},n.handleContentOnMouseUp=function(){n.shouldClose=!1},n.handleOverlayOnMouseDown=function(e){n.props.shouldCloseOnOverlayClick||e.target!=n.overlay||e.preventDefault()},n.handleContentOnClick=function(){n.shouldClose=!1},n.handleContentOnMouseDown=function(){n.shouldClose=!1},n.requestClose=function(e){return n.ownerHandlesClose()&&n.props.onRequestClose(e)},n.ownerHandlesClose=function(){return n.props.onRequestClose},n.shouldBeClosed=function(){return!n.state.isOpen&&!n.state.beforeClose},n.contentHasFocus=function(){return document.activeElement===n.content||n.content.contains(document.activeElement)},n.buildClassName=function(e,t){var r="object"===(void 0===t?"undefined":i(t))?t:{base:v[e],afterOpen:v[e]+"--after-open",beforeClose:v[e]+"--before-close"},o=r.base;return n.state.afterOpen&&(o=o+" "+r.afterOpen),n.state.beforeClose&&(o=o+" "+r.beforeClose),"string"==typeof t&&t?o+" "+t:o},n.attributesFromObject=function(e,t){return Object.keys(t).reduce((function(n,r){return n[e+"-"+r]=t[r],n}),{})},n.state={afterOpen:!1,beforeClose:!1},n.shouldClose=null,n.moveFromContentToOverlay=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"componentDidMount",value:function(){this.props.isOpen&&this.open()}},{key:"componentDidUpdate",value:function(e,t){this.props.isOpen&&!e.isOpen?this.open():!this.props.isOpen&&e.isOpen&&this.close(),this.props.shouldFocusAfterRender&&this.state.isOpen&&!t.isOpen&&this.focusContent()}},{key:"componentWillUnmount",value:function(){this.state.isOpen&&this.afterClose(),clearTimeout(this.closeTimer)}},{key:"beforeOpen",value:function(){var e=this.props,t=e.appElement,n=e.ariaHideApp,r=e.htmlOpenClassName,i=e.bodyOpenClassName;i&&f.add(document.body,i),r&&f.add(document.getElementsByTagName("html")[0],r),n&&(b+=1,c.hide(t)),h.default.register(this)}},{key:"render",value:function(){var e=this.props,t=e.id,n=e.className,i=e.overlayClassName,o=e.defaultStyles,a=e.children,s=n?{}:o.content,l=i?{}:o.overlay;if(this.shouldBeClosed())return null;var u={ref:this.setOverlayRef,className:this.buildClassName("overlay",i),style:r({},l,this.props.style.overlay),onClick:this.handleOverlayOnClick,onMouseDown:this.handleOverlayOnMouseDown},c=r({id:t,ref:this.setContentRef,style:r({},s,this.props.style.content),className:this.buildClassName("content",n),tabIndex:"-1",onKeyDown:this.handleKeyDown,onMouseDown:this.handleContentOnMouseDown,onMouseUp:this.handleContentOnMouseUp,onClick:this.handleContentOnClick,role:this.props.role,"aria-label":this.props.contentLabel},this.attributesFromObject("aria",r({modal:!0},this.props.aria)),this.attributesFromObject("data",this.props.data||{}),{"data-testid":this.props.testId}),f=this.props.contentElement(c,a);return this.props.overlayElement(u,f)}}]),t}(a.Component);g.defaultProps={style:{overlay:{},content:{}},defaultStyles:{}},g.propTypes={isOpen:s.default.bool.isRequired,defaultStyles:s.default.shape({content:s.default.object,overlay:s.default.object}),style:s.default.shape({content:s.default.object,overlay:s.default.object}),className:s.default.oneOfType([s.default.string,s.default.object]),overlayClassName:s.default.oneOfType([s.default.string,s.default.object]),bodyOpenClassName:s.default.string,htmlOpenClassName:s.default.string,ariaHideApp:s.default.bool,appElement:s.default.oneOfType([s.default.instanceOf(p.default),s.default.instanceOf(d.SafeHTMLCollection),s.default.instanceOf(d.SafeNodeList),s.default.arrayOf(s.default.instanceOf(p.default))]),onAfterOpen:s.default.func,onAfterClose:s.default.func,onRequestClose:s.default.func,closeTimeoutMS:s.default.number,shouldFocusAfterRender:s.default.bool,shouldCloseOnOverlayClick:s.default.bool,shouldReturnFocusAfterClose:s.default.bool,preventScroll:s.default.bool,role:s.default.string,contentLabel:s.default.string,aria:s.default.object,data:s.default.object,children:s.default.node,shouldCloseOnEsc:s.default.bool,overlayRef:s.default.func,contentRef:s.default.func,id:s.default.string,overlayElement:s.default.func,contentElement:s.default.func,testId:s.default.string},t.default=g,e.exports=t.default},7149:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assertNodeList=s,t.setElement=function(e){var t=e;if("string"==typeof t&&o.canUseDOM){var n=document.querySelectorAll(t);s(n,t),t=n}return a=t||a},t.validateElement=l,t.hide=function(e){var t=!0,n=!1,r=void 0;try{for(var i,o=l(e)[Symbol.iterator]();!(t=(i=o.next()).done);t=!0)i.value.setAttribute("aria-hidden","true")}catch(e){n=!0,r=e}finally{try{!t&&o.return&&o.return()}finally{if(n)throw r}}},t.show=function(e){var t=!0,n=!1,r=void 0;try{for(var i,o=l(e)[Symbol.iterator]();!(t=(i=o.next()).done);t=!0)i.value.removeAttribute("aria-hidden")}catch(e){n=!0,r=e}finally{try{!t&&o.return&&o.return()}finally{if(n)throw r}}},t.documentNotReadyOrSSRTesting=function(){a=null},t.resetForTesting=function(){a=null};var r,i=(r=n(2473))&&r.__esModule?r:{default:r},o=n(1112),a=null;function s(e,t){if(!e||!e.length)throw new Error("react-modal: No elements were found for selector "+t+".")}function l(e){var t=e||a;return t?Array.isArray(t)||t instanceof HTMLCollection||t instanceof NodeList?t:[t]:((0,i.default)(!1,["react-modal: App element is not defined.","Please use `Modal.setAppElement(el)` or set `appElement={el}`.","This is needed so screen readers don't see main content","when modal is opened. It is not recommended, but you can opt-out","by setting `ariaHideApp={false}`."].join(" ")),[])}},5063:(e,t,n)=>{"use strict";var r,i=(r=n(9623))&&r.__esModule?r:{default:r},o=void 0,a=void 0,s=[];function l(){0!==s.length&&s[s.length-1].focusContent()}i.default.subscribe((function(e,t){o&&a||((o=document.createElement("div")).setAttribute("data-react-modal-body-trap",""),o.style.position="absolute",o.style.opacity="0",o.setAttribute("tabindex","0"),o.addEventListener("focus",l),(a=o.cloneNode()).addEventListener("focus",l)),(s=t).length>0?(document.body.firstChild!==o&&document.body.insertBefore(o,document.body.firstChild),document.body.lastChild!==a&&document.body.appendChild(a)):(o.parentElement&&o.parentElement.removeChild(o),a.parentElement&&a.parentElement.removeChild(a))}))},2409:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dumpClassLists=function(){};var n={},r={};t.add=function(e,t){return i=e.classList,o="html"==e.nodeName.toLowerCase()?n:r,void t.split(" ").forEach((function(e){!function(e,t){e[t]||(e[t]=0),e[t]+=1}(o,e),i.add(e)}));var i,o},t.remove=function(e,t){return i=e.classList,o="html"==e.nodeName.toLowerCase()?n:r,void t.split(" ").forEach((function(e){!function(e,t){e[t]&&(e[t]-=1)}(o,e),0===o[e]&&i.remove(e)}));var i,o}},9685:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.handleBlur=l,t.handleFocus=u,t.markForFocusLater=function(){o.push(document.activeElement)},t.returnFocus=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=null;try{return void(0!==o.length&&(t=o.pop()).focus({preventScroll:e}))}catch(e){console.warn(["You tried to return focus to",t,"but it is not in the DOM anymore"].join(" "))}},t.popWithoutFocus=function(){o.length>0&&o.pop()},t.setupScopedFocus=function(e){a=e,window.addEventListener?(window.addEventListener("blur",l,!1),document.addEventListener("focus",u,!0)):(window.attachEvent("onBlur",l),document.attachEvent("onFocus",u))},t.teardownScopedFocus=function(){a=null,window.addEventListener?(window.removeEventListener("blur",l),document.removeEventListener("focus",u)):(window.detachEvent("onBlur",l),document.detachEvent("onFocus",u))};var r,i=(r=n(7845))&&r.__esModule?r:{default:r},o=[],a=null,s=!1;function l(){s=!0}function u(){if(s){if(s=!1,!a)return;setTimeout((function(){a.contains(document.activeElement)||((0,i.default)(a)[0]||a).focus()}),0)}}},9623:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=new function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.register=function(e){-1===t.openInstances.indexOf(e)&&(t.openInstances.push(e),t.emit("register"))},this.deregister=function(e){var n=t.openInstances.indexOf(e);-1!==n&&(t.openInstances.splice(n,1),t.emit("deregister"))},this.subscribe=function(e){t.subscribers.push(e)},this.emit=function(e){t.subscribers.forEach((function(n){return n(e,t.openInstances.slice())}))},this.openInstances=[],this.subscribers=[]};t.default=n,e.exports=t.default},1112:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.canUseDOM=t.SafeNodeList=t.SafeHTMLCollection=void 0;var r,i=((r=n(8875))&&r.__esModule?r:{default:r}).default,o=i.canUseDOM?window.HTMLElement:{};t.SafeHTMLCollection=i.canUseDOM?window.HTMLCollection:{},t.SafeNodeList=i.canUseDOM?window.NodeList:{},t.canUseDOM=i.canUseDOM,t.default=o},8338:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=(0,i.default)(e);if(n.length){var r=void 0,o=t.shiftKey,a=n[0],s=n[n.length-1];if(e===document.activeElement){if(!o)return;r=s}if(s!==document.activeElement||o||(r=a),a===document.activeElement&&o&&(r=s),r)return t.preventDefault(),void r.focus();var l=/(\bChrome\b|\bSafari\b)\//.exec(navigator.userAgent);if(null!=l&&"Chrome"!=l[1]&&null==/\biPod\b|\biPad\b/g.exec(navigator.userAgent)){var u=n.indexOf(document.activeElement);if(u>-1&&(u+=o?-1:1),void 0===(r=n[u]))return t.preventDefault(),void(r=o?s:a).focus();t.preventDefault(),r.focus()}}else t.preventDefault()};var r,i=(r=n(7845))&&r.__esModule?r:{default:r};e.exports=t.default},7845:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return[].slice.call(e.querySelectorAll("*"),0).filter(i)};var n=/input|select|textarea|button|object/;function r(e){var t=e.offsetWidth<=0&&e.offsetHeight<=0;if(t&&!e.innerHTML)return!0;var n=window.getComputedStyle(e);return t?"visible"!==n.getPropertyValue("overflow")||e.scrollWidth<=0&&e.scrollHeight<=0:"none"==n.getPropertyValue("display")}function i(e){var t=e.getAttribute("tabindex");null===t&&(t=void 0);var i=isNaN(t);return(i||t>=0)&&function(e,t){var i=e.nodeName.toLowerCase();return(n.test(i)&&!e.disabled||"a"===i&&e.href||t)&&function(e){for(var t=e;t&&t!==document.body;){if(r(t))return!1;t=t.parentNode}return!0}(e)}(e,!i)}e.exports=t.default},3253:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=(r=n(9983))&&r.__esModule?r:{default:r};t.default=i.default,e.exports=t.default},6168:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>q});var r=n(7294),i=n(5697),o=n.n(i),a="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),s=new Uint8Array(16);function l(){if(!a)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return a(s)}for(var u=[],c=0;c<256;++c)u[c]=(c+256).toString(16).substr(1);const f=function(e,t,n){var r=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var i=(e=e||{}).random||(e.rng||l)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t)for(var o=0;o<16;++o)t[r+o]=i[o];return t||function(e,t){var n=t||0,r=u;return[r[e[n++]],r[e[n++]],r[e[n++]],r[e[n++]],"-",r[e[n++]],r[e[n++]],"-",r[e[n++]],r[e[n++]],"-",r[e[n++]],r[e[n++]],"-",r[e[n++]],r[e[n++]],r[e[n++]],r[e[n++]],r[e[n++]],r[e[n++]]].join("")}(i)};function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e,t,n){return t&&d(e.prototype,t),n&&d(e,n),e}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function y(){return(y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function v(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){h(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function g(e,t){return(g=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var _="__react_tooltip_hide_event",w="__react_tooltip_rebuild_event",k="__react_tooltip_show_event",x=function(e,t){var n;"function"==typeof window.CustomEvent?n=new window.CustomEvent(e,{detail:t}):(n=document.createEvent("Event")).initEvent(e,!1,!0,t),window.dispatchEvent(n)},C=function(e,t){var n=this.state.show,r=this.props.id,i=this.isCapture(t.currentTarget),o=t.currentTarget.getAttribute("currentItem");i||t.stopPropagation(),n&&"true"===o?e||this.hideTooltip(t):(t.currentTarget.setAttribute("currentItem","true"),E(t.currentTarget,this.getTargetArray(r)),this.showTooltip(t))},E=function(e,t){for(var n=0;n<t.length;n++)e!==t[n]?t[n].setAttribute("currentItem","false"):t[n].setAttribute("currentItem","true")},O={id:"9b69f92e-d3fe-498b-b1b4-c5e63a51b0cf",set:function(e,t,n){this.id in e?e[this.id][t]=n:Object.defineProperty(e,this.id,{configurable:!0,value:h({},t,n)})},get:function(e,t){var n=e[this.id];if(void 0!==n)return n[t]}},S=function(e,t,n){var r=t.respectEffect,i=void 0!==r&&r,o=t.customEvent,a=void 0!==o&&o,s=this.props.id,l=n.target.getAttribute("data-tip")||null,u=n.target.getAttribute("data-for")||null,c=n.target;if(!this.isCustomEvent(c)||a){var f=null==s&&null==u||u===s;if(null!=l&&(!i||"float"===this.getEffect(c))&&f){var d=function(e){var t={};for(var n in e)"function"==typeof e[n]?t[n]=e[n].bind(e):t[n]=e[n];return t}(n);d.currentTarget=c,e(d)}}},j=function(e,t){var n={};return e.forEach((function(e){var r=e.getAttribute(t);r&&r.split(" ").forEach((function(e){return n[e]=!0}))})),n},A=function(){return document.getElementsByTagName("body")[0]};function P(e,t,n,r,i,o,a){for(var s=T(n),l=s.width,u=s.height,c=T(t),f=c.width,d=c.height,p=R(e,t,o),h=p.mouseX,y=p.mouseY,m=L(o,f,d,l,u),v=I(a),b=v.extraOffsetX,g=v.extraOffsetY,_=window.innerWidth,w=window.innerHeight,k=N(n),x=k.parentTop,C=k.parentLeft,E=function(e){var t=m[e].l;return h+t+b},O=function(e){var t=m[e].t;return y+t+g},S=function(e){return function(e){return E(e)<0}(e)||function(e){return function(e){var t=m[e].r;return h+t+b}(e)>_}(e)||function(e){return O(e)<0}(e)||function(e){return function(e){var t=m[e].b;return y+t+g}(e)>w}(e)},j=function(e){return!S(e)},A=["top","bottom","left","right"],P=[],B=0;B<4;B++){var D=A[B];j(D)&&P.push(D)}var M,F=!1,z=i!==r;return j(i)&&z?(F=!0,M=i):P.length>0&&S(i)&&S(r)&&(F=!0,M=P[0]),F?{isNewState:!0,newState:{place:M}}:{isNewState:!1,position:{left:parseInt(E(r)-C,10),top:parseInt(O(r)-x,10)}}}var T=function(e){var t=e.getBoundingClientRect(),n=t.height,r=t.width;return{height:parseInt(n,10),width:parseInt(r,10)}},R=function(e,t,n){var r=t.getBoundingClientRect(),i=r.top,o=r.left,a=T(t),s=a.width,l=a.height;return"float"===n?{mouseX:e.clientX,mouseY:e.clientY}:{mouseX:o+s/2,mouseY:i+l/2}},L=function(e,t,n,r,i){var o,a,s,l;return"float"===e?(o={l:-r/2,r:r/2,t:-(i+3+2),b:-3},s={l:-r/2,r:r/2,t:15,b:i+3+2+12},l={l:-(r+3+2),r:-3,t:-i/2,b:i/2},a={l:3,r:r+3+2,t:-i/2,b:i/2}):"solid"===e&&(o={l:-r/2,r:r/2,t:-(n/2+i+2),b:-n/2},s={l:-r/2,r:r/2,t:n/2,b:n/2+i+2},l={l:-(r+t/2+2),r:-t/2,t:-i/2,b:i/2},a={l:t/2,r:r+t/2+2,t:-i/2,b:i/2}),{top:o,bottom:s,left:l,right:a}},I=function(e){var t=0,n=0;for(var r in"[object String]"===Object.prototype.toString.apply(e)&&(e=JSON.parse(e.toString().replace(/'/g,'"'))),e)"top"===r?n-=parseInt(e[r],10):"bottom"===r?n+=parseInt(e[r],10):"left"===r?t-=parseInt(e[r],10):"right"===r&&(t+=parseInt(e[r],10));return{extraOffsetX:t,extraOffsetY:n}},N=function(e){for(var t=e;t;){var n=window.getComputedStyle(t);if("none"!==n.getPropertyValue("transform")||"transform"===n.getPropertyValue("will-change"))break;t=t.parentElement}return{parentTop:t&&t.getBoundingClientRect().top||0,parentLeft:t&&t.getBoundingClientRect().left||0}};function B(e,t,n,i){if(t)return t;if(null!=n)return n;if(null===n)return null;var o=/<br\s*\/?>/;return i&&"false"!==i&&o.test(e)?e.split(o).map((function(e,t){return r.createElement("span",{key:t,className:"multi-line"},e)})):e}function D(e){var t={};return Object.keys(e).filter((function(e){return/(^aria-\w+$|^role$)/.test(e)})).forEach((function(n){t[n]=e[n]})),t}function M(e){var t=e.length;return e.hasOwnProperty?Array.prototype.slice.call(e):new Array(t).fill().map((function(t){return e[t]}))}var F,z,V,H,U={dark:{text:"#fff",background:"#222",border:"transparent",arrow:"#222"},success:{text:"#fff",background:"#8DC572",border:"transparent",arrow:"#8DC572"},warning:{text:"#fff",background:"#F0AD4E",border:"transparent",arrow:"#F0AD4E"},error:{text:"#fff",background:"#BE6464",border:"transparent",arrow:"#BE6464"},info:{text:"#fff",background:"#337AB7",border:"transparent",arrow:"#337AB7"},light:{text:"#222",background:"#fff",border:"transparent",arrow:"#fff"}};const q=function(e){e.hide=function(e){x(_,{target:e})},e.rebuild=function(){x(w)},e.show=function(e){x(k,{target:e})},e.prototype.globalRebuild=function(){this.mount&&(this.unbindListener(),this.bindListener())},e.prototype.globalShow=function(e){if(this.mount){var t=!!(e&&e.detail&&e.detail.target);this.showTooltip({currentTarget:t&&e.detail.target},!0)}},e.prototype.globalHide=function(e){if(this.mount){var t=!!(e&&e.detail&&e.detail.target);this.hideTooltip({currentTarget:t&&e.detail.target},t)}}}(F=function(e){e.prototype.bindWindowEvents=function(e){window.removeEventListener(_,this.globalHide),window.addEventListener(_,this.globalHide,!1),window.removeEventListener(w,this.globalRebuild),window.addEventListener(w,this.globalRebuild,!1),window.removeEventListener(k,this.globalShow),window.addEventListener(k,this.globalShow,!1),e&&(window.removeEventListener("resize",this.onWindowResize),window.addEventListener("resize",this.onWindowResize,!1))},e.prototype.unbindWindowEvents=function(){window.removeEventListener(_,this.globalHide),window.removeEventListener(w,this.globalRebuild),window.removeEventListener(k,this.globalShow),window.removeEventListener("resize",this.onWindowResize)},e.prototype.onWindowResize=function(){this.mount&&this.hideTooltip()}}(F=function(e){e.prototype.isCustomEvent=function(e){return this.state.event||!!e.getAttribute("data-event")},e.prototype.customBindListener=function(e){var t=this,n=this.state,r=n.event,i=n.eventOff,o=e.getAttribute("data-event")||r,a=e.getAttribute("data-event-off")||i;o.split(" ").forEach((function(n){e.removeEventListener(n,O.get(e,n));var r=C.bind(t,a);O.set(e,n,r),e.addEventListener(n,r,!1)})),a&&a.split(" ").forEach((function(n){e.removeEventListener(n,t.hideTooltip),e.addEventListener(n,t.hideTooltip,!1)}))},e.prototype.customUnbindListener=function(e){var t=this.state,n=t.event,r=t.eventOff,i=n||e.getAttribute("data-event"),o=r||e.getAttribute("data-event-off");e.removeEventListener(i,O.get(e,n)),o&&e.removeEventListener(o,this.hideTooltip)}}(F=function(e){e.prototype.isCapture=function(e){return e&&"true"===e.getAttribute("data-iscapture")||this.props.isCapture||!1}}(F=function(e){e.prototype.getEffect=function(e){return e.getAttribute("data-effect")||this.props.effect||"float"}}(F=function(e){e.prototype.isBodyMode=function(){return!!this.props.bodyMode},e.prototype.bindBodyListener=function(e){var t=this,n=this.state,r=n.event,i=n.eventOff,o=n.possibleCustomEvents,a=n.possibleCustomEventsOff,s=A(),l=j(e,"data-event"),u=j(e,"data-event-off");null!=r&&(l[r]=!0),null!=i&&(u[i]=!0),o.split(" ").forEach((function(e){return l[e]=!0})),a.split(" ").forEach((function(e){return u[e]=!0})),this.unbindBodyListener(s);var c=this.bodyModeListeners={};for(var f in null==r&&(c.mouseover=S.bind(this,this.showTooltip,{}),c.mousemove=S.bind(this,this.updateTooltip,{respectEffect:!0}),c.mouseout=S.bind(this,this.hideTooltip,{})),l)c[f]=S.bind(this,(function(e){var n=e.currentTarget.getAttribute("data-event-off")||i;C.call(t,n,e)}),{customEvent:!0});for(var d in u)c[d]=S.bind(this,this.hideTooltip,{customEvent:!0});for(var p in c)s.addEventListener(p,c[p])},e.prototype.unbindBodyListener=function(e){e=e||A();var t=this.bodyModeListeners;for(var n in t)e.removeEventListener(n,t[n])}}((V=z=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}(this,b(t).call(this,e))).state={uuid:e.uuid||"t"+f(),place:e.place||"top",desiredPlace:e.place||"top",type:"dark",effect:"float",show:!1,border:!1,customColors:{},offset:{},extraClass:"",html:!1,delayHide:0,delayShow:0,event:e.event||null,eventOff:e.eventOff||null,currentEvent:null,currentTarget:null,ariaProps:D(e),isEmptyTip:!1,disable:!1,possibleCustomEvents:e.possibleCustomEvents||"",possibleCustomEventsOff:e.possibleCustomEventsOff||"",originTooltip:null,isMultiline:!1},n.bind(["showTooltip","updateTooltip","hideTooltip","hideTooltipOnScroll","getTooltipContent","globalRebuild","globalShow","globalHide","onWindowResize","mouseOnToolTip"]),n.mount=!0,n.delayShowLoop=null,n.delayHideLoop=null,n.delayReshow=null,n.intervalUpdateContent=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&g(e,t)}(t,e),p(t,null,[{key:"propTypes",get:function(){return{uuid:o().string,children:o().any,place:o().string,type:o().string,effect:o().string,offset:o().object,multiline:o().bool,border:o().bool,textColor:o().string,backgroundColor:o().string,borderColor:o().string,arrowColor:o().string,insecure:o().bool,class:o().string,className:o().string,id:o().string,html:o().bool,delayHide:o().number,delayUpdate:o().number,delayShow:o().number,event:o().string,eventOff:o().string,isCapture:o().bool,globalEventOff:o().string,getContent:o().any,afterShow:o().func,afterHide:o().func,overridePosition:o().func,disable:o().bool,scrollHide:o().bool,resizeHide:o().bool,wrapper:o().string,bodyMode:o().bool,possibleCustomEvents:o().string,possibleCustomEventsOff:o().string,clickable:o().bool}}}]),p(t,[{key:"bind",value:function(e){var t=this;e.forEach((function(e){t[e]=t[e].bind(t)}))}},{key:"componentDidMount",value:function(){var e=this.props,t=(e.insecure,e.resizeHide);this.bindListener(),this.bindWindowEvents(t),this.injectStyles()}},{key:"componentWillUnmount",value:function(){this.mount=!1,this.clearTimer(),this.unbindListener(),this.removeScrollListener(this.state.currentTarget),this.unbindWindowEvents()}},{key:"injectStyles",value:function(){var e=this.tooltipRef;if(e){for(var t,n=e.parentNode;n.parentNode;)n=n.parentNode;switch(n.constructor.name){case"Document":case"HTMLDocument":t=n.head;break;case"ShadowRoot":default:t=n}if(!t.querySelector("style[data-react-tooltip]")){var r=document.createElement("style");r.textContent='.__react_component_tooltip {\n  border-radius: 3px;\n  display: inline-block;\n  font-size: 13px;\n  left: -999em;\n  opacity: 0;\n  padding: 8px 21px;\n  position: fixed;\n  pointer-events: none;\n  transition: opacity 0.3s ease-out;\n  top: -999em;\n  visibility: hidden;\n  z-index: 999;\n}\n.__react_component_tooltip.allow_hover, .__react_component_tooltip.allow_click {\n  pointer-events: auto;\n}\n.__react_component_tooltip::before, .__react_component_tooltip::after {\n  content: "";\n  width: 0;\n  height: 0;\n  position: absolute;\n}\n.__react_component_tooltip.show {\n  opacity: 0.9;\n  margin-top: 0;\n  margin-left: 0;\n  visibility: visible;\n}\n.__react_component_tooltip.place-top::before {\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  bottom: -8px;\n  left: 50%;\n  margin-left: -10px;\n}\n.__react_component_tooltip.place-bottom::before {\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  top: -8px;\n  left: 50%;\n  margin-left: -10px;\n}\n.__react_component_tooltip.place-left::before {\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  right: -8px;\n  top: 50%;\n  margin-top: -5px;\n}\n.__react_component_tooltip.place-right::before {\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  left: -8px;\n  top: 50%;\n  margin-top: -5px;\n}\n.__react_component_tooltip .multi-line {\n  display: block;\n  padding: 2px 0;\n  text-align: center;\n}',r.setAttribute("data-react-tooltip","true"),t.appendChild(r)}}}},{key:"mouseOnToolTip",value:function(){return!(!this.state.show||!this.tooltipRef)&&(this.tooltipRef.matches||(this.tooltipRef.msMatchesSelector?this.tooltipRef.matches=this.tooltipRef.msMatchesSelector:this.tooltipRef.matches=this.tooltipRef.mozMatchesSelector),this.tooltipRef.matches(":hover"))}},{key:"getTargetArray",value:function(e){var t,n=[];if(e){var r=e.replace(/\\/g,"\\\\").replace(/"/g,'\\"');t='[data-tip][data-for="'.concat(r,'"]')}else t="[data-tip]:not([data-for])";return M(document.getElementsByTagName("*")).filter((function(e){return e.shadowRoot})).forEach((function(e){n=n.concat(M(e.shadowRoot.querySelectorAll(t)))})),n.concat(M(document.querySelectorAll(t)))}},{key:"bindListener",value:function(){var e=this,t=this.props,n=t.id,r=t.globalEventOff,i=t.isCapture,o=this.getTargetArray(n);o.forEach((function(t){null===t.getAttribute("currentItem")&&t.setAttribute("currentItem","false"),e.unbindBasicListener(t),e.isCustomEvent(t)&&e.customUnbindListener(t)})),this.isBodyMode()?this.bindBodyListener(o):o.forEach((function(t){var n=e.isCapture(t),r=e.getEffect(t);e.isCustomEvent(t)?e.customBindListener(t):(t.addEventListener("mouseenter",e.showTooltip,n),t.addEventListener("focus",e.showTooltip,n),"float"===r&&t.addEventListener("mousemove",e.updateTooltip,n),t.addEventListener("mouseleave",e.hideTooltip,n),t.addEventListener("blur",e.showTooltip,n))})),r&&(window.removeEventListener(r,this.hideTooltip),window.addEventListener(r,this.hideTooltip,i)),this.bindRemovalTracker()}},{key:"unbindListener",value:function(){var e=this,t=this.props,n=t.id,r=t.globalEventOff;this.isBodyMode()?this.unbindBodyListener():this.getTargetArray(n).forEach((function(t){e.unbindBasicListener(t),e.isCustomEvent(t)&&e.customUnbindListener(t)})),r&&window.removeEventListener(r,this.hideTooltip),this.unbindRemovalTracker()}},{key:"unbindBasicListener",value:function(e){var t=this.isCapture(e);e.removeEventListener("mouseenter",this.showTooltip,t),e.removeEventListener("mousemove",this.updateTooltip,t),e.removeEventListener("mouseleave",this.hideTooltip,t)}},{key:"getTooltipContent",value:function(){var e,t=this.props,n=t.getContent,r=t.children;return n&&(e=Array.isArray(n)?n[0]&&n[0](this.state.originTooltip):n(this.state.originTooltip)),B(this.state.originTooltip,r,e,this.state.isMultiline)}},{key:"isEmptyTip",value:function(e){return"string"==typeof e&&""===e||null===e}},{key:"showTooltip",value:function(e,t){if(this.tooltipRef){if(t&&!this.getTargetArray(this.props.id).some((function(t){return t===e.currentTarget})))return;var n=this.props,r=n.multiline,i=n.getContent,o=e.currentTarget.getAttribute("data-tip"),a=e.currentTarget.getAttribute("data-multiline")||r||!1,s=e instanceof window.FocusEvent||t,l=!0;e.currentTarget.getAttribute("data-scroll-hide")?l="true"===e.currentTarget.getAttribute("data-scroll-hide"):null!=this.props.scrollHide&&(l=this.props.scrollHide),e&&e.currentTarget&&e.currentTarget.setAttribute&&e.currentTarget.setAttribute("aria-describedby",this.state.uuid);var u=e.currentTarget.getAttribute("data-place")||this.props.place||"top",c=s?"solid":this.getEffect(e.currentTarget),f=e.currentTarget.getAttribute("data-offset")||this.props.offset||{},d=P(e,e.currentTarget,this.tooltipRef,u,u,c,f);d.position&&this.props.overridePosition&&(d.position=this.props.overridePosition(d.position,e,e.currentTarget,this.tooltipRef,u,u,c,f));var p=d.isNewState?d.newState.place:u;this.clearTimer();var h=e.currentTarget,y=this.state.show?h.getAttribute("data-delay-update")||this.props.delayUpdate:0,m=this,v=function(){m.setState({originTooltip:o,isMultiline:a,desiredPlace:u,place:p,type:h.getAttribute("data-type")||m.props.type||"dark",customColors:{text:h.getAttribute("data-text-color")||m.props.textColor||null,background:h.getAttribute("data-background-color")||m.props.backgroundColor||null,border:h.getAttribute("data-border-color")||m.props.borderColor||null,arrow:h.getAttribute("data-arrow-color")||m.props.arrowColor||null},effect:c,offset:f,html:(h.getAttribute("data-html")?"true"===h.getAttribute("data-html"):m.props.html)||!1,delayShow:h.getAttribute("data-delay-show")||m.props.delayShow||0,delayHide:h.getAttribute("data-delay-hide")||m.props.delayHide||0,delayUpdate:h.getAttribute("data-delay-update")||m.props.delayUpdate||0,border:(h.getAttribute("data-border")?"true"===h.getAttribute("data-border"):m.props.border)||!1,extraClass:h.getAttribute("data-class")||m.props.class||m.props.className||"",disable:(h.getAttribute("data-tip-disable")?"true"===h.getAttribute("data-tip-disable"):m.props.disable)||!1,currentTarget:h},(function(){l&&m.addScrollListener(m.state.currentTarget),m.updateTooltip(e),i&&Array.isArray(i)&&(m.intervalUpdateContent=setInterval((function(){if(m.mount){var e=m.props.getContent,t=B(o,"",e[0](),a),n=m.isEmptyTip(t);m.setState({isEmptyTip:n}),m.updatePosition()}}),i[1]))}))};y?this.delayReshow=setTimeout(v,y):v()}}},{key:"updateTooltip",value:function(e){var t=this,n=this.state,r=n.delayShow,i=n.disable,o=this.props.afterShow,a=this.getTooltipContent(),s=e.currentTarget||e.target;if(!this.mouseOnToolTip()&&!this.isEmptyTip(a)&&!i){var l=this.state.show?0:parseInt(r,10),u=function(){if(Array.isArray(a)&&a.length>0||a){var n=!t.state.show;t.setState({currentEvent:e,currentTarget:s,show:!0},(function(){t.updatePosition(),n&&o&&o(e)}))}};clearTimeout(this.delayShowLoop),l?this.delayShowLoop=setTimeout(u,l):u()}}},{key:"listenForTooltipExit",value:function(){this.state.show&&this.tooltipRef&&this.tooltipRef.addEventListener("mouseleave",this.hideTooltip)}},{key:"removeListenerForTooltipExit",value:function(){this.state.show&&this.tooltipRef&&this.tooltipRef.removeEventListener("mouseleave",this.hideTooltip)}},{key:"hideTooltip",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{isScroll:!1},i=this.state.disable,o=r.isScroll,a=o?0:this.state.delayHide,s=this.props.afterHide,l=this.getTooltipContent();if(this.mount&&!this.isEmptyTip(l)&&!i){if(t){var u=this.getTargetArray(this.props.id),c=u.some((function(t){return t===e.currentTarget}));if(!c||!this.state.show)return}e&&e.currentTarget&&e.currentTarget.removeAttribute&&e.currentTarget.removeAttribute("aria-describedby");var f=function(){var t=n.state.show;n.mouseOnToolTip()?n.listenForTooltipExit():(n.removeListenerForTooltipExit(),n.setState({show:!1},(function(){n.removeScrollListener(n.state.currentTarget),t&&s&&s(e)})))};this.clearTimer(),a?this.delayHideLoop=setTimeout(f,parseInt(a,10)):f()}}},{key:"hideTooltipOnScroll",value:function(e,t){this.hideTooltip(e,t,{isScroll:!0})}},{key:"addScrollListener",value:function(e){var t=this.isCapture(e);window.addEventListener("scroll",this.hideTooltipOnScroll,t)}},{key:"removeScrollListener",value:function(e){var t=this.isCapture(e);window.removeEventListener("scroll",this.hideTooltipOnScroll,t)}},{key:"updatePosition",value:function(){var e=this,t=this.state,n=t.currentEvent,r=t.currentTarget,i=t.place,o=t.desiredPlace,a=t.effect,s=t.offset,l=this.tooltipRef,u=P(n,r,l,i,o,a,s);if(u.position&&this.props.overridePosition&&(u.position=this.props.overridePosition(u.position,n,r,l,i,o,a,s)),u.isNewState)return this.setState(u.newState,(function(){e.updatePosition()}));l.style.left=u.position.left+"px",l.style.top=u.position.top+"px"}},{key:"clearTimer",value:function(){clearTimeout(this.delayShowLoop),clearTimeout(this.delayHideLoop),clearTimeout(this.delayReshow),clearInterval(this.intervalUpdateContent)}},{key:"hasCustomColors",value:function(){var e=this;return Boolean(Object.keys(this.state.customColors).find((function(t){return"border"!==t&&e.state.customColors[t]}))||this.state.border&&this.state.customColors.border)}},{key:"render",value:function(){var e=this,n=this.state,i=n.extraClass,o=n.html,a=n.ariaProps,s=n.disable,l=n.uuid,u=this.getTooltipContent(),c=this.isEmptyTip(u),f=function(e,t,n,r){return function(e,t){var n=t.text,r=t.background,i=t.border,o=t.arrow;return"\n  \t.".concat(e," {\n\t    color: ").concat(n,";\n\t    background: ").concat(r,";\n\t    border: 1px solid ").concat(i,";\n  \t}\n\n  \t.").concat(e,".place-top {\n        margin-top: -10px;\n    }\n    .").concat(e,".place-top::before {\n        border-top: 8px solid ").concat(i,";\n    }\n    .").concat(e,".place-top::after {\n        border-left: 8px solid transparent;\n        border-right: 8px solid transparent;\n        bottom: -6px;\n        left: 50%;\n        margin-left: -8px;\n        border-top-color: ").concat(o,";\n        border-top-style: solid;\n        border-top-width: 6px;\n    }\n\n    .").concat(e,".place-bottom {\n        margin-top: 10px;\n    }\n    .").concat(e,".place-bottom::before {\n        border-bottom: 8px solid ").concat(i,";\n    }\n    .").concat(e,".place-bottom::after {\n        border-left: 8px solid transparent;\n        border-right: 8px solid transparent;\n        top: -6px;\n        left: 50%;\n        margin-left: -8px;\n        border-bottom-color: ").concat(o,";\n        border-bottom-style: solid;\n        border-bottom-width: 6px;\n    }\n\n    .").concat(e,".place-left {\n        margin-left: -10px;\n    }\n    .").concat(e,".place-left::before {\n        border-left: 8px solid ").concat(i,";\n    }\n    .").concat(e,".place-left::after {\n        border-top: 5px solid transparent;\n        border-bottom: 5px solid transparent;\n        right: -6px;\n        top: 50%;\n        margin-top: -4px;\n        border-left-color: ").concat(o,";\n        border-left-style: solid;\n        border-left-width: 6px;\n    }\n\n    .").concat(e,".place-right {\n        margin-left: 10px;\n    }\n    .").concat(e,".place-right::before {\n        border-right: 8px solid ").concat(i,";\n    }\n    .").concat(e,".place-right::after {\n        border-top: 5px solid transparent;\n        border-bottom: 5px solid transparent;\n        left: -6px;\n        top: 50%;\n        margin-top: -4px;\n        border-right-color: ").concat(o,";\n        border-right-style: solid;\n        border-right-width: 6px;\n    }\n  ")}(e,function(e,t,n){var r=e.text,i=e.background,o=e.border,a=e.arrow?e.arrow:e.background,s=function(e){return U[e]?v({},U[e]):void 0}(t);return r&&(s.text=r),i&&(s.background=i),n&&(s.border=o||("light"===t?"black":"white")),a&&(s.arrow=a),s}(t,n,r))}(this.state.uuid,this.state.customColors,this.state.type,this.state.border),d="__react_component_tooltip"+" ".concat(this.state.uuid)+(!this.state.show||s||c?"":" show")+(this.state.border?" border":"")+" place-".concat(this.state.place)+" type-".concat(this.hasCustomColors()?"custom":this.state.type)+(this.props.delayUpdate?" allow_hover":"")+(this.props.clickable?" allow_click":""),p=this.props.wrapper;t.supportedWrappers.indexOf(p)<0&&(p=t.defaultProps.wrapper);var h=[d,i].filter(Boolean).join(" ");if(o){var m="".concat(u,"\n<style>").concat(f,"</style>");return r.createElement(p,y({className:"".concat(h),id:this.props.id||l,ref:function(t){return e.tooltipRef=t}},a,{"data-id":"tooltip",dangerouslySetInnerHTML:{__html:m}}))}return r.createElement(p,y({className:"".concat(h),id:this.props.id||l},a,{ref:function(t){return e.tooltipRef=t},"data-id":"tooltip"}),r.createElement("style",{dangerouslySetInnerHTML:{__html:f}}),u)}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=t.ariaProps,r=D(e);return Object.keys(r).some((function(e){return r[e]!==n[e]}))?v({},t,{ariaProps:r}):null}}]),t}(r.Component),h(z,"defaultProps",{insecure:!0,resizeHide:!0,wrapper:"div",clickable:!1}),h(z,"supportedWrappers",["div","span"]),h(z,"displayName","ReactTooltip"),(H=F=V).prototype.bindRemovalTracker=function(){var e=this,t=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver;if(null!=t){var n=new t((function(t){for(var n=0;n<t.length;n++)for(var r=t[n],i=0;i<r.removedNodes.length;i++)if(r.removedNodes[i]===e.state.currentTarget)return void e.hideTooltip()}));n.observe(window.document,{childList:!0,subtree:!0}),this.removalTracker=n}},F=void(H.prototype.unbindRemovalTracker=function(){this.removalTracker&&(this.removalTracker.disconnect(),this.removalTracker=null)})||F))||F)||F)||F)||F)||F)||F},2408:(e,t,n)=>{"use strict";var r=n(7418),i=60103,o=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,s=60110,l=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;i=f("react.element"),o=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),s=f("react.context"),l=f("react.forward_ref"),t.Suspense=f("react.suspense"),u=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y={};function m(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||h}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||h}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=m.prototype;var g=b.prototype=new v;g.constructor=b,r(g,m.prototype),g.isPureReactComponent=!0;var _={current:null},w=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,n){var r,o={},a=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)w.call(t,r)&&!k.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:s,props:o,_owner:_.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var E=/\/+/g;function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function S(e,t,n,r,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case i:case o:l=!0}}if(l)return a=a(l=e),e=""===r?"."+O(l,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(E,"$&/")+"/"),S(a,t,n,"",(function(e){return e}))):null!=a&&(C(a)&&(a=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(E,"$&/")+"/")+e)),t.push(a)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+O(s=e[u],u);l+=S(s,t,n,c,a)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),u=0;!(s=e.next()).done;)l+=S(s=s.value,t,n,c=r+O(s,u++),a);else if("object"===s)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function j(e,t,n){if(null==e)return e;var r=[],i=0;return S(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function A(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var P={current:null};function T(){var e=P.current;if(null===e)throw Error(p(321));return e}var R={ReactCurrentDispatcher:P,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:_,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:j,forEach:function(e,t,n){j(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return j(e,(function(){t++})),t},toArray:function(e){return j(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error(p(143));return e}},t.Component=m,t.PureComponent=b,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var o=r({},e.props),a=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=_.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)w.call(t,c)&&!k.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){u=Array(c);for(var f=0;f<c;f++)u[f]=arguments[f+2];o.children=u}return{$$typeof:i,type:e.type,key:a,ref:s,props:o,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:A}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return T().useCallback(e,t)},t.useContext=function(e,t){return T().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return T().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return T().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return T().useLayoutEffect(e,t)},t.useMemo=function(e,t){return T().useMemo(e,t)},t.useReducer=function(e,t,n){return T().useReducer(e,t,n)},t.useRef=function(e){return T().useRef(e)},t.useState=function(e){return T().useState(e)},t.version="17.0.2"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},53:(e,t)=>{"use strict";var n,r,i,o;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,f=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},i=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},o=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var y=!1,m=null,v=-1,b=5,g=0;t.unstable_shouldYield=function(){return t.unstable_now()>=g},o=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,w=_.port2;_.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();g=e+b;try{m(!0,e)?w.postMessage(null):(y=!1,m=null)}catch(e){throw w.postMessage(null),e}}else y=!1},n=function(e){m=e,y||(y=!0,w.postMessage(null))},r=function(e,n){v=d((function(){e(t.unstable_now())}),n)},i=function(){p(v),v=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<E(i,t)))break e;e[r]=t,e[n]=i,n=r}}function x(e){return void 0===(e=e[0])?null:e}function C(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],s=o+1,l=e[s];if(void 0!==a&&0>E(a,n))void 0!==l&&0>E(l,a)?(e[r]=l,e[s]=n,r=s):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==l&&0>E(l,n)))break e;e[r]=l,e[s]=n,r=s}}}return t}return null}function E(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var O=[],S=[],j=1,A=null,P=3,T=!1,R=!1,L=!1;function I(e){for(var t=x(S);null!==t;){if(null===t.callback)C(S);else{if(!(t.startTime<=e))break;C(S),t.sortIndex=t.expirationTime,k(O,t)}t=x(S)}}function N(e){if(L=!1,I(e),!R)if(null!==x(O))R=!0,n(B);else{var t=x(S);null!==t&&r(N,t.startTime-e)}}function B(e,n){R=!1,L&&(L=!1,i()),T=!0;var o=P;try{for(I(n),A=x(O);null!==A&&(!(A.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=A.callback;if("function"==typeof a){A.callback=null,P=A.priorityLevel;var s=a(A.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?A.callback=s:A===x(O)&&C(O),I(n)}else C(O);A=x(O)}if(null!==A)var l=!0;else{var u=x(S);null!==u&&r(N,u.startTime-n),l=!1}return l}finally{A=null,P=o,T=!1}}var D=o;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){R||T||(R=!0,n(B))},t.unstable_getCurrentPriorityLevel=function(){return P},t.unstable_getFirstCallbackNode=function(){return x(O)},t.unstable_next=function(e){switch(P){case 1:case 2:case 3:var t=3;break;default:t=P}var n=P;P=t;try{return e()}finally{P=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=D,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=P;P=e;try{return t()}finally{P=n}},t.unstable_scheduleCallback=function(e,o,a){var s=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:j++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>s?(e.sortIndex=a,k(S,e),null===x(O)&&e===x(S)&&(L?i():L=!0,r(N,a-s))):(e.sortIndex=l,k(O,e),R||T||(R=!0,n(B))),e},t.unstable_wrapCallback=function(e){var t=P;return function(){var n=P;P=t;try{return e.apply(this,arguments)}finally{P=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},3066:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(3379),i=n.n(r),o=n(244),a=i()(o.default,{insert:"head",singleton:!1});if(!o.default.locals||e.hot.invalidate){var s=o.default.locals;e.hot.accept(244,(t=>{o=n(244),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if(e[r]!==t[r])return!1;for(r in t)if(!e[r])return!1;return!0}(s,o.default.locals)?(s=o.default.locals,a(o.default)):e.hot.invalidate()}))}e.hot.dispose((function(){a()}));const l=o.default.locals||{}},8445:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(3379),i=n.n(r),o=n(1487),a=i()(o.default,{insert:"head",singleton:!1});if(!o.default.locals||e.hot.invalidate){var s=o.default.locals;e.hot.accept(1487,(t=>{o=n(1487),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if(e[r]!==t[r])return!1;for(r in t)if(!e[r])return!1;return!0}(s,o.default.locals)?(s=o.default.locals,a(o.default)):e.hot.invalidate()}))}e.hot.dispose((function(){a()}));const l=o.default.locals||{}},3379:(e,t,n)=>{"use strict";var r,i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function a(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],i=0;i<e.length;i++){var s=e[i],l=t.base?s[0]+t.base:s[0],u=n[l]||0,c="".concat(l," ").concat(u);n[l]=u+1;var f=a(c),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==f?(o[f].references++,o[f].updater(d)):o.push({identifier:c,updater:y(d,t),references:1}),r.push(c)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var u,c=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function f(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=c(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function d(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,h=0;function y(e,t){var n,r,i;if(t.singleton){var o=h++;n=p||(p=l(t)),r=f.bind(null,n,o,!1),i=f.bind(null,n,o,!0)}else n=l(t),r=d.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=a(n[r]);o[i].references--}for(var l=s(e,t),u=0;u<n.length;u++){var c=a(n[u]);0===o[c].references&&(o[c].updater(),o.splice(c,1))}n=l}}}},8957:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.App=void 0;const r=n(7294),i=n(7294),o=n(6987),a=n(9881),s=n(4184),l=n(8317),u=n(5843);t.App=function(){const[e,t]=i.useState(localStorage.getItem("screen")||"texts"),n=i.useCallback((e=>{localStorage.setItem("screen",e),t(e)}),[]);return r.createElement("div",null,r.createElement("div",null,function(e){switch(e){case"heatmap":return r.createElement(o.KeyboardHeatmap,null);case"analysis":return r.createElement(a.AnalysisScreen,null);case"typing":return r.createElement(u.TypingScreen,null);case"texts":return r.createElement(l.TextsScreen,null)}}(e)),r.createElement("hr",null),r.createElement("div",{className:"screen-switch-controls"},r.createElement("button",{className:s.default({active:"heatmap"==e}),onClick:()=>n("heatmap")},"Key analysis"),r.createElement("button",{className:s.default({active:"analysis"==e}),onClick:()=>n("analysis")},"Text analysis"),r.createElement("button",{className:s.default({active:"typing"==e}),onClick:()=>n("typing")},"Typing"),r.createElement("button",{className:s.default({active:"texts"==e}),onClick:()=>n("texts")},"Texts")))}},7916:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Loading=void 0;const r=n(7294);t.Loading=function(){return r.createElement("div",{className:"loading loading-lg p-centered"})}},7392:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Progress=void 0;const r=n(7294),i=n(6486);t.Progress=function(e){const{value:t,max:n,colorOverride:o}=e;let a=Math.min(i.floor(t/n*100),100);return r.createElement("div",null,r.createElement("div",{style:{width:"100%",height:"2px",background:"#cccccc88"}}),r.createElement("div",{style:{width:`${a}%`,height:"2px",background:o||"green",marginTop:"-2px",transition:"all",transitionDuration:"100ms"}}))}},3145:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseDbService=void 0;const r=n(4842);t.BaseDbService=class{async getDb(){const e=await r.dbPromise;return await this.rqPromise,e}async doRq(e){const t=await this.getDb();return this.rqPromise=e(t),this.rqPromise}}},4842:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dbPromise=t.inputModel=t.defaultPageThreshold=t.defaultPatternsModel=void 0;const r=n(3029),i=n(8404);t.defaultPatternsModel={ignorePatterns:["^ {2,}","(?<= ) ","((?<!\\n)\\n(?!\\n))|((?<=\\n)\\n)"],replacementPatterns:[{search:"(?<!\\n)\\n(?!\\n)",replace:" \\n"}],breakPatterns:["[?!.]"]},t.defaultPageThreshold=300,t.inputModel=e=>e,t.dbPromise=async function(){const e=await r.openDB("keypresses",12,{async upgrade(e,t,n,r){let i=e.objectStoreNames.contains("keypresses")?r.objectStore("keypresses"):e.createObjectStore("keypresses",{keyPath:"id",autoIncrement:!0});i.indexNames.contains("by-sequenceId")||i.createIndex("by-sequenceId","sequenceId",{unique:!1}),e.objectStoreNames.contains("sequences")||e.createObjectStore("sequences",{keyPath:"id"});const o=e.objectStoreNames.contains("texts")?r.objectStore("texts"):e.createObjectStore("texts",{keyPath:"id",autoIncrement:!0});o.indexNames.contains("by-name")||o.createIndex("by-name","name",{unique:!1});let a=await o.getAll();a=a.map((e=>({...e,patterns:{...e.patterns,replacementPatterns:e.patterns.replacementPatterns.map((([e,t])=>({search:e,replace:t})))}}))),o.clear(),await Promise.all(a.map((e=>o.put(e))))}});return await async function(e){const r=await e.getAllKeys("texts");if(!r.includes(1))try{let o=await fetch(n(583).Z).then((e=>e.text()));await e.put("texts",{id:1,name:"Alice",text:o,base:!0,patterns:{...t.defaultPatternsModel,ignorePatterns:[...t.defaultPatternsModel.ignorePatterns,"\\*       "]},pageThreshold:t.defaultPageThreshold}),r.length||i.textsService.setActiveTextId(1)}catch(e){console.log("cannot fetch base texts")}}(e),e}()},2499:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.statisctisService=t.StatisticsService=t.BACKSPACE=t.TypoType=t.PartType=void 0;const r=n(6486),i=n(4842),o=n(3145),a=n(2605);var s,l;function u(e,t){let n="number"==typeof e?e:e.length;if(!t||!n)return 0;let i=t/n;return r.floor(6e4/i/5)}!function(e){e[e.Correct=0]="Correct",e[e.Erased=1]="Erased",e[e.Wrong=2]="Wrong"}(s=t.PartType||(t.PartType={})),function(e){e[e.WrongKey=0]="WrongKey",e[e.WrongNeighborKey=1]="WrongNeighborKey",e[e.WrongOrder=2]="WrongOrder",e[e.Duplication=3]="Duplication",e[e.MissedKey=4]="MissedKey",e[e.WrongCase=5]="WrongCase"}(l=t.TypoType||(t.TypoType={})),t.BACKSPACE="BKSP";class c extends o.BaseDbService{constructor(){super(...arguments),this.sequence=Date.now(),this.seqNumber=0,this.seqHasPresses=!1,this.getSequencesWithPresses=async()=>{const e=await this.getPressesBkspCompensated(),t=r.chain(e).groupBy("sequenceId").orderBy((e=>e[0].sequenceId),"desc").take(500).map((e=>[e,this.doRq((t=>t.get("sequences",e[0].sequenceId)))])).map((async([e,t])=>({sequenceId:e[0].sequenceId,text:this.getText(e),sequenceName:(await t).textName}))).value();return(await Promise.all(t)).filter((e=>e.text.length>0))}}newSequence(e,t){this.seqHasPresses||this.removeSequence(this.sequence),this.sequence=Date.now(),this.seqNumber=0,this.seqHasPresses=!1,this.doRq((n=>n.put("sequences",{id:this.sequence,startDate:this.sequence,textId:e,textName:t})))}reportPress(e){this.doRq((t=>(this.seqHasPresses=!0,t.put("keypresses",i.inputModel({sequenceId:this.sequence,sequenceNumber:++this.seqNumber,char:e.character,delay:e.delay,expected:e.expectedCharacter})))))}async getTotalTyposClassification(){const e=await this.getPresses(),n={};for(let o=0;o<e.length;o++){const s=e[o];if(s.char!=t.BACKSPACE&&s.expected!=s.char){const u=(n=1)=>r.chain(e).drop(o+n).filter((e=>e.char!=t.BACKSPACE));function i(){if(s.expected.toLowerCase()==s.char.toLowerCase())return l.WrongCase;if(u(1).take(1).every((e=>e.char==s.char)).value())return o++,l.Duplication;if(u().take(1).every((e=>e.char==s.expected&&e.expected==s.char)).value())return o++,l.WrongOrder;let e=u(0).take(3).value();return e.every(((t,n)=>!n||t.expected==e[n-1].char))?(o+=2,l.MissedKey):a.areNeighbors(s.expected,s.char)?l.WrongNeighborKey:l.WrongKey}let c=s.expected.toLowerCase(),f=i(),d=n[c]||(n[c]={typeTypes:{},typoChars:{}});d.typeTypes[f]=(d[f]||0)+1,d.typoChars[s.char]=(d.typoChars[s.char]||0)+1}}return n}async removeSequence(e){return this.doRq((async t=>{const n=t.transaction(["keypresses","sequences"],"readwrite"),r=n.objectStore("keypresses");let i=(await r.getAll()).filter((t=>t.sequenceId==e)).map((e=>e.id));if(!i.length)return n.done;await r.delete(IDBKeyRange.bound(Math.min(...i),Math.max(...i)));const o=n.objectStore("sequences");return await o.delete(e),n.done}))}getText(e){return e.filter((e=>e.expected==e.char)).map((e=>e.expected)).join("")}async getTextForSequence(e){return this.getText(await this.getPressesBkspCompensated(e))}async getSequence(e){const n=await this.getAllPresses();let i=r.chain(n).filter((t=>t.sequenceId==e)).orderBy("sequenceNumber","asc").value();if(!i)return[];let o={text:i[0].char,expected:i[0].expected,type:i[0].char==i[0].expected?s.Correct:s.Wrong};const a=[o];let l=0,c=0;for(let e=1;e<i.length;e++){const n=i[e];if(n.char==t.BACKSPACE){l++;continue}if(l)for(let e=a.length-1;e>=0&&l>0;e--){let t=a[e];if(t.type!=s.Erased)if(t.text.length>l){let n=t.text.substring(0,t.text.length-l),r=t.text.substring(t.text.length-l);a.splice(e+1,0,o={type:s.Erased,text:r}),t.text=n,l=0}else t.type=s.Erased,l-=t.text.length}const r=n.char==n.expected?s.Correct:s.Wrong;o.type==r?(o.text+=n.char,o.expected+=n.expected,r==s.Correct&&(c+=n.delay)):(o.type==s.Correct&&(o.wpm=u(o.text,c),c=0),r==s.Correct&&(c=n.delay),a.push(o={type:r,text:n.char,expected:n.expected}))}const f=a[a.length-1];return f.type!=s.Correct||f.wpm||(f.wpm=u(f.text,c)),a}async getFailmap(){const e=await this.getPresses();return r.chain(e).groupBy((e=>e.expected.toLowerCase())).map((e=>{let t=e[0].expected.toLowerCase();const n=r.sumBy(e,(e=>Number(e.expected!=e.char)));return[t,{misstypes:n,total:e.length,ratio:n/e.length}]})).fromPairs().value()}async getStats(){const e=await this.getPresses(),t=r.chain(e).filter((e=>e.char!=e.expected)).groupBy((e=>e.expected)).orderBy((e=>e.length),"desc").value(),n=r.chain(e).groupBy("sequenceId").value(),i={};t.forEach((e=>{i[e[0].expected]=e.map((e=>{const t=n[e.sequenceId],r=t.findIndex((t=>t.sequenceNumber==e.sequenceNumber));let i=[];for(let e=r-1;e>0&&r-e<20;e--){let n=t[e];if(" "==n.expected)break;n.expected==n.char&&(i=[n.expected,...i])}i.push(`[${e.char}]`);for(let e=r+1;e<t.length&&e-r<20;e++){let n=t[e];if(" "==n.expected)break;n.expected==n.char&&i.push(n.expected)}return i.join("")}))})),console.log(t.map((e=>{const t=i[e[0].expected].join("\n  ");return`${e[0].char}: ${e.length}\n${t}`})).join("\n"))}async getPresses(){return this.doRq((e=>e.getAll("keypresses").then((e=>e.filter((e=>e.char!=t.BACKSPACE))))))}async getAllPresses(e){return this.doRq((t=>e?t.getAllFromIndex("keypresses","by-sequenceId",e):t.getAll("keypresses")))}async getPressesBkspCompensated(e){const n=await this.getAllPresses(e),r=[];return n.forEach((e=>{e.char!=t.BACKSPACE?r.push(e):r.length&&r[r.length-1].sequenceId==e.sequenceId&&r.pop()})),r}}t.StatisticsService=c,t.statisctisService=new c},8404:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.textsService=void 0;const r=n(4842),i=n(3145);class o extends i.BaseDbService{constructor(){super(...arguments),this.getTexts=async()=>this.doRq((e=>e.getAll("texts")))}async remove(e){return this.doRq((t=>t.delete("texts",e)))}updateText(e){return this.doRq((t=>t.put("texts",r.inputModel(e))))}getActiveTextId(){let e=localStorage.getItem("active-text");return e?parseInt(e):null}setActiveTextId(e){localStorage.setItem("active-text",e.toString())}savePosition(e,t){const n=JSON.parse(localStorage.getItem("saved-positions")||"{}");n[e]=t,localStorage.setItem("saved-positions",JSON.stringify(n))}getPosition(e){return JSON.parse(localStorage.getItem("saved-positions")||"{}")[e]||0}async getActiveText(){const e=this.getActiveTextId(),t=await this.doRq((t=>t.get("texts",e)));return t?{id:e,name:t.name,text:t.text,position:this.getPosition(e),patterns:t.patterns,pageThreshold:t.pageThreshold}:null}}t.textsService=new o},2629:(e,t,n)=>{"use strict";const r=n(7294),i=n(3935),o=n(8957),a=n(3253);i.render(r.createElement(o.App,null),document.getElementById("app")),a.setAppElement(document.getElementById("app"))},7663:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AnalysisPage=void 0;const r=n(7294),i=n(7294),o=n(2499),a=n(606),s=n(4184),l=n(7916);var u;function c(e){const{sequence:t}=e,[n,a]=i.useState("Loading...");return i.useEffect((()=>{o.statisctisService.getTextForSequence(t).then((e=>a(e.replace("\n","⏎"))))}),[t]),r.createElement(r.Fragment,null,n)}function f(e){const{sequence:t}=e,[n,a]=i.useState(null);return i.useEffect((()=>{o.statisctisService.getSequence(e.sequence).then(a)}),[t]),r.createElement(r.Fragment,null,n?n.map(d):r.createElement(l.Loading,null))}function d(e,t){switch(e.type){case o.PartType.Correct:return r.createElement("span",{className:"part done tooltip tooltip-bottom","data-tooltip":`Chars: ${e.text.length}, WPM: ${e.wpm}`,key:t},e.text);case o.PartType.Erased:return r.createElement("span",{className:"part corrected tooltip tooltip-bottom","data-tooltip":`corrected "${e.text}"`,key:t},e.text);case o.PartType.Wrong:return r.createElement("span",{className:"errored tooltip tooltip-bottom part",key:t,"data-tooltip":`expected: "${e.expected}"`},e.text)}return""}!function(e){e[e.Analysis=0]="Analysis",e[e.Raw=1]="Raw",e[e.Replay=2]="Replay"}(u||(u={})),t.AnalysisPage=function(e){const[t,n]=i.useState(u.Analysis),o=i.useCallback((e=>{let t=parseInt(e.currentTarget.getAttribute("data-tab"));n(t)}),[n]);return r.createElement(r.Fragment,null,r.createElement("ul",{className:"tab tab-block"},r.createElement("li",{className:s.default("tab-item",{active:t==u.Analysis})},r.createElement("a",{href:"#","data-tab":u.Analysis,onClick:o},"Analysis")),r.createElement("li",{className:s.default("tab-item",{active:t==u.Raw})},r.createElement("a",{href:"#","data-tab":u.Raw,onClick:o},"Raw text")),r.createElement("li",{className:s.default("tab-item",{active:t==u.Replay})},r.createElement("a",{href:"#","data-tab":u.Replay,onClick:o},"Replay"))),t==u.Analysis?r.createElement(f,{sequence:e.sequence}):t==u.Raw?r.createElement(c,{sequence:e.sequence}):r.createElement(a.ReplayView,{sequenceId:e.sequence}))}},9881:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AnalysisScreen=void 0;const r=n(7294),i=n(7294),o=n(2499),a=n(7663),s=n(4184);n(3066);const l=n(7916);t.AnalysisScreen=function(){const[e,t]=i.useState(null),[n,u]=i.useState(null),c=i.useCallback((()=>{o.statisctisService.getSequencesWithPresses().then(t)}),[t]);i.useEffect(c,[]);const f=i.useCallback((e=>u(parseInt(e.currentTarget.getAttribute("data-sequenceid")))),[]),d=i.useCallback((e=>{const t=parseInt(e.currentTarget.parentElement.parentElement.getAttribute("data-sequenceid"));o.statisctisService.removeSequence(t).then(c)}),[]);return r.createElement("div",{className:"analysis-screen"},r.createElement("div",{className:"item-container"},e?.map((e=>{return r.createElement("div",{key:e.sequenceId,className:s.default("item",{active:e.sequenceId==n}),"data-sequenceid":e.sequenceId,onClick:f},r.createElement("div",{className:"controls"},r.createElement("button",{className:"btn btn-action s-circle",onClick:d},r.createElement("i",{className:"icon icon-delete"}))),r.createElement("div",{className:"content"},r.createElement("div",{className:"header"},e.sequenceName),r.createElement("div",{className:"header-subtext"},(t=e.sequenceId,new Date(t).toLocaleString())," (",e.text.length," chars)"),r.createElement("div",{className:"preview"},e.text.substring(0,500))));var t}))||r.createElement(l.Loading,null),500==e?.length?r.createElement("span",null,"Only first 500 sequences are shown"):null),r.createElement("div",{className:"selected-sequence"},null==n?r.createElement("span",null,"No sequence selected"):r.createElement(a.AnalysisPage,{sequence:n})))}},606:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ReplayView=void 0;const r=n(7294),i=n(7294),o=n(2499),a=n(7392),s={val:0,max:1};t.ReplayView=function({sequenceId:e}){let[t,n]=i.useState({text:"",chars:s,time:s});return i.useEffect((()=>{const t=new l(e,n);return()=>t.stop()}),[e,n]),r.createElement(r.Fragment,null,r.createElement(a.Progress,{value:t.chars.val,max:t.chars.max}),r.createElement(a.Progress,{value:t.time.val,max:t.time.max,colorOverride:"cornflowerblue"}),r.createElement("span",{style:{whiteSpace:"pre-wrap"}},t.text))};class l{constructor(e,t){this.sequenceId=e,this.cb=t,this.text="",this.idx=0,this.isStopped=!1,this.currentTime=0,this.updateTickerId=0,this.updateTicker=()=>{this.cb({text:this.text,time:{val:this.totalTime-(this.endTime-Date.now()),max:this.totalTime},chars:{val:this.idx,max:this.presses.length-1}})},this.handle=()=>{if(this.isStopped||this.presses.length<=this.idx)return void this.stop();let e=this.presses[this.idx];this.currentTime+=e.delay,setTimeout((()=>{this.isStopped||(e.char==o.BACKSPACE?this.text=this.text.substring(0,this.text.length-1):this.text+=function({char:e}){return"\n"==e?"⏎\n":" "==e?"·​":e}(e),this.idx+=1,setTimeout(this.handle,0))}),e.delay)},o.statisctisService.getAllPresses(e).then((e=>{this.presses=e,this.totalTime=e.reduce(((e,t)=>e+(t.delay||0)),0),this.updateTickerId=setInterval(this.updateTicker,50),this.endTime=Date.now()+this.totalTime})).then(this.handle)}stop(){this.isStopped=!0,clearInterval(this.updateTickerId)}}},7550:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mergeHeat=t.Key=t.stepsColors=void 0;const r=n(7294),i=65,o=i/15,a=[0,i,i,i];function s(e){if(!e||!e.length)return{misstypes:0,total:0,ratio:0};if(1==e.length)return e[0];let t=e.reduce(((e,t)=>e+(t?.misstypes||0)),0),n=e.reduce(((e,t)=>e+(t?.total||0)),0);return{misstypes:t,total:n,ratio:t/n}}t.stepsColors=["#CBEB15","#ffffff","#F2D327","#EB311A"],t.Key=function(e){const{row:n,col:l,heat:u,keybKey:c}=e,f=s(u),d=u.length?function(e){for(let u=1;u<t.stepsColors.length;u++){let c=.08*u;if(e<c)return n=t.stepsColors[u-1],r=t.stepsColors[u],i=(c-e)/.08,o=void 0,a=void 0,s=void 0,l=void 0,o=function(e){return 1==(e=e.toString(16)).length?"0"+e:e},a=Math.ceil(parseInt(n.substring(1,3),16)*i+parseInt(r.substring(1,3),16)*(1-i)),s=Math.ceil(parseInt(n.substring(3,5),16)*i+parseInt(r.substring(3,5),16)*(1-i)),l=Math.ceil(parseInt(n.substring(5,7),16)*i+parseInt(r.substring(5,7),16)*(1-i)),"#"+o(a)+o(s)+o(l)}var n,r,i,o,a,s,l;return t.stepsColors[t.stepsColors.length-1]}(f.ratio):"#ccc",p=n/2*i+l*i+5*l+2+a[n],h=n*i+5*n+2;return r.createElement(r.Fragment,null,r.createElement("rect",{x:p+2,y:h+2,width:i,height:i,stroke:"trasnparent",fill:"#00000044",ry:o}),r.createElement("rect",{x:p,y:h,width:i,height:i,stroke:"black",fill:d,"data-tip":c.chars[0],ry:o}),1==c.chars.length?r.createElement("text",{x:p+32.5,y:h+32.5,style:{color:"black",font:"bold 25px sans-serif"}},c.chars[0]):r.createElement(r.Fragment,null,r.createElement("text",{x:p+i/6,y:h+26,style:{color:"black",font:"bold 25px sans-serif"}},c.chars[0]),r.createElement("text",{x:p+40.625,y:h+50,style:{color:"black",font:"bold 25px sans-serif"}},c.chars[1])),r.createElement("text",{x:p+40.625,y:h+i/6,style:{color:"black",font:"10px sans-serif"}},Math.floor(100*(f.ratio||0)),"%"))},t.mergeHeat=s},6987:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KeyboardHeatmap=void 0;const r=n(7294),i=n(7294),o=n(2499),a=n(2605),s=n(7550),l=n(6168),u=n(7916);t.KeyboardHeatmap=function(){const[e,t]=i.useState(null),n=i.useCallback((t=>{if(!t)return null;let n=a.lazyKeymap().charToKeys[t],i=s.mergeHeat(n.chars.map((t=>e[t])).filter((e=>e)));return i?r.createElement(r.Fragment,null,r.createElement("span",null,"Key: ",n.chars.join("  ")),r.createElement("br",null),r.createElement("span",null,"Encountered: ",i.total),r.createElement("br",null),r.createElement("span",null,"Typos: ",i.misstypes),r.createElement("br",null)):null}),[e]);return e?r.createElement(r.Fragment,null,r.createElement("svg",{viewBox:"0 0 1000 320",style:{width:"80vw",minHeight:"30vh"}},r.createElement("defs",null,r.createElement("linearGradient",{id:"grad"},s.stepsColors.map(((e,t)=>r.createElement("stop",{style:{stopColor:e,stopOpacity:1},key:t,offset:(t+1)/e.length*100+"%"}))))),a.lazyKeymap().keyboard.map(((t,n)=>t.map(((t,i)=>r.createElement(s.Key,{row:n,col:i,heat:t.chars.map((t=>e[t])).filter((e=>e)),key:t.chars[0],keybKey:t}))))).flat(),r.createElement("rect",{x:"3",y:"310",width:"996",height:"5",fill:"url(#grad)",stroke:"black"})),r.createElement(l.default,{getContent:n})):(o.statisctisService.getFailmap().then(t),r.createElement("div",{style:{width:"80vw",height:"20vh"}},r.createElement(u.Loading,null)))}},2605:(e,t)=>{"use strict";function n(e){let t=e.split("\n").filter((e=>e)).map(((e,t)=>e.split(" ").map(((e,n)=>({chars:Array.from(e),row:t,col:n}))))),n=Object.fromEntries(t.flatMap((e=>e.flatMap((e=>e.chars.map((t=>[t,e])))))));var r={keyboard:t,charToKeys:n};return console.log({map:r}),r}Object.defineProperty(t,"__esModule",{value:!0}),t.parseKeymap=t.lazyKeymap=t.areNeighbors=t.keymap=void 0,t.keymap="\n` 1! 2@ 3# 4$ 5% 6^ 7& 8* 9( 0) -_ =+\nq w e r t y u i o p [{ ]}\na s d f g h j k l ;: '\" \\|\nz x c v b n m ,< .> /?\n",t.areNeighbors=function(e,n){let r=t.lazyKeymap(),i=r.charToKeys[e];if(!i)return!1;for(let e=i.col-1;e<=i.col+1;e++)for(let t=i.row-1;t<=i.row+1;t++){let i=r.keyboard[e]?.[t];if(i&&i.chars.includes(n))return!0}return!1},t.lazyKeymap=(()=>{let e=null;return()=>e||(e=n(t.keymap),e)})(),t.parseKeymap=n},6814:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JsonEditorForm=void 0;const r=n(7294),i=n(9101);i.JSONEditor.defaults.options.theme="spectre",i.JSONEditor.defaults.options.iconlib="spectre";const o={title:"Configuration",properties:{patterns:{properties:{ignorePatterns:{title:"Patterns to ignore",type:"array",items:{type:"string",title:"pattern"}},replacementPatterns:{title:"Patterns to replace",format:"table",type:"array",items:{type:"object",title:"Replacement",properties:{search:{type:"string",title:"Search",minLength:1},replace:{type:"string",title:"Replace",minLength:1}}}},breakPatterns:{title:"Break patterns",type:"array",items:{type:"string",title:"Pattern",minLength:1}}},required:["ignorePatterns","replacementPatterns","breakPatterns"]},threshold:{title:"After how many symbols try to break the page",type:"number",min:0}}};class a extends r.Component{constructor(){super(...arguments),this.div=r.createRef()}componentWillUnmount(){this.editor.destroy()}componentDidMount(){this.editor=new i.JSONEditor(this.div.current,{schema:o,startval:this.props.value}),this.editor.on("change",(()=>{let e=!this.editor.validate().length,t=this.editor.getValue();this.props.onChanged({isValid:e,value:t})}))}render(){return r.createElement("div",{id:"json-editor-form",ref:this.div})}}class s extends r.Component{constructor(){super(...arguments),this.state={snapshot:{isValid:!1,value:null}},this.onChanged=e=>this.setState({snapshot:e}),this.save=()=>{this.props.onSave(this.state.snapshot.value)}}render(){return r.createElement("div",null,r.createElement(a,{value:this.props.obj,onChanged:this.onChanged}),r.createElement("button",{disabled:!this.state.snapshot.isValid,className:"btn",onClick:this.save},"Save"))}}t.JsonEditorForm=s},3674:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PatternsEdit=void 0;const r=n(7294),i=n(7294),o=n(6814);t.PatternsEdit=function(e){const{activeText:t,save:n}=e,a=i.useMemo((()=>({threshold:t.pageThreshold,patterns:t.patterns})),[t]),s=i.useCallback((e=>{n({...t,patterns:e.patterns,pageThreshold:e.threshold})}),[n,t]);return r.createElement(r.Fragment,null,r.createElement(o.JsonEditorForm,{obj:a,onSave:s}))}},8317:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TextsScreen=void 0;const r=n(7294),i=n(7294),o=n(4184),a=n(1512);n(8445);const s=n(4842),l=n(8404),u=n(6486),c=n(3674),f=n(3253),d=n(4184);function p(e){let t=document.createElement("DIV");return t.innerHTML=e,t.textContent||t.innerText||""}function h({initialValue:e,onChangeCallback:t}){e=i.useMemo((()=>e),[e]);const[n,o]=i.useState(e);i.useEffect((()=>{o(e)}),[e]);const a=i.useCallback((e=>{o(e.target.value),t(e)}),[t]);return r.createElement("textarea",{value:n,className:"editable-text",onChange:a})}t.TextsScreen=function(e){const[t,n]=i.useState([]),[y,m]=i.useState(null),[v,b]=i.useState(0),[g,_]=i.useState(!1);i.useEffect((()=>{l.textsService.getTexts().then(n)}),[]);let w=t.find((e=>e.id==y)),k=i.useMemo((()=>r.createRef()),[]);const x=i.useCallback((e=>{m(parseInt(e.currentTarget.getAttribute("data-id")))}),[]),C=i.useCallback((e=>{var t=parseInt(e.currentTarget.parentElement.parentElement.getAttribute("data-id"));m(null),l.textsService.remove(t).then(l.textsService.getTexts).then(n)}),[]),E=i.useCallback(u.debounce(((e,t)=>{l.textsService.updateText({text:t,base:w.base,id:w.id,name:e,patterns:w.patterns,pageThreshold:w.pageThreshold}).then((()=>{k.current.classList.remove("visible"),setTimeout((()=>k.current.classList.add("visible")),1)})).then(l.textsService.getTexts).then(n)}),1e3),[w]),O=i.useCallback((e=>{E(p(e.target.value),w.text)}),[E]),S=i.useCallback((()=>{l.textsService.updateText({name:"(new text)",base:!1,text:"Enter your text here",patterns:s.defaultPatternsModel,pageThreshold:s.defaultPageThreshold}).then(l.textsService.getTexts).then(n)}),[]),j=i.useCallback((()=>{_(!0)}),[y]),A=l.textsService.getActiveTextId(),P=i.useCallback((()=>_(!1)),[]);let T=i.useCallback((e=>E(p(w.name),p(e.target.value))),[E]);const R=i.useCallback((e=>{l.textsService.setActiveTextId(e.currentTarget.getAttribute("data-id"))}),[]);return r.createElement("div",{className:"texts-screen"},r.createElement("div",{className:"item-container"},t.map((e=>r.createElement("div",{key:e.id,className:o.default("item",{active:e.id==y}),"data-id":e.id,onClick:x},r.createElement("div",{className:"controls"},r.createElement("button",{className:d.default("btn s-circle",{"btn-primary":A==e.id}),"data-id":e.id,onClick:R},r.createElement("i",{className:"icon icon-check"})),r.createElement("button",{className:"btn btn-action s-circle","data-id":e.id,onClick:j},r.createElement("i",{className:"icon icon-menu"})),e.base?null:r.createElement("button",{className:"btn btn-action s-circle","data-id":e.id,onClick:C},r.createElement("i",{className:"icon icon-delete"}))),r.createElement("div",{className:"content"},r.createElement(a.default,{className:"header",html:e.name,onChange:O}),r.createElement("div",{className:"preview"},e.text.length," characters"))))),r.createElement("button",{onClick:S,className:"btn"},"Create new")),r.createElement("div",{className:"selected-text-container"},r.createElement("div",{className:"saved toast toast-success",ref:k},"Saved!"),r.createElement("div",{className:"selected-text"},null==y?r.createElement("span",{className:"editable-text"},"No selected"):r.createElement(h,{initialValue:w?.text||"",onChangeCallback:T})),r.createElement(f,{isOpen:g,contentLabel:`Configuration for ${w?.text}`},r.createElement("button",{style:{position:"absolute",right:0,top:0,margin:"1vmin",zIndex:9999999,cursor:"pointer",userSelect:"none"},className:"btn s-circle",onClick:P},r.createElement("i",{className:"icon icon-cross"})),r.createElement("div",{style:{height:"10%"}},r.createElement("span",null,`Configuration for '${w?.name}'`),r.createElement("hr",null)),r.createElement("div",{style:{overflowY:"scroll",maxHeight:"80%"}},r.createElement(c.PatternsEdit,{activeText:w,save:e=>l.textsService.updateText(e).then(l.textsService.getTexts).then(n).then(P)})))))}},1261:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Pager=void 0;const r=n(7294),i=n(7294),o=n(7850),a=n(6486),s=n(2499),l=n(2862),u=n(8404);function c(e){return[e.search,e.replace.replace(/\\n/g,"\n")]}t.Pager=function(e){const[t,n]=i.useState((()=>{let{pages:t,activePage:n}=function(e){const{replacementPatterns:t,breakPatterns:n}=e.patterns;let{text:r,pageThreshold:i,position:o}=e;const s=[];let u=0;if(t.map(c).forEach((([e,t])=>{r=r.replace(new RegExp(e,"gm"),t)})),i>r.length)return{pages:[r],activePage:u};let f=a.chain(n).map((e=>new RegExp(e,"gm"))).map((e=>l.findRanges(r,e))).flatten().orderBy((e=>e.index)).value(),d=0,p=0;for(d=0;d<r.length-i;){let e=d+i,t=f.find((t=>t.index>=e));if(!t)break;var h=r.substring(d,t.end);p+=h.length,s.push(h),!u&&o&&o<p&&(console.log("active page set on",{start:d,end:t.end,page:s.length-1,range:t,position:o}),u=s.length-1),d=t.end+1}return s.push(r.substring(d,r.length)),console.group("break to pages"),console.log(s.slice(0,5)),console.log(s.slice(0,5).reduce(((e,t)=>[...e,{t:(e[0]?.t||0)+t.length,l:t.length}]),[])),console.log({activePage:u,position:o}),console.groupEnd(),{pages:s,activePage:u}}(e.textModel);return{pages:t,currentPage:n,pageInput:(n+1).toString()}}));i.useEffect((()=>s.statisctisService.newSequence(e.textModel.id,e.textModel.name)),[]);const f=i.useCallback(((t,r={})=>{n((n=>(function(e,t,n){const r=n?a.chain(t).take(n).map((e=>e.length)).sum().value()+1:0;console.log("position saved",{currentPage:n,position:r}),u.textsService.savePosition(e,r)}(e.textModel.id,n.pages,t),s.statisctisService.newSequence(e.textModel.id,e.textModel.name),{...n,...r,currentPage:t,pageInput:(t+1).toString()})))}),[e]),d=i.useCallback((e=>{let r=parseInt(e.target.value);!r||isNaN(r)||r<1||r>t.pages.length?n((t=>({...t,pageInput:e.target.value}))):f(r-1)}),[]),p=i.useCallback((()=>{f(v+1>=m.length?v:v+1)}),[t]),h=i.useCallback((()=>{f(v-1<0?v:v-1)}),[t]),y=i.useCallback((e=>{console.log("focus"),e.nativeEvent.stopImmediatePropagation(),e.preventDefault(),e.stopPropagation()}),[]);i.useEffect((()=>{let e=e=>{"ArrowLeft"==e.key?(e.preventDefault(),h()):"ArrowRight"==e.key&&(e.preventDefault(),p())};return document.addEventListener("keyup",e),()=>{document.removeEventListener("keyup",e)}}),[h,p]);const{pages:m,currentPage:v}=t,b=i.useMemo((()=>{var e=a.chain(m).take(v).map((e=>e.length)).sum().value();return a.round(e/a.chain(m).map((e=>e.length)).sum().value()*100,2)}),[m,v]);let g=0;for(let e=0;e<t.currentPage;e++)g+=t.pages.length;return r.createElement("div",null,r.createElement(o.TypingPage,{text:m[v],nextPage:p,key:t.currentPage,ignorePatterns:e.textModel.patterns.ignorePatterns}),r.createElement("hr",null),r.createElement("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center"}},r.createElement("div",null,"Page",r.createElement("button",{onClick:h,onMouseDown:y,className:"btn"},"<"),r.createElement("input",{className:"page-input",value:t.pageInput,onChange:d})," / ",t.pages.length,r.createElement("button",{onClick:p,onMouseDown:y,className:"btn"},">")),r.createElement("span",null,m[v].length," chars"),r.createElement("span",null,b,"%")))}},3542:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Stats=void 0;const r=n(7294),i=n(7294),o=n(7523);let a=null;t.Stats=function(e){const[t,n]=i.useState(0),[s,l]=i.useState(500),u=r.useRef();i.useEffect((()=>{const e=setInterval((()=>{n((e=>e+1))}),900);let t=function(e){l(u.current.clientWidth)};return window.addEventListener("resize",t),l(u.current.clientWidth),()=>{clearInterval(e),window.removeEventListener("resize",t)}}),[]),i.useEffect((()=>{a=function(e){if(!e.startedAt)return[];const{timestamps:t}=e;!function(e){if(1==e.length)return 0;let t=e[0],n=0;for(let r=1;r<e.length;r++)n+=e[r]-t,t=e[r];e.length}(e.timestamps);let n=[],r=t[0],i=-1,o=-1;for(let e=1;e<t.length;e++){const a=t[e]-r;n.push(a),-1==i||a<i?i=a:(-1==o||a>o)&&(o=a)}let a=o-i;return n.map((e=>(e-i)/a*100))}(e)}),[e.timestamps]);const{charPerMinute:c,wpm:f}=function(e){if(!e.startedAt)return{charPerMinute:0,wpm:0};let t=((e.completedTime||Date.now())-e.startedAt)/e.timestamps.length,n=Math.floor(6e4/t);return{charPerMinute:n,wpm:Math.floor(n/5)}}(e),d=function(e){if(!e.startedAt)return[];let t=[],n=e.timestamps,r=n[0];for(let e=1;e<n.length;e++)t.push(n[e]-r),r=n[e];return t}(e);return r.createElement(r.Fragment,null,r.createElement("div",{style:{display:"flex",justifyContent:"space-between",background:e.completedTime?"#33663322":"transparent"},ref:u},r.createElement("span",null,"WPM: ",f),r.createElement("span",null,"Errors: ",e.errors),r.createElement("span",null,"Elapsed: ",e.startedAt?Math.floor(((e.completedTime||Date.now())-e.startedAt)/1e3)+"s":"not started")),r.createElement(o.SummaryChart,{delays:d,heatmapWidth:s}))}},7523:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SummaryChart=void 0;const r=n(7294),i=n(8240);function o({start:e,end:t,stepPrice:n,width:i}){let o=[],a=t-e;for(let s=e;s<t;s+=n){let t=(s-e)/a*i,n=s%2==0?0:5;o.push(r.createElement("line",{x1:t,x2:t,y1:n,y2:20-n,stroke:"darkgreen",key:s}))}return r.createElement(r.Fragment,null,o)}t.SummaryChart=function(e){const{delays:t,heatmapWidth:n}=e;return r.createElement("svg",{width:`${n}px`,height:"25px",viewBox:`0 0 ${n} 25`},t.map(((e,t)=>{let i=n/700*(e-0);return i=i>n-4?n-4:i,r.createElement("circle",{key:t,cy:10+(o=t,o>=50&&(o%=50),a[o]),cx:i,r:4,"aria-valuemax":e,fill:"#00000011"});var o})),r.createElement(o,{width:n,stepPrice:25,start:0,end:700}))};for(var a=[],s=0;s<300;s++)a.push(i.default(-600,600)/100)},2722:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TypingCharacter=t.CharState=void 0;const r=n(7294);var i;function o(e){switch(e){case i.Normal:return"";case i.Active:return"active";case i.Errored:return"errored";case i.Warn:return"warn";case i.Done:return"done"}return""}!function(e){e[e.Normal=0]="Normal",e[e.Active=1]="Active",e[e.Done=2]="Done",e[e.Errored=3]="Errored",e[e.Warn=4]="Warn"}(i=t.CharState||(t.CharState={})),t.TypingCharacter=function(e){const{char:t}=e,n=t.printable?"":" not-printable";return"\n"==t.char?t.printable?r.createElement(r.Fragment,null,r.createElement("span",{className:o(t.state)+" specialchar"},"⏎"),r.createElement("br",null)):r.createElement("br",null):r.createElement("span",{className:o(t.state)+n},t.char)}},7850:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TypingPage=void 0;const r=n(7294),i=n(7294),o=n(2722),a=n(3542),s=n(2862),l=n(2499),u=n(1732),c=n(7392),f="qazwsxedcrfvtgb".toUpperCase();let d=null;function p(e,t,n){if("Shift"==e.key)return 2==e.location?n.right=!t:n.left=!t,!0}t.TypingPage=function(e){const[t,n]=i.useState((()=>{let t=function(e,t){let n=[],r=0,i=t&&s.findPatterns(e,t)||null,a=!1;for(let t=0;t<e.length;t++){if(i&&i[r]){let a=i[r];if(t==a.index){n.push({printable:!1,char:e.substring(a.index,a.end),state:o.CharState.Normal}),r++,t+=a.end-a.index-1;continue}}let s=e[t];a?n.push({printable:!0,char:s,state:o.CharState.Normal}):(n.push({printable:!0,char:s,state:o.CharState.Active}),a=!0)}return console.log({nonPrintable:i,chars:n}),n}(e.text,e.ignorePatterns);return{currentIdx:t.findIndex((e=>e.printable)),isRunning:!1,timestamps:[],errors:0,chars:t,completedTime:void 0}}));return d=t,i.useEffect((()=>{let t={left:!1,right:!1};function r(e){return!t.left&&!t.right||e!=e.toUpperCase()||e==e.toLowerCase()||(f.includes(e)?t.right:t.left)}function i(i){if(p(i,!1,t))return;let a=(s=i).key.length>1||!h.includes(s.key.toLowerCase())?"Enter"==i.key?"\n":null:i.key;var s;if("Enter"==i.key&&d.completedTime)return void e.nextPage();const c=Date.now();a?n((e=>{const{chars:t,currentIdx:n,startedAt:i}=e,s=a==t[n].char;s?u.playSuccess():u.playFail();let f=n;for(;f<t.length-1&&(f+=1,!t[f].printable););return l.statisctisService.reportPress({character:a,expectedCharacter:e.chars[e.currentIdx].char,delay:e.timestamps.length?c-e.timestamps[e.timestamps.length-1]:0}),{...e,isRunning:!0,startedAt:i||Date.now(),currentIdx:f,errors:s?e.errors:e.errors+1,timestamps:s?[...e.timestamps,c]:e.timestamps,chars:t.map(((e,t)=>t==n?{...e,state:s?r(a)?o.CharState.Done:o.CharState.Warn:o.CharState.Errored}:t==f?{...e,state:o.CharState.Active}:e)),completedTime:f==n?Date.now():void 0}})):"Backspace"==i.key&&n((e=>{const{chars:t,currentIdx:n,timestamps:r}=e;let i=n;for(;i>0&&(i-=1,!t[i].printable););return t[i].printable?(i!=n&&l.statisctisService.reportPress({character:l.BACKSPACE,expectedCharacter:e.chars[i].char,delay:e.timestamps.length?c-e.timestamps[e.timestamps.length-1]:0}),{...e,currentIdx:i,timestamps:r.slice(0,-1),chars:t.map(((e,t)=>t==n?{...e,state:0==t?o.CharState.Active:o.CharState.Normal}:t==i?{...e,state:o.CharState.Active}:e))}):e}))}function a(e){p(e,!0,t)}return document.addEventListener("keydown",i),document.addEventListener("keyup",a),()=>{document.removeEventListener("keydown",i),document.removeEventListener("keyup",a)}}),[]),i.useEffect((()=>document.querySelector("span.active")?.scrollIntoView()),[t.currentIdx]),r.createElement("div",null,r.createElement(a.Stats,{timestamps:t.timestamps,startedAt:t.startedAt,errors:t.errors,completedTime:t.completedTime}),r.createElement(c.Progress,{value:t.currentIdx,max:t.chars.length-1}),r.createElement("div",{style:{display:"flex",justifyContent:"center",maxHeight:"70vh",minHeight:"20vh",overflowY:"auto"}},r.createElement("div",null,t.chars.map(((e,t)=>r.createElement(o.TypingCharacter,{char:e,key:t}))))))};const h="qazwsxedcrfvtgbyhnujmik,ol.p;/[']\\<>?|\":}{1234567890-=!@#$%^&*()_+ \t`~йфяцічувскамепинртгоьшлбщдюзжхєї"},5843:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TypingScreen=void 0;const r=n(7294),i=n(8404),o=n(7294),a=n(7916),s=n(1261);t.TypingScreen=function(){const[e,t]=o.useState("loading");return o.useEffect((()=>{i.textsService.getActiveText().then(t)}),[]),"loading"==e?r.createElement(a.Loading,null):e?r.createElement(s.Pager,{textModel:e}):r.createElement("div",null,"No text selected")}},2862:(e,t)=>{"use strict";function n(e,t){let n,r=[];for(;n=t.exec(e);)r.push({index:n.index,length:n[0].length,text:n[0],end:n.index+n[0].length});return r}function r(e,t,n){const i=n[t];return i&&e.end>=i.index?r({index:e.index,end:Math.max(i.end,e.end)},t+1,n):i?[e,...r(i,t+1,n)]:[e]}Object.defineProperty(t,"__esModule",{value:!0}),t.findPatterns=t.findRanges=void 0,t.findRanges=n,t.findPatterns=function(e,t){let i=t.map((e=>new RegExp(e,"gm"))).map((t=>n(e,t))).flat().sort(((e,t)=>e.index-t.index));var o=r(i[0],1,i);return console.log({ranges:i,mergedRanges:o}),o}},1732:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.playFail=t.playSuccess=void 0;const r=Array.from(Array(12).keys()).map((()=>new Audio(n(8234))));let i=0;const o=Array.from(Array(12).keys()).map((()=>new Audio(n(9300))));let a=0;t.playSuccess=function(){r[i].play(),i++,i>=r.length&&(i=0)},t.playFail=function(){o[a].play(),a++,a>=r.length&&(a=0)}},2473:e=>{"use strict";e.exports=function(){}}},r={};function i(e){var t=r[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var o=r[e]={id:e,loaded:!1,exports:{}};try{var a={id:e,module:o,factory:n[e],require:i};i.i.forEach((function(e){e(a)})),o=a.module,a.factory.call(o.exports,o,o.exports,a.require)}catch(e){throw o.error=e,e}return o.loaded=!0,o.exports}i.m=n,i.c=r,i.i=[],i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.hu=e=>e+"."+i.h()+".hot-update.js",i.hmrF=()=>"main."+i.h()+".hot-update.json",i.h=()=>"c145c436d877e7786095",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="typist:",i.l=(n,r,o,a)=>{if(e[n])e[n].push(r);else{var s,l;if(void 0!==o)for(var u=document.getElementsByTagName("script"),c=0;c<u.length;c++){var f=u[c];if(f.getAttribute("src")==n||f.getAttribute("data-webpack")==t+o){s=f;break}}s||(l=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,i.nc&&s.setAttribute("nonce",i.nc),s.setAttribute("data-webpack",t+o),s.src=n),e[n]=[r];var d=(t,r)=>{s.onerror=s.onload=null,clearTimeout(p);var i=e[n];if(delete e[n],s.parentNode&&s.parentNode.removeChild(s),i&&i.forEach((e=>e(r))),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=d.bind(null,s.onerror),s.onload=d.bind(null,s.onload),l&&document.head.appendChild(s)}},i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e,t,n,r,o={},a=i.c,s=[],l=[],u="idle";function c(e){u=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}function f(e){if(0===t.length)return e();var n=t;return t=[],Promise.all(n).then((function(){return f(e)}))}function d(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return c("check"),i.hmrM().then((function(r){if(!r)return c(y()?"ready":"idle"),null;c("prepare");var o=[];return t=[],n=[],Promise.all(Object.keys(i.hmrC).reduce((function(e,t){return i.hmrC[t](r.c,r.r,r.m,e,n,o),e}),[])).then((function(){return f((function(){return e?h(e):(c("ready"),o)}))}))}))}function p(e){return"ready"!==u?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):h(e)}function h(e){e=e||{},y();var t=n.map((function(t){return t(e)}));n=void 0;var i,o=t.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return c("abort"),Promise.resolve().then((function(){throw o[0]}));c("dispose"),t.forEach((function(e){e.dispose&&e.dispose()})),c("apply");var a=function(e){i||(i=e)},s=[];return t.forEach((function(e){if(e.apply){var t=e.apply(a);if(t)for(var n=0;n<t.length;n++)s.push(t[n])}})),i?(c("fail"),Promise.resolve().then((function(){throw i}))):r?h(e).then((function(e){return s.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):(c("idle"),Promise.resolve(s))}function y(){if(r)return n||(n=[]),Object.keys(i.hmrI).forEach((function(e){r.forEach((function(t){i.hmrI[e](t,n)}))})),r=void 0,!0}i.hmrD=o,i.i.push((function(h){var y,m,v,b,g=h.module,_=function(n,r){var i=a[r];if(!i)return n;var o=function(t){if(i.hot.active){if(a[t]){var o=a[t].parents;-1===o.indexOf(r)&&o.push(r)}else s=[r],e=t;-1===i.children.indexOf(t)&&i.children.push(t)}else console.warn("[HMR] unexpected require("+t+") from disposed module "+r),s=[];return n(t)},l=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(t){n[e]=t}}};for(var d in n)Object.prototype.hasOwnProperty.call(n,d)&&"e"!==d&&Object.defineProperty(o,d,l(d));return o.e=function(e){return function(e){switch(u){case"ready":return c("prepare"),t.push(e),f((function(){c("ready")})),e;case"prepare":return t.push(e),e;default:return e}}(n.e(e))},o}(h.require,h.id);g.hot=(y=h.id,m=g,b={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:v=e!==y,_requireSelf:function(){s=m.parents.slice(),e=v?void 0:y,i(y)},active:!0,accept:function(e,t,n){if(void 0===e)b._selfAccepted=!0;else if("function"==typeof e)b._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)b._acceptedDependencies[e[r]]=t||function(){},b._acceptedErrorHandlers[e[r]]=n;else b._acceptedDependencies[e]=t||function(){},b._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)b._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)b._declinedDependencies[e[t]]=!0;else b._declinedDependencies[e]=!0},dispose:function(e){b._disposeHandlers.push(e)},addDisposeHandler:function(e){b._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=b._disposeHandlers.indexOf(e);t>=0&&b._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":n=[],Object.keys(i.hmrI).forEach((function(e){i.hmrI[e](y,n)})),c("ready");break;case"ready":Object.keys(i.hmrI).forEach((function(e){i.hmrI[e](y,n)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(y)}},check:d,apply:p,status:function(e){if(!e)return u;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:o[y]},e=void 0,b),g.parents=s,g.children=[],s=[],h.require=_})),i.hmrC={},i.hmrI={}})(),(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),(()=>{var e,t,n,r,o={179:0},a={};function s(e){return new Promise(((t,n)=>{a[e]=t;var r=i.p+i.hu(e),o=new Error;i.l(r,(t=>{if(a[e]){a[e]=void 0;var r=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+r+": "+i+")",o.name="ChunkLoadError",o.type=r,o.request=i,n(o)}}))}))}function l(a){function s(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),a=o.id,s=o.chain,u=i.c[a];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:a};if(u.hot._main)return{type:"unaccepted",chain:s,moduleId:a};for(var c=0;c<u.parents.length;c++){var f=u.parents[c],d=i.c[f];if(d){if(d.hot._declinedDependencies[a])return{type:"declined",chain:s.concat([f]),moduleId:a,parentId:f};-1===t.indexOf(f)&&(d.hot._acceptedDependencies[a]?(n[f]||(n[f]=[]),l(n[f],[a])):(delete n[f],t.push(f),r.push({chain:s.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}i.f&&delete i.f.jsonpHmr,e=void 0;var u={},c=[],f={},d=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(i.o(t,p)){var h,y=t[p],m=!1,v=!1,b=!1,g="";switch((h=y?s(p):{type:"disposed",moduleId:p}).chain&&(g="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":a.onDeclined&&a.onDeclined(h),a.ignoreDeclined||(m=new Error("Aborted because of self decline: "+h.moduleId+g));break;case"declined":a.onDeclined&&a.onDeclined(h),a.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+g));break;case"unaccepted":a.onUnaccepted&&a.onUnaccepted(h),a.ignoreUnaccepted||(m=new Error("Aborted because "+p+" is not accepted"+g));break;case"accepted":a.onAccepted&&a.onAccepted(h),v=!0;break;case"disposed":a.onDisposed&&a.onDisposed(h),b=!0;break;default:throw new Error("Unexception type "+h.type)}if(m)return{error:m};if(v)for(p in f[p]=y,l(c,h.outdatedModules),h.outdatedDependencies)i.o(h.outdatedDependencies,p)&&(u[p]||(u[p]=[]),l(u[p],h.outdatedDependencies[p]));b&&(l(c,[h.moduleId]),f[p]=d)}t=void 0;for(var _,w=[],k=0;k<c.length;k++){var x=c[k],C=i.c[x];C&&(C.hot._selfAccepted||C.hot._main)&&f[x]!==d&&!C.hot._selfInvalidated&&w.push({module:x,require:C.hot._requireSelf,errorHandler:C.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete o[e]})),n=void 0;for(var t,r=c.slice();r.length>0;){var a=r.pop(),s=i.c[a];if(s){var l={},f=s.hot._disposeHandlers;for(k=0;k<f.length;k++)f[k].call(null,l);for(i.hmrD[a]=l,s.hot.active=!1,delete i.c[a],delete u[a],k=0;k<s.children.length;k++){var d=i.c[s.children[k]];d&&(e=d.parents.indexOf(a))>=0&&d.parents.splice(e,1)}}}for(var p in u)if(i.o(u,p)&&(s=i.c[p]))for(_=u[p],k=0;k<_.length;k++)t=_[k],(e=s.children.indexOf(t))>=0&&s.children.splice(e,1)},apply:function(e){for(var t in f)i.o(f,t)&&(i.m[t]=f[t]);for(var n=0;n<r.length;n++)r[n](i);for(var o in u)if(i.o(u,o)){var s=i.c[o];if(s){_=u[o];for(var l=[],d=[],p=[],h=0;h<_.length;h++){var y=_[h],m=s.hot._acceptedDependencies[y],v=s.hot._acceptedErrorHandlers[y];if(m){if(-1!==l.indexOf(m))continue;l.push(m),d.push(v),p.push(y)}}for(var b=0;b<l.length;b++)try{l[b].call(null,_)}catch(t){if("function"==typeof d[b])try{d[b](t,{moduleId:o,dependencyId:p[b]})}catch(n){a.onErrored&&a.onErrored({type:"accept-error-handler-errored",moduleId:o,dependencyId:p[b],error:n,originalError:t}),a.ignoreErrored||(e(n),e(t))}else a.onErrored&&a.onErrored({type:"accept-errored",moduleId:o,dependencyId:p[b],error:t}),a.ignoreErrored||e(t)}}}for(var g=0;g<w.length;g++){var k=w[g],x=k.module;try{k.require(x)}catch(t){if("function"==typeof k.errorHandler)try{k.errorHandler(t,{moduleId:x,module:i.c[x]})}catch(n){a.onErrored&&a.onErrored({type:"self-accept-error-handler-errored",moduleId:x,error:n,originalError:t}),a.ignoreErrored||(e(n),e(t))}else a.onErrored&&a.onErrored({type:"self-accept-errored",moduleId:x,error:t}),a.ignoreErrored||e(t)}}return c}}}self.webpackHotUpdatetypist=(e,n,o)=>{for(var s in n)i.o(n,s)&&(t[s]=n[s]);o&&r.push(o),a[e]&&(a[e](),a[e]=void 0)},i.hmrI.jsonp=function(e,o){t||(t={},r=[],n=[],o.push(l)),i.o(t,e)||(t[e]=i.m[e])},i.hmrC.jsonp=function(a,u,c,f,d,p){d.push(l),e={},n=u,t=c.reduce((function(e,t){return e[t]=!1,e}),{}),r=[],a.forEach((function(t){i.o(o,t)&&void 0!==o[t]&&(f.push(s(t)),e[t]=!0)})),i.f&&(i.f.jsonpHmr=function(t,n){e&&!i.o(e,t)&&i.o(o,t)&&void 0!==o[t]&&(n.push(s(t)),e[t]=!0)})},i.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(i.p+i.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),i(2629)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,